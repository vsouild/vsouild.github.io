<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS7中Redis的安装与使用</title>
    <url>/centos-redis/</url>
    <content><![CDATA[<h3 id="一-检查环境"><a class="markdownIt-Anchor" href="#一-检查环境"></a> 一、检查环境</h3>
<p>由于Rdis官方只提供了源码包，安装需要进行编译。而CentOS7自带的gcc版本为4.8.5，目前的Redis版本为6.0.5，直接编译安装会报错，所以需要升级一下gcc</p>
<span id="more"></span>
<p><img src="image-20200717153808662.png" alt="image-20200717153808662" /></p>
<h3 id="二-升级gcc"><a class="markdownIt-Anchor" href="#二-升级gcc"></a> 二、升级gcc</h3>
<h4 id="1-yum安装"><a class="markdownIt-Anchor" href="#1-yum安装"></a> 1、yum安装</h4>
<p>先切换到/opt目录，依次执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl</span><br><span class="line">yum install devtoolset-9-gcc*</span><br></pre></td></tr></table></figure>
<p>途中会询问，输入y即可</p>
<p><img src="image-20200717160709600.png" alt="image-20200717160709600" /></p>
<p><img src="image-20200717161107132.png" alt="image-20200717161107132" /></p>
<p><img src="image-20200717161233158.png" alt="image-20200717161233158" /></p>
<h4 id="2-临时启用"><a class="markdownIt-Anchor" href="#2-临时启用"></a> 2、临时启用</h4>
<p>执行<code>scl enable devtoolset-9 bash</code>以临时启用新安装的gcc，但是退出shell或重启系统会恢复为原来的gcc版本</p>
<h4 id="3-长期启用"><a class="markdownIt-Anchor" href="#3-长期启用"></a> 3、长期启用</h4>
<p>要长期有效需要配置在环境文件<code>/etc/profeile</code>里追加一行<code>source /opt/rh/devtoolset-9/enable</code>，然后<code>source /etc/profeile</code>使其生效，最后<code>gcc -v</code>检查版本</p>
<p><img src="image-20200717162019916.png" alt="image-20200717162019916" /></p>
<h3 id="三-安装redis"><a class="markdownIt-Anchor" href="#三-安装redis"></a> 三、安装Redis</h3>
<p>接下来就可以按照<a href="https://redis.io/download">官网</a>上的说明来编译安装Redis了</p>
<h4 id="1-下载"><a class="markdownIt-Anchor" href="#1-下载"></a> 1、下载</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.5.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="image-20200717162533467.png" alt="image-20200717162533467" /></p>
<p>虽然只有2.1M，但几十KB/s的速度还是比较慢的，也可以选择自己下载后用FTP传上去</p>
<h4 id="2-解压缩"><a class="markdownIt-Anchor" href="#2-解压缩"></a> 2、解压缩</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzf redis-6.0.5.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="image-20200717162732596.png" alt="image-20200717162732596" /></p>
<h4 id="3-编译"><a class="markdownIt-Anchor" href="#3-编译"></a> 3、编译</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.0.5</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>此过程比较漫长，大概需要2分钟（1核2G服务器）</p>
<h4 id="4-启动"><a class="markdownIt-Anchor" href="#4-启动"></a> 4、启动</h4>
<p>在redis-6.0.5目录下执行<code>src/redis-server</code>即可，此时是前台运行状态</p>
<p><img src="image-20200717163156041.png" alt="image-20200717163156041" /></p>
<h4 id="5-安装"><a class="markdownIt-Anchor" href="#5-安装"></a> 5、安装</h4>
<p>执行<code>make install</code>将src下编译好的文件安装到当前系统，就不用每次都去源码包下运行了</p>
<p><img src="image-20200717190817928.png" alt="image-20200717190817928" /></p>
<p>安装后的路径在<code>/usr/local/bin</code>里</p>
<h4 id="6-配置守护进程后台运行"><a class="markdownIt-Anchor" href="#6-配置守护进程后台运行"></a> 6、配置守护进程(后台运行)</h4>
<p>复制一份配置文件过去，不在默认的文件上修改</p>
<p><img src="image-20200717192911600.png" alt="image-20200717192911600" /></p>
<p>在206行的位置，把no改为yes，上面的注释说：默认Redis不是以守护进程运行的，如果需要的话使用yes来开启，同时Redis会写入pid文件在/var/run/redis.pid</p>
<p><img src="image-20200717195550732.png" alt="image-20200717195550732" /></p>
<p>此时启动Redis，记得添加配置文件为参数。然后启动redis-cli客户端程序，使用<code>ping</code>命令验通（默认链接127.0.0.1:6379）</p>
<p><img src="image-20200717201348919.png" alt="image-20200717201348919" /></p>
<p>检查进程</p>
<p><img src="image-20200717201714670.png" alt="image-20200717201714670" /></p>
<h4 id="7-关闭"><a class="markdownIt-Anchor" href="#7-关闭"></a> 7、关闭</h4>
<p>在客户端执行<code>shutdown</code>命令关闭redis，<code>exit</code>退出客户端</p>
<p><img src="image-20200717201815520.png" alt="image-20200717201815520" /></p>
<p>再次检查进程，服务端与客户端均已关闭</p>
<p><img src="image-20200717201930903.png" alt="image-20200717201930903" /></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java与MySQL</title>
    <url>/java-mysql/</url>
    <content><![CDATA[<h2 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h2>
<p>Java为了在许多不同的数据库上进行访问与操作时有统一的标准，定义并提供了JDBC（Java Database Connectivity）规范，同时也是一套API，为Java提供了通用的数据库访问接口，使其几乎可以访问任何数据源。而各数据库厂商则负责提供其具体的实现——JDBC驱动。开发者则负责开发应用程序调用JDBC API，JDBC API使用驱动程序管理器和特定于数据库的驱动程序来建立与不同数据库的连接</p>
<span id="more"></span>
<p><img src="jdbc-architecture.jpg" alt="img" /></p>
<h3 id="1-jdbc"><a class="markdownIt-Anchor" href="#1-jdbc"></a> 1、JDBC</h3>
<p>JDBC API由JavaSE的两个包组成，当安装JDK的时候便自动获得了：</p>
<ul>
<li>java.sql：核心包，JDBC的基础框架</li>
<li>javax.sql：对上一个包的补充，将API功能扩展到了服务器端。既包含于JavaSE，也是JavaEE的组成部分</li>
</ul>
<h4 id="11-jdbc组件"><a class="markdownIt-Anchor" href="#11-jdbc组件"></a> 1.1 JDBC组件</h4>
<p>java.sql包主要有以下类</p>
<ul>
<li>DriverManager：负责加载各种不同数据库驱动程序，并根据不同的请求返回相应的数据库连接对象</li>
<li>SQLException：表示在数据库连接过程中和SQL语句的执行时所发生的异常</li>
</ul>
<p>和接口（需驱动程序提供者实现）</p>
<ul>
<li>Driver：驱动程序对象，被加载到DriverManager中，处理与数据库的连接。不会直接操作此对象而是通过DriverManager</li>
<li>Connection：数据库连接对象，负责与数据库的通讯，可以产生执行SQL的语句对象</li>
<li>Statement：语句对象，用于执行增删改查（特指静态SQL和单次执行）
<ul>
<li>PreparedStatement：预编译语句对象，用于执行包含动态参数的SQL语句（在服务器端编译，允许重复执行以提高效率，同时防止SQL注入）</li>
<li>CallableStatement：用于调用数据库的存储过程</li>
</ul>
</li>
<li>ResultSet：表示在使用语句对象执行SQL后的结果集，即从数据库检索的数据对象</li>
</ul>
<p>而javax.sql则提供了以下功能：</p>
<ul>
<li>DataSource接口：作为DriverManager的代替，可以建立与数据源的连接</li>
<li>Rowsets接口：行集，与其它各种类和接口协同工作，包括三类：监听器或事件通知、行集元数据、读写设备</li>
<li>连接池和语句池</li>
<li>分布式事务</li>
</ul>
<p>前两个可以由应用程序直接使用，后两个则由中间层内部使用</p>
<h4 id="12-数据类型映射"><a class="markdownIt-Anchor" href="#12-数据类型映射"></a> 1.2 数据类型映射</h4>
<p>Java的数据类型在与数据库的数据类型之间使用时的映射规范如下</p>
<table>
<thead>
<tr>
<th>数据库数据类型</th>
<th>Java数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR、VARCHAR、LONGVARCHAR</td>
<td>String</td>
</tr>
<tr>
<td>NUMERIC、DECIMAL</td>
<td>BigDecimal</td>
</tr>
<tr>
<td>BIT</td>
<td>boolean</td>
</tr>
<tr>
<td>TINYINT</td>
<td>byte</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>short</td>
</tr>
<tr>
<td>INT</td>
<td>int</td>
</tr>
<tr>
<td>BIGINT</td>
<td>long</td>
</tr>
<tr>
<td>REAL</td>
<td>float</td>
</tr>
<tr>
<td>FLOAT、DOUBLE</td>
<td>double</td>
</tr>
<tr>
<td>BINARY、VARBINARY、LONGVARBINARY</td>
<td>byte[]</td>
</tr>
<tr>
<td>DATE</td>
<td>java.sql.Date</td>
</tr>
<tr>
<td>TIME</td>
<td>java.sql.Time</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>java.sql.Timestamp</td>
</tr>
<tr>
<td>BLOB</td>
<td>java.sql.Blob</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>这种类型匹配映射规范不是强制的</strong>，对于MySQL来说，任何数据库数据类型都可以转换为String，任何数字类型都可以转换为任何Java的数字类型，但可能会发生舍入、溢出或精度丢失的情况。</p>
</blockquote>
<h4 id="13-版本关系"><a class="markdownIt-Anchor" href="#13-版本关系"></a> 1.3 版本关系</h4>
<p>JDBC版本与JDK版本的关系</p>
<table>
<thead>
<tr>
<th>JDBC</th>
<th>JDK</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.0</td>
<td>1.1</td>
</tr>
<tr>
<td>2.0</td>
<td>1.2和1.3</td>
</tr>
<tr>
<td>3.0</td>
<td>1.4</td>
</tr>
<tr>
<td>4.0</td>
<td>1.6</td>
</tr>
<tr>
<td>4.1</td>
<td>1.7</td>
</tr>
<tr>
<td>4.2</td>
<td>1.8</td>
</tr>
</tbody>
</table>
<p>参考链接</p>
<ul>
<li><a href="https://jcp.org/en/jsr/detail?id=54">JSR54——JDBC3.0规范</a></li>
<li><a href="https://jcp.org/en/jsr/detail?id=221">JSR221——JDBC4.0规范</a></li>
</ul>
<h3 id="2mysql连接器驱动"><a class="markdownIt-Anchor" href="#2mysql连接器驱动"></a> 2.MySQL连接器（驱动）</h3>
<p>MySQL Connector/J驱动程序是MySQL为JDBC提供的驱动程序，它有易于开发的特性，包括对驱动管理器的自动注册、标准化的有效性检查、分类的SQL异常处理、对大量更新的支持、以及对java.time包的本地和偏移日期时间变体的支持。</p>
<blockquote>
<p>对于使用通用数据访问设计模式的大型程序，考虑使用流行的ORM框架，如Hibernate、Spring的JDBC模板或MyBatis，以减少使用JDBC的代码量，方便进行调试、调优和维护</p>
</blockquote>
<h4 id="21-版本兼容性"><a class="markdownIt-Anchor" href="#21-版本兼容性"></a> 2.1 版本兼容性</h4>
<p>常用的驱动版本是5.1.x和8.0.x，两者使用时有所区别，但都能在不同版本的MySQL服务器上使用</p>
<table>
<thead>
<tr>
<th style="text-align:left">驱动版本</th>
<th style="text-align:left">JDBC版本</th>
<th style="text-align:left">MySQL服务器版本</th>
<th style="text-align:left">JRE版本</th>
<th style="text-align:left">JDK版本</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">5.1</td>
<td style="text-align:left">3.0，4.0，4.1，4.2</td>
<td style="text-align:left">5.6，5.7，8.0</td>
<td style="text-align:left">JRE 5或者更高</td>
<td style="text-align:left">JDK 5.0和JDK 8.0或者更高</td>
</tr>
<tr>
<td style="text-align:left">8.0（推荐）</td>
<td style="text-align:left">4.2</td>
<td style="text-align:left">5.6，5.7，8.0</td>
<td style="text-align:left">JRE 8或者更高</td>
<td style="text-align:left">JDK 8或者更高</td>
</tr>
</tbody>
</table>
<h4 id="22-url连接语法"><a class="markdownIt-Anchor" href="#22-url连接语法"></a> 2.2 URL连接语法</h4>
<p>既然是连接器，那么就有连接语法，和网页地址一样是URL，相当于Java程序到数据库的连接（通常是TCP）。其语法格式是由数据库厂商指定的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">protocol://[hosts][/database][?properties]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>任何出现在连接语法中的URL保留字符都必须进行<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">URL编码</a>或转义。包括字符/、:、@、(、)、[、]、&amp;、#、=、?和空格</p>
</blockquote>
<p>协议（protocol）通常是<code>jdbc:mysql</code></p>
<p>主机名（hosts）视情况而定，可以仅由主机名组成，也可以是多个主机名、端口号或特定于主机的属性和用户凭据。对于本机则是<code>localhost</code>或<code>127.0.0.1</code>，端口号默认<code>3306</code>。均不指定时默认<code>localhost:3306</code>。而用户凭据则建议在URL之外设置</p>
<p>数据库（database）指定默认使用的数据库。如果未指定则不使用，此时要么在Connection实例中调用setCatalog()方法（不建议调用use语句），要么在执行SQL语句时必须指定包含数据库名的表名</p>
<p>属性（properties）适用于MySQL服务器的一系列全局属性（包括用户名和密码），与http中的参数语法一致。不同之处在于键值对只能是字符串且<strong>键名区分大小写</strong><br />
有关可配置的属性，参考<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html">开发者指南 6.3 Configuration Properties</a></p>
<h2 id="二-实践"><a class="markdownIt-Anchor" href="#二-实践"></a> 二、实践</h2>
<h3 id="1-获取驱动"><a class="markdownIt-Anchor" href="#1-获取驱动"></a> 1、获取驱动</h3>
<p>可以在MySQL官方<a href="https://dev.mysql.com/downloads/connector/j/">下载页面</a>下拉选择Platform Independent获取压缩包，其中的jar包即为驱动。更推荐使用maven安装：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>依赖的范围为<strong>runtime</strong>，表示该依赖包不是编译所需，而是运行时所需的（默认compile）</p>
<h3 id="2-准备数据"><a class="markdownIt-Anchor" href="#2-准备数据"></a> 2、准备数据</h3>
<p>然后准备一组数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `test` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line">USE `test`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `person` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `person` (`id`, `name`, `sex`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张某&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="string">&#x27;李某&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">21</span>), (<span class="number">3</span>, <span class="string">&#x27;王某&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>
<h3 id="3-代码示例"><a class="markdownIt-Anchor" href="#3-代码示例"></a> 3、代码示例</h3>
<p>使用JDBC与驱动操作数据库一般有以下几个步骤：</p>
<ol>
<li>加载（注册）驱动</li>
<li>配置属性（用户与连接信息）</li>
<li>获取连接对象</li>
<li>获取执行SQL语句的对象</li>
<li>执行SQL获取结果集</li>
<li>处理结果集</li>
<li>关闭（释放）连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">		stmt = conn.createStatement();</span><br><span class="line">		rs = stmt.executeQuery(<span class="string">&quot;SELECT * FROM person&quot;</span>);</span><br><span class="line">		<span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">		<span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cc; i++) &#123;</span><br><span class="line">			System.out.print(rsmd.getColumnName(i) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cc; i++) &#123;</span><br><span class="line">				System.out.print(rs.getString(rsmd.getColumnName(i)) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rs.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				stmt.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JDBC4.0以前，连接数据库前需要先使用<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;)</code> 来加载数据库驱动。JDBC4.0之后则不需要了，可以直接获取连接对象，这是通过Java的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">SPI扩展机制</a>实现的</p>
</blockquote>
<ul>
<li>5.1.x的驱动名是<code>com.mysql.jdbc.Driver</code>，而8.0.x改为了<code>com.mysql.cj.jdbc.Driver</code>。因为在8.0.x中做了兼容性处理，所以在8.0.x中使用5.1.x的驱动名也是可以的</li>
<li><code>getConnection</code>有三种重载方法，一是仅url，二是url、用户名和密码字符串，三是url和Properties类</li>
<li><code>Statement</code>对象用于执行基本的SQL语句。使用<code>executeQuery</code>方法来执行查询，<code>executeUpdate</code>方法执行增删改，后者返回SQL语句匹配到的行数，而不是受影响的行数。<br />
如果无法预知使用何种语句，可以使用<code>execute</code>方法。当SQL语句是查询时返回true，增删改则返回false<br />
对于查询语句，都可以调用<code>getResultSet</code>方法获取结果集<code>ResultSet</code>。对于增删改语句则调用<code>getUpdateCount</code>方法获取受影响的行数</li>
<li><code>ResultSet</code>可以获取<code>ResultSetMetaData</code>元数据，其中有表信息</li>
<li><code>ResultSet</code>中<strong>列的索引从1开始而不是0</strong></li>
<li><code>next</code>方法将结果集的游标从当前位置向后移动一行。游标最初位于第一行之前，之后每次移动一行。返回false时，表示游标位于最后一行之后</li>
<li>对于获取到的数据，既可以视为字符串<code>getString</code>，也可以视为对象<code>getObject</code>然后转换，参考[数据类型映射](#1.2 数据类型映射)</li>
<li>最后依次释放ResultSet、Statement、Connection对象（按与创建时相反的顺序）</li>
</ul>
<p><img src="image-20210624201743510.png" alt="image-20210624201743510" /></p>
<h3 id="4-优化"><a class="markdownIt-Anchor" href="#4-优化"></a> 4、优化</h3>
<p>资源关闭的代码过于冗长，优化方案是使用try-with-resource语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">	     <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">	     <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM person&quot;</span>))&#123;</span><br><span class="line">		<span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">		<span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cc; i++) &#123;</span><br><span class="line">			System.out.print(rsmd.getColumnName(i) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cc; i++) &#123;</span><br><span class="line">				System.out.print(rs.getString(rsmd.getColumnName(i)) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其它重复的代码则可以提取为工具类。首先是连接属性可以写入属性文件<code>db.properties</code>（maven项目放在<em>resources</em>目录下）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///test</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>然后编写工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtil</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String driverName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			prop.load(DbUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>));</span><br><span class="line">			driverName = prop.getProperty(<span class="string">&quot;driver-name&quot;</span>);</span><br><span class="line">			url = prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">			user = prop.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">			password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">			Class.forName(driverName).newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">		<span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span> &#123;</span><br><span class="line">		close(rs);</span><br><span class="line">		close(stmt);</span><br><span class="line">		close(conn);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(AutoCloseable ac)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (ac != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				ac.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提取方法，测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	insert(<span class="string">&quot;INSERT INTO person (`name`,`sex`,`age`) VALUE (&#x27;赵某&#x27;,&#x27;男&#x27;,25)&quot;</span>);</span><br><span class="line">	update(<span class="string">&quot;UPDATE person SET `age`=18 WHERE id=2&quot;</span>);</span><br><span class="line">	delete(<span class="string">&quot;DELETE FROM person WHERE id=1&quot;</span>);</span><br><span class="line">	System.out.println(selectList(<span class="string">&quot;SELECT * FROM person&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">selectList</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">	List&lt;List&lt;String&gt;&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DbUtil.getConnection();</span><br><span class="line">	     <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">	     <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql)) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">		<span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">			List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cc; i++) &#123;</span><br><span class="line">				list.add(rs.getString(rsmd.getColumnName(i)));</span><br><span class="line">			&#125;</span><br><span class="line">			resultList.add(list);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DbUtil.getConnection();</span><br><span class="line">	     <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement()) &#123;</span><br><span class="line">		stmt.execute(sql);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">	update(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">	update(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210624225659876.png" alt="image-20210624225659876" /></p>
<h2 id="三-连接池"><a class="markdownIt-Anchor" href="#三-连接池"></a> 三、连接池</h2>
<p>数据库连接是一种很昂贵的资源，建立与释放连接会相当耗时。图：不使用连接池执行100次获取与释放连接与使用连接池的耗时对比</p>
<p><img src="image-20210701154247135.png" alt="image-20210701154247135" /></p>
<h3 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1、介绍</h3>
<blockquote>
<p>连接池是一种创建、管理与维护数据库连接的缓存技术，被设计为在需要对数据库发出请求时可以重用连接。连接池可以极大地提高应用程序的性能，降低总体资源使用率。同时还减少了用户等待与数据库连接创建的时间</p>
</blockquote>
<p>通过JDBC与驱动访问MySQL数据库时使用连接池的优点有</p>
<ul>
<li>减少了创建连接的时间：尽管与其他数据库相比，MySQL提供了快速连接设置，但是通过JDBC创建新的连接仍然会产生网络和JDBC驱动程序开销，如果连接被回收到连接池中，则可以避免</li>
<li>简化的编程模型：在使用连接池时，每个应用程序线程都可以像未使用连接池之前一样工作</li>
<li>控制资源使用：如果每次线程需要一个连接时都创建一个新连接，而不是使用连接池，那么能会造成应用程序资源的浪费，并且在高负载时，可能会导致不可预知的情况</li>
</ul>
<h3 id="2-连接池是如何工作的"><a class="markdownIt-Anchor" href="#2-连接池是如何工作的"></a> 2、连接池是如何工作的</h3>
<p>实际上在连接池中，创建连接并使用之后不会立即释放，而是将连接放回池中以便其他线程使用，这样就不必创建新的连接。当连接从池中取出时，会它被请求它的线程独占使用。从代码角度上说，这与应用程序的线程每次调用<code>DriverManager.getConnection()</code>是一样的。使用连接池，则可能使用新连接或现有连接（而非总是新连接）。</p>
<p>连接池有许多参数可以设定，例如可以通过设置最小连接数、最大连接数和空闲连接数，以优化特定问题场景下或特定环境中连接池的性能。</p>
<h3 id="3-各种连接池"><a class="markdownIt-Anchor" href="#3-各种连接池"></a> 3、各种连接池</h3>
<p>JDBC提供了连接池的标准接口<code>javax.sql.DataSource</code>，同数据库驱动一样，要使用JDBC连接池，还需要选择JDBC连接池的实现。常见的连接池有：</p>
<ul>
<li><a href="https://www.mchange.com/projects/c3p0/">C3P0</a>：开源的JDBC连接池，特点是实现了数据源和JNDI的绑定</li>
<li><a href="http://commons.apache.org/proper/commons-dbcp/">DBCP</a>：作为apache的开源项目之一，依赖于Jakarta commons-pool对象池机制，tomcat内置的默认连接池</li>
<li><a href="https://github.com/brettwooldridge/HikariCP/">HikariCP</a>：后起之秀。号称性能最快的数据库连接池。Springboot 2.x默认使用</li>
<li><a href="https://github.com/alibaba/druid">Druid</a>：此处特指alibaba开发的数据库连接池，特点是强大的监控以及其它扩展功能</li>
</ul>
<h3 id="4-使用连接池"><a class="markdownIt-Anchor" href="#4-使用连接池"></a> 4、使用连接池</h3>
<p>这里以最基础的DBCP作为演示，不同的数据源使用时都是大同小异的。</p>
<p>普通java项目通过<a href="http://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi">官网下载jar包</a>然后添加到类路径，使用maven则添加依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后修改一下前面的属性文件，属性名必须与DBCP的<a href="http://commons.apache.org/proper/commons-dbcp/configuration.html">配置参数</a>名一致</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///test</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>修改工具类。在这里也可以通过<code>DataSource</code>对象来设置参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BasicDataSource dataSource;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">	<span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		prop.load(DbcpUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>));</span><br><span class="line">		dataSource = BasicDataSourceFactory.createDataSource(prop);</span><br><span class="line">		dataSource.setInitialSize(<span class="number">10</span>); <span class="comment">// 连接池的初始大小</span></span><br><span class="line">		dataSource.setMaxTotal(<span class="number">10</span>); <span class="comment">// 设置可连接总数，负值表示无限制。</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BasicDataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DbcpUtil.getDataSource().getConnection();</span><br><span class="line">	     <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">	     <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(<span class="string">&quot;SELECT * FROM person&quot;</span>)) &#123;</span><br><span class="line">		<span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">		<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= rsmd.getColumnCount(); i++) &#123;</span><br><span class="line">				System.out.print(rs.getString(rsmd.getColumnName(i)) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里try-with-resource语法中的关闭资源并非是真正的关闭，而是表示释放到连接池中，除此以外可以发现，与没有使用连接池时代码几乎无区别</p>
<h2 id="四-其它扩展内容"><a class="markdownIt-Anchor" href="#四-其它扩展内容"></a> 四、其它扩展内容</h2>
<h3 id="1-sql注入与预编译语句"><a class="markdownIt-Anchor" href="#1-sql注入与预编译语句"></a> 1、SQL注入与预编译语句</h3>
<p>前面所使用的<code>Statement</code>对象主要用于执行静态SQL语句，当条件参数化时则需要拼接字符串，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">stmt.executeQuery(<span class="string">&quot;SELECT * FROM person WHERE id=&quot;</span> + id);</span><br></pre></td></tr></table></figure>
<p>假设这个参数由用户输入，且为程序期待的值时SQL语句获取的结果集就是正常的，如果这个参数是精心构造的SQL语句呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;3 OR 1=1&quot;</span>;</span><br><span class="line">stmt.executeQuery(<span class="string">&quot;SELECT * FROM person WHERE id=&quot;</span> + id);</span><br></pre></td></tr></table></figure>
<p>此时相当于<code>WHERE</code>条件恒为真，所有表数据均被获取，发生了<a href="https://zh.wikipedia.org/wiki/SQL%E6%B3%A8%E5%85%A5">SQL注入</a>的问题</p>
<p><img src="image-20210625182523885.png" alt="image-20210625182523885" /></p>
<p>SQL注入攻击产生的后果很严重，为了解决此问题，JDBC设计了<code>PreparedStatement</code>预编译语句对象（由驱动提供具体实现），可以完全避免SQL注入的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;3 OR 1=1&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DbUtil.getConnection();</span><br><span class="line">	     <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;SELECT * FROM person WHERE id=?&quot;</span>)) &#123;</span><br><span class="line">		ps.setString(<span class="number">1</span>, id);</span><br><span class="line">		<span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery())&#123;</span><br><span class="line">			<span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">				System.out.print(rs.getString(<span class="number">1</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">				System.out.print(rs.getString(<span class="number">2</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">				System.out.print(rs.getString(<span class="number">3</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">				System.out.println(rs.getString(<span class="number">4</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210626001028772.png" alt="image-20210626001028772" /></p>
<p>与<code>Statement</code>对象有所不同，使用时要先构造SQL语句，参数全部使用<code>?</code>代替，然后再获取<code>PreparedStatement</code>对象，通过其setXXX方法传参，第一个参数为参数索引（即第几个<code>?</code>），与列索引相同从1开始而不是0，最后再<code>executeXXX</code>。此时执行的SQL语句是<code>SELECT * FROM person WHERE id='3 OR 1=1'</code>，其中的参数已被转义为字符串</p>
<h3 id="2-jdbc事务"><a class="markdownIt-Anchor" href="#2-jdbc事务"></a> 2、JDBC事务</h3>
<p>在JDBC中也可以通过代码使用事务，<code>Connection</code>对象的<code>setAutoCommit(boolean autoCommit)</code>方法用于开启或关闭事务，默认情况下，新连接处于自动提交模式（单语句事务状态）。如果在事务中调用此方法并更改自动提交模式，则事务会被提交</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	conn = DbUtil.getConnection();</span><br><span class="line">	conn.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 开启事务</span></span><br><span class="line">	pstmt = conn.prepareStatement(sql);</span><br><span class="line">	<span class="keyword">if</span> (pstmt.execute()) &#123;</span><br><span class="line">		rs = pstmt.getResultSet();</span><br><span class="line">	&#125;</span><br><span class="line">	conn.commit(); <span class="comment">// 提交事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">	<span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn.rollback(); <span class="comment">// 回滚事务</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e2) &#123;</span><br><span class="line">			e2.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	e1.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	conn.setAutoCommit(<span class="literal">true</span>); <span class="comment">// 回到默认状态（ ）</span></span><br><span class="line">	DbUtil.close(conn, pstmt, rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要设定事务隔离级别，使用下面的方法。如果在事务中调用此方法，则结果取决于驱动定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);</span><br></pre></td></tr></table></figure>
<p>或者获取当前连接的事务隔离级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.getTransactionIsolation();</span><br></pre></td></tr></table></figure>
<p>常量<code>Connection.TRANSACTION_NONE</code>表示无事务或不支持事务，<code>Connection.TRANSACTION_REPEATABLE_READ</code>为MySQL默认隔离级别</p>
<p>也可以设置、判断读写模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.setReadOnly(<span class="literal">true</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> conn.isReadOnly();</span><br></pre></td></tr></table></figure>
<h3 id="3-批处理"><a class="markdownIt-Anchor" href="#3-批处理"></a> 3、批处理</h3>
<p>当需要重复执行一句仅参数不同的DML语句时，可以使用批处理功能来提高性能。要确定数据库是否支持批处理，先使用<code>Connection</code>对象的<code>getMetaData()</code>获取元数据，然后调用<code>supportsBatchUpdates()</code>方法，返回<code>true</code>则表示支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO `person` (`name`, `sex`, `age`) VALUE (?, ?, ?)&quot;</span>;</span><br><span class="line">conn = DbUtil.getConnection();</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">if</span> (conn.getMetaData().supportsBatchUpdates()) &#123;</span><br><span class="line">	String[][] temp = &#123;&#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;30&quot;</span>&#125;, &#123;<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;28&quot;</span>&#125;, &#123;<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;26&quot;</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (String[] s : temp) &#123;</span><br><span class="line">		pstmt.setString(<span class="number">1</span>, s[<span class="number">0</span>]);</span><br><span class="line">		pstmt.setString(<span class="number">2</span>, s[<span class="number">1</span>]);</span><br><span class="line">		pstmt.setString(<span class="number">3</span>, s[<span class="number">2</span>]);</span><br><span class="line">		pstmt.addBatch();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span>[] results = pstmt.executeBatch();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i : results) &#123;</span><br><span class="line">		System.out.println(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Statement</code>、<code>PreparedStatement</code>和<code>CallableStatement</code>对象都可以使用<code>addBatch()</code>方法来将参数或语句添加到批处理中，然后调用<code>executeBatch()</code>将这一组命令提交到数据库执行。<br />
如果所有命令都执行成功，则返回一个int类型的数组，其中元素的顺序与添加批处理命令时的顺序相同，值有以下几种：</p>
<ul>
<li>大于或等于0：表示命令执行成功，并且表示受影响的行数</li>
<li>常量<code>Statement.SUCCESS_NO_INFO</code>：表示命令执行成功但受影响的行数未知</li>
<li>常量<code>Statement.EXECUTE_FAILED</code>：表示命令执行失败，但仅在命令失败后驱动继续处理剩余命令时才会存在，不处理则直接抛出异常</li>
</ul>
<p>在执行前，可以使用<code>clearBatch()</code>方法清空当前添加的所有批处理语句（无法指定删除某个语句）</p>
<blockquote>
<p>特殊情况：如果执行批处理时，其中的命令所影响的行数超过了int类型的范围，则应该使用<code>executeLargeBatch()</code>方法，此方法返回long类型的数组</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT入门以及在java中的使用</title>
    <url>/jwt-java/</url>
    <content><![CDATA[<h2 id="一-介绍"><a class="markdownIt-Anchor" href="#一-介绍"></a> 一、介绍</h2>
<p><img src="/jwt-java/image-20200922172321041.png" alt="image-20200922172321041" /></p>
<h3 id="1-什么是jwt"><a class="markdownIt-Anchor" href="#1-什么是jwt"></a> 1、什么是JWT</h3>
<p><a href="https://jwt.io/">JWT</a>即JSON Web Tokens，它是一种紧凑的、URL安全的方法，用于表示要在双方之间传输的声明（claims）。JWT中的声明被编码为一个JSON对象，该对象被用作JSON Web签名（Signature）（JWS）结构的有效载荷（payload）或JSON Web加密（JWE）结构的明文，从而能够使用消息认证码（MAC）和/或加密算法对声明进行数字签名或完整性保护。</p>
<span id="more"></span>
<p>JWT是一个开放标准（<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>），它定义了一种紧凑且自包含的方式，用于在各方之间安全地将信息作为JSON对象传输。由于此信息是经过数字签名的，因此可以被验证和信任。可以使用密钥（通过<strong>HMAC</strong>算法）或<strong>RSA</strong>、<strong>ECDSA</strong>算法的公钥/私钥对JWT进行<strong>签名</strong>。</p>
<p>简单来说，JWT定义了一种结构标准，其使用JSON的表达方式，通过编码为一段字符串来传递令牌信息。</p>
<h3 id="2-什么时候使用jwt"><a class="markdownIt-Anchor" href="#2-什么时候使用jwt"></a> 2、什么时候使用JWT</h3>
<ul>
<li><strong>授权</strong>：这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项特点，因为它的开销很小并且可以在不同的域中轻松使用。</li>
<li><strong>信息交换</strong>：JWT是在各方之间安全传输信息的好方法。因为可以对JWT进行签名（例如：使用公钥/私钥对），所以您可以确保发送者就是他们所说的那样。此外，由于签名是使用标头和有效负载计算的，因此还可以验证内容是否遭到篡改。</li>
</ul>
<h2 id="二-jwt的结构"><a class="markdownIt-Anchor" href="#二-jwt的结构"></a> 二、JWT的结构</h2>
<p>通过上面的介绍，也许你还无法完全理解JWT是什么，那么下面从JWT的结构来认识它。JWT结构是紧凑的，它由<code>.</code>分为三部分：</p>
<ul>
<li>标头（Header）</li>
<li>有效负载（Payload）</li>
<li>签名（Signature）</li>
</ul>
<p>类似下面这样（内容已被编码，以<code>.</code>分割没有换行符，仅展示用）</p>
<p><img src="https://cdn.auth0.com/content/jwt/encoded-jwt3.png" alt="JWT structure" /></p>
<h3 id="1-标头"><a class="markdownIt-Anchor" href="#1-标头"></a> 1、标头</h3>
<p>标头通常由两部分组成：令牌的类型（即JWT）和使用的签名算法，如HMAC SHA256或RSA。例如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后，这个JSON被<a href="#4%E3%80%81Base64Url%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Base64Url</a>编码，作为JWT的第一部分。</p>
<h3 id="2-有效负载"><a class="markdownIt-Anchor" href="#2-有效负载"></a> 2、有效负载</h3>
<p>这一部分包含声明（claims）。声明是有关实体（通常是用户）和其他数据的声明，其有以下三种类型：已注册的（官方定义），公共声明和私有声明。</p>
<p>下面是JWT定义的7个官方字段，这是一组预定义的、推荐的非强制性的字段，以提供一组实用的、可互操作的声明。</p>
<ul>
<li>iss (issuer)：签发人</li>
<li>exp (expiration time)：过期时间</li>
<li>sub (subject)：主题</li>
<li>aud (audience)：受众（JWT的接受者）</li>
<li>nbf (Not Before)：生效时间</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
<blockquote>
<p>因为JWT紧凑的设计原则，所以字段名称简写为仅三个字母</p>
</blockquote>
<p>除了上面7个官方已注册的字段声明，还有一些公共的，参考<a href="https://www.iana.org/assignments/jwt/jwt.xhtml">IANA JSON Web Token注册表</a>。</p>
<p>除此以外，为了在使用JWT的各方之间共享信息而创建的，可以使用自定义字段的私有声明，这些声明既不是已注册的，也不是公共的。</p>
<p>可能的示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后同样被<a href="#4%E3%80%81Base64Url%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">Base64Url</a>编码，作为JWT的第二部分</p>
<h3 id="3-签名"><a class="markdownIt-Anchor" href="#3-签名"></a> 3、签名</h3>
<p>签名用于验证消息在此过程中没有被更改，并且对于使用私钥进行签名的令牌，它还可以验证JWT的发送者的身份是真实的。</p>
<p>这一部分使用在<a href="#1%E3%80%81%E6%A0%87%E5%A4%B4">标头</a>指定的签名算法（默认是 HMAC SHA256），以及指定的密钥（secret）通过以下方式创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>注意：这里的<code>.</code>不是生成后的token里的<code>.</code>，而是用于校验签名解码时分割<code>header</code>和<code>payload</code>的。</p>
<p>因为JWT使用的编码算法是可解码的。所以<strong>不要把敏感信息储存在JWT中</strong>（如密码）</p>
<h3 id="4-base64url"><a class="markdownIt-Anchor" href="#4-base64url"></a> 4、Base64Url</h3>
<blockquote>
<p>JWT 作为一个令牌（token），有些场合可能会放到 URL 的参数中。原Base64编码有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义不能直接使用，所以要稍作修改：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p>
</blockquote>
<h2 id="三-java-jwt"><a class="markdownIt-Anchor" href="#三-java-jwt"></a> 三、Java-JWT</h2>
<p>因为JWT设计的特性，所以可以通过各种编程语言来实现<a href="https://jwt.io/#libraries-io">用于令牌签名/验证的库</a>在不同的编程语言中使用JWT。</p>
<p>这一节将介绍由java语言实现的JWT库：<a href="https://github.com/auth0/java-jwt">java-jwt</a></p>
<h3 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1、安装</h3>
<p>新建一个普通的maven项目，不选择原型，导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-创建并签署令牌"><a class="markdownIt-Anchor" href="#2-创建并签署令牌"></a> 2、创建并签署令牌</h3>
<p>先定义两个常量，分别是使用的算法类型（包含密钥）和签发人，便于后面验证时也能使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Algorithm</span> <span class="variable">ALGORITHM</span> <span class="operator">=</span> Algorithm.HMAC256(<span class="string">&quot;secret&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ISSUER</span> <span class="operator">=</span> <span class="string">&quot;system&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>通过<code>JWT.create()</code>静态方法来创建JWT构建对象，使用withXXX可链式调用的方法来添加字段，最后调用<code>sign(ALGORITHM)</code>创建一个给定算法的JWT字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		token = JWT.create()</span><br><span class="line">				.withIssuer(ISSUER)</span><br><span class="line">				.withIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">				.withNotBefore(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">				.withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">60000</span>))</span><br><span class="line">				.withSubject(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">				.withClaim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">				.sign(ALGORITHM);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (JWTCreationException e)&#123;</span><br><span class="line">		System.err.println(<span class="string">&quot;Invalid Signing configuration / Couldn&#x27;t convert Claims.&quot;</span>);</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-验证令牌"><a class="markdownIt-Anchor" href="#3-验证令牌"></a> 3、验证令牌</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verifyToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(ALGORITHM)</span><br><span class="line">				.withIssuer(ISSUER)</span><br><span class="line">				.build(); <span class="comment">//Reusable verifier instance</span></span><br><span class="line"></span><br><span class="line">		verifier.verify(token);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (JWTVerificationException e)&#123;</span><br><span class="line">		System.err.println(<span class="string">&quot;Invalid signature/claims&quot;</span>);</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用之前定义的两个常量，这里可以创建一个可重用的验证实例。然后调用<code>verify()</code>方法执行验证，无需返回值，验证失败时会抛出异常</p>
<h3 id="4-解码获取令牌信息"><a class="markdownIt-Anchor" href="#4-解码获取令牌信息"></a> 4、解码获取令牌信息</h3>
<p>使用<code>JWT.decode()</code>方法获取<code>DecodedJWT</code>对象即可，没有定义的字段会返回<code>null</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printJwtInfo</span><span class="params">(String token)</span>&#123;</span><br><span class="line">	<span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">&quot;Header\t\t-&gt; &quot;</span> + jwt.getHeader());</span><br><span class="line">	System.out.println(<span class="string">&quot;Payload\t\t-&gt; &quot;</span> + jwt.getPayload());</span><br><span class="line">	System.out.println(<span class="string">&quot;Signature\t-&gt; &quot;</span> + jwt.getSignature());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Header</span></span><br><span class="line">	System.out.println(jwt.getAlgorithm());</span><br><span class="line">	System.out.println(jwt.getType());</span><br><span class="line">	System.out.println(jwt.getContentType());</span><br><span class="line">	System.out.println(jwt.getKeyId());</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Payload</span></span><br><span class="line">	System.out.println(jwt.getIssuer());</span><br><span class="line">	System.out.println(jwt.getSubject());</span><br><span class="line">	System.out.println(jwt.getAudience());</span><br><span class="line">	System.out.println(SimpleDateFormat.getDateTimeInstance().format(jwt.getExpiresAt()));</span><br><span class="line">	System.out.println(SimpleDateFormat.getDateTimeInstance().format(jwt.getNotBefore()));</span><br><span class="line">	System.out.println(SimpleDateFormat.getDateTimeInstance().format(jwt.getIssuedAt()));</span><br><span class="line">	System.out.println(jwt.getId());</span><br><span class="line">	<span class="comment">// Private claims</span></span><br><span class="line">	System.out.println(jwt.getClaim(<span class="string">&quot;username&quot;</span>).asString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-运行测试"><a class="markdownIt-Anchor" href="#5-运行测试"></a> 5、运行测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getToken();</span><br><span class="line">    verifyToken(token);</span><br><span class="line">    printJwtInfo(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20200924193627631.png" alt="image-20200924193627631" /></p>
<p>参考链接：</p>
<ul>
<li><a href="https://jwt.io/">JWT官网</a> —— Auth0</li>
<li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程</a> —— 阮一峰</li>
<li><a href="https://andaily.com/blog/?p=956">各类JWT库(java)的使用与评价</a>(2018-06-02) —— andaily</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jwt</tag>
        <tag>json</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记（上）</title>
    <url>/linux-learn-part1/</url>
    <content><![CDATA[<h2 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h2>
<blockquote>
<p>Linux，全称GNU/Linux，是一套免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年第一次释出，它主要受到Minix和Unix思想的启发，是一个基于POSIX和Unix的<strong>多用户</strong>、<strong>多任务</strong>、支持<strong>多线程</strong>和<strong>多CPU</strong>的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix<strong>以网络为核心</strong>的设计思想，是一个性能稳定的<strong>多用户网络操作系统</strong>。</p>
</blockquote>
<span id="more"></span>
<p>Linux也是<code>Linux is not Unix</code>的递归缩写。</p>
<p>本文基于Linux的发行版之一：CentOS来介绍，所以先了解下什么是Linux的发行版</p>
<h3 id="1-linux发行版"><a class="markdownIt-Anchor" href="#1-linux发行版"></a> 1、Linux发行版</h3>
<blockquote>
<p>Linux 主要作为Linux发行版（distro）的一部分而使用。这些发行版由个人，松散组织的团队，以及商业机构和志愿者组织编写。它们通常包括了其他的系统软件和应用软件，以及一个用来简化系统初始安装的安装工具，和让软件安装升级的集成管理器。大多数系统还包括了像提供GUI界面的XFree86之类的曾经运行于BSD的程序。 一个典型的Linux发行版包括：Linux内核，一些GNU程序库和工具，命令行shell，图形界面的X Window系统和相应的桌面环境，如KDE或GNOME，并包含数千种从办公套件，编译器，文本编辑器到科学工具的应用软件。</p>
</blockquote>
<p>简单来说发行版就是把Linux内核与一些应用软件做的一个打包集合</p>
<p><img src="1511849829609658.jpg" alt="" /></p>
<blockquote>
<p>Linux有上百种不同的发行版，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat Enterprise Linux、SUSE、oracle linux等。</p>
</blockquote>
<p><img src="3197843091.jpg" alt="" /></p>
<h3 id="2-centos"><a class="markdownIt-Anchor" href="#2-centos"></a> 2、CentOS</h3>
<blockquote>
<p>CentOS（Community Enterprise Operating System，社区企业操作系统）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS完全开源。</p>
</blockquote>
<h2 id="二-安装"><a class="markdownIt-Anchor" href="#二-安装"></a> 二、安装</h2>
<p>因为Linux是操作系统，我们很难抛弃个人电脑原来使用的Windows系统而去重装一个不熟悉的Linux系统，而装双系统操作较繁琐，所以可选方案是将Linux装进虚拟机或者是直接购买云服务器（推荐，更接近实际工作场景）</p>
<h3 id="1-虚拟机"><a class="markdownIt-Anchor" href="#1-虚拟机"></a> 1、虚拟机</h3>
<h4 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h4>
<p>虚拟机：使用的是VMware14Pro，如何下载安装自行了解，这里不另行说明</p>
<p>CentOS：在<a href="https://www.centos.org/download/">官网下载</a>或者是使用<a href="https://developer.aliyun.com/mirror/centos">阿里云的镜像站</a>，这里使用的是版本7，路径在<code>/centos/7.8.2003/isos/x86_64/</code>，各iso文件的区别在<code>0_README.txt</code>文件里有说明，点击<code>CentOS-7-x86_64-DVD-2003.iso</code>下载</p>
<h4 id="详细安装步骤"><a class="markdownIt-Anchor" href="#详细安装步骤"></a> 详细安装步骤</h4>
<p><img src="image-20200704175752098.png" alt="image-20200704175752098" /></p>
<p><img src="image-20200704175806688.png" alt="image-20200704175806688" /></p>
<p>选择下载好的iso文件</p>
<p><img src="image-20200704175918620.png" alt="image-20200704175918620" /></p>
<p>选择安装位置</p>
<p><img src="image-20200704180039490.png" alt="image-20200704180039490" /></p>
<p>1核1G即可</p>
<p><img src="image-20200704180100845.png" alt="image-20200704180100845" /></p>
<p><img src="image-20200704180121953.png" alt="image-20200704180121953" /></p>
<p>选择网络类型</p>
<p><img src="image-20200704180151612.png" alt="image-20200704180151612" /></p>
<p>默认推荐的即可</p>
<p><img src="image-20200704180231145.png" alt="image-20200704180231145" /></p>
<p><img src="image-20200704180241883.png" alt="image-20200704180241883" /></p>
<p><img src="image-20200704180306754.png" alt="image-20200704180306754" /></p>
<p>安装完后实际占用空间大概1.6G，这里决定的是磁盘最大空间。不经常移动虚拟机文件可以选择存储为单个文件</p>
<p><img src="image-20200704180358585.png" alt="image-20200704180358585" /></p>
<p>选择自定义硬件，把CPU虚拟化引擎的第一项打开</p>
<p><img src="image-20200704180656187.png" alt="image-20200704180656187" /></p>
<p><img src="image-20200704180735179.png" alt="image-20200704180735179" /></p>
<p>最后点击完成，自动启动虚拟机，使用方向键选择第一项按回车开始安装</p>
<p><img src="image-20200704180901840.png" alt="image-20200704180901840" /></p>
<p>进入初始化界面，鼠标拉到最下方选择中文，点击继续</p>
<p><img src="image-20200704181229093.png" alt="image-20200704181229093" /></p>
<p>点<strong>安装位置</strong>，其它都不用动，默认自动分区即可，左上角点击完成</p>
<p><img src="image-20200704181426905.png" alt="image-20200704181426905" /></p>
<p>然后选择<strong>网络和主机名</strong>，打开网络连接，可以选择设置主机名</p>
<p><img src="image-20200704181656266.png" alt="image-20200704181656266" /></p>
<p>然后开始安装，此时可以设置root账号的密码，如果设置简单的密码需要点两次完成来确认。</p>
<p>最后点击完成配置，补充配置完成后点击重启，自动重启虚拟机</p>
<p><img src="image-20200704181928071.png" alt="image-20200704181928071" /></p>
<h4 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h4>
<p>此时进入命令行操作界面，输入管理员账号<code>root</code>和之前设置的密码来登录。<strong>输入密码时不会显示字符</strong></p>
<p><img src="image-20200704182950392.png" alt="image-20200704182950392" /></p>
<h3 id="2-云服务器"><a class="markdownIt-Anchor" href="#2-云服务器"></a> 2、云服务器</h3>
<h4 id="购买"><a class="markdownIt-Anchor" href="#购买"></a> 购买</h4>
<p>国内云服务器大厂：<a href="https://cloud.tencent.com/">腾讯云</a>和<a href="https://www.aliyun.com/">阿里云</a>。可以在最新活动里看到比较优惠的套装</p>
<p>个人使用的，目前比较推荐腾讯云</p>
<p><img src="image-20200704221034338.png" alt="image-20200704221034338" /></p>
<p>购买后会给你注册时的邮箱发送通知邮件，里面有初始密码和ip信息</p>
<p><img src="image-20200704222000888.png" alt="image-20200704222000888" /></p>
<p>可以在腾讯云的控制台→云服务器→实例里修改密码，同时也会发送通知邮件</p>
<p><img src="image-20200704222255499.png" alt="image-20200704222255499" /></p>
<h4 id="安全组"><a class="markdownIt-Anchor" href="#安全组"></a> 安全组</h4>
<blockquote>
<p>安全组是一种虚拟防火墙，具备有状态的数据包过滤功能，用于设置云服务器、负载均衡、云数据库等实例的网络访问控制，控制实例级别的出入流量，是重要的网络安全隔离手段。<br />
您可以通过配置安全组规则，允许或禁止安全组内的实例的出流量和入流量。</p>
</blockquote>
<p>需要注意的是：默认的安全组</p>
<ul>
<li>入站规则放行所有IPv4地址（<code>0.0.0.0/0</code>）的所有端口，禁止所有IPv6地址（<code>::/0</code>）的所有端口</li>
<li>出站规则放行所有IPv4地址（<code>0.0.0.0/0</code>）、所有IPv6地址（<code>::/0</code>）的所有端口</li>
</ul>
<p>同时安全组的优先级是从上到下</p>
<p><s>不怕被攻击的话默认的安全组设置就行了</s></p>
<p>具体介绍在<a href="https://cloud.tencent.com/document/product/213/12446">安全组帮助文档</a>都有说明，不同供应商的设置都是大同小异的</p>
<h3 id="3-远程登录"><a class="markdownIt-Anchor" href="#3-远程登录"></a> 3、远程登录</h3>
<p>本地虚拟机的命令行操作多有不便，而云服务器又不可能去实地操作，所以就需要使用SSH来进行远程登录</p>
<blockquote>
<p>SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。</p>
</blockquote>
<p>在Windows系统上，这里使用的是Xshell。设置好登录之后会话界面如下</p>
<p><img src="image-20200704231827351.png" alt="image-20200704231827351" /></p>
<p>登录后，光标闪烁前默认的字符类似这样<code>[root@VM-0-7-centos ~]#</code></p>
<p>其中@符号前表示当前登录的用户名，后面表示主机名，空格后面是当前的位置，<code>~</code>表示用户目录，对于root用户来说是<code>/root</code>，相当于Windows系统的<code>C:\Users\Administrator</code>。<code>#</code>是命令提示符，非root用户是<code>$</code></p>
<h2 id="三-基本目录结构"><a class="markdownIt-Anchor" href="#三-基本目录结构"></a> 三、基本目录结构</h2>
<p>Linux是基于文件的操作系统，万物皆文件（<code>Anything Is File</code>）。它的根目录用<code>/</code>表示，使用<code>ls /</code>命令查看根目录下的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-7-centos ~]<span class="comment"># ls /</span></span><br><span class="line">bin   data  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  dev   home  lib64  media       opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>
<p>一些主要目录的说明</p>
<p><img src="u=623782861,4176840120&amp;fm=26&amp;gp=0.jpg" alt="img" /></p>
<p>其它目录：</p>
<ul>
<li><strong>/data</strong>：通常用来存放数据</li>
<li><strong>/lost+found</strong>：一般情况下是空的，当系统非正常情况关机后，这里就存放了一些文件。</li>
<li><strong>/proc</strong>：一个虚拟的目录，它是系统内存的映射，可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里</li>
<li><strong>/run</strong>：一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</li>
<li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li>
<li><strong>/media</strong>：自动识别的设备挂载目录，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li>
<li><strong>/opt</strong>：额外安装软件所存放的目录</li>
<li><strong>/sys</strong>：sysfs文件系统，可以理解成硬件设备的驱动程序信息</li>
</ul>
<h2 id="四-文件与目录相关命令"><a class="markdownIt-Anchor" href="#四-文件与目录相关命令"></a> 四、文件与目录相关命令</h2>
<h3 id="1-改变切换目录"><a class="markdownIt-Anchor" href="#1-改变切换目录"></a> 1、改变（切换）目录</h3>
<ul>
<li>
<p>cd：（Change Directory）目录名可以使用绝对路径（在linux中以<code>/</code>开头）或相对路径，当前目录<code>.</code>上级目录<code>..</code>用户目录<code>~</code></p>
<blockquote>
<p>cd    进入用户主目录；<br />
cd ~  进入用户主目录；<br />
cd -  返回进入此目录之前所在的目录；<br />
cd …  返回上级目录（若当前目录为“/“，则执行完后还在“/&quot;）；<br />
cd …/…  返回上两级目录；<br />
cd !$  把上个命令的参数作为cd参数使用。</p>
</blockquote>
</li>
</ul>
<h3 id="2-列出目录内容"><a class="markdownIt-Anchor" href="#2-列出目录内容"></a> 2、列出目录内容</h3>
<ul>
<li>
<p>ls：（list）用来显示目标列表，在Linux中是使用率较高的命令。它的输出信息可以进行彩色加亮显示，以区分不同类型的文件（夹）</p>
<p>一些选项：</p>
<blockquote>
<p>-a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为隐藏，不会列出）；<br />
-A：显示除隐藏文件“.”和“…”以外的所有文件列表；<br />
-C：多列显示输出结果。这是默认选项；<br />
-d：仅显示目录名，而不显示目录下的内容列表。显示符号链接文件本身，而不显示其所指向的目录列表；<br />
-k：以KB（千字节）为单位显示文件大小；<br />
-l：以长格式显示目录下的内容列表。（详细信息）<br />
-m：用“,”号区隔每个文件和目录的名称；<br />
-r：以文件名反序排列并输出目录内容列表；<br />
-s：显示文件和目录的大小，以区块为单位；<br />
-t：用文件和目录的更改时间排序；<br />
-L：如果遇到性质为符号链接的文件或目录，直接列出该链接所指向的原始文件或目录；<br />
-R：递归处理，将指定目录下的所有文件及子目录一并处理；<br />
–full-time：列出完整的日期与时间；</p>
</blockquote>
</li>
</ul>
<h3 id="3-显示当前目录"><a class="markdownIt-Anchor" href="#3-显示当前目录"></a> 3、显示当前目录</h3>
<ul>
<li>pwd：（Print working directory）以绝对路径的方式显示用户当前工作目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-7-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>
<h3 id="4-创建目录"><a class="markdownIt-Anchor" href="#4-创建目录"></a> 4、创建目录</h3>
<ul>
<li>
<p>mkdir：（Make directory）用来创建目录。如果在目录名的前面没有加任何路径名，则在当前目录下创建指定的目录；如果给出了一个已经存在的路径，将会在该目录下创建一个指定的目录。在创建目录时，应保证新建的目录与它所在目录下的文件没有重名。</p>
<blockquote>
<p>-p或–parents 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录</p>
</blockquote>
</li>
</ul>
<h3 id="5-删除目录"><a class="markdownIt-Anchor" href="#5-删除目录"></a> 5 、删除目录</h3>
<ul>
<li>
<p>rmdir：（Remove directory）用来删除空目录，可以从一个目录中删除一个或多个空的子目录</p>
<blockquote>
<p>-p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除</p>
</blockquote>
</li>
</ul>
<h3 id="6-复制"><a class="markdownIt-Anchor" href="#6-复制"></a> 6、复制</h3>
<ul>
<li>
<p>cp：（Copy）用来将一个或多个源文件或者目录复制到指定的目的文件或目录。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。cp命令还支持同时复制多个文件，当一次复制多个文件时，目标文件参数必须是一个已经存在的目录，否则将出现错误。</p>
<p>选项：</p>
<blockquote>
<p>-f：强行复制文件或目录，不论目标文件或目录是否已存在</p>
<p>-i：覆盖既有文件之前先询问用户</p>
<p>-R或-r：递归处理，将指定目录下的所有文件与子目录一并处理</p>
</blockquote>
</li>
</ul>
<h3 id="7-删除"><a class="markdownIt-Anchor" href="#7-删除"></a> 7、删除</h3>
<ul>
<li>
<p>rm：（Remove）删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉</p>
<p>选项：</p>
<blockquote>
<p>-f：强制删除文件或目录<br />
-i：删除已有文件或目录之前先询问用户<br />
-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理</p>
</blockquote>
</li>
</ul>
<p>Linux的rm命令没有Windows回收站那样的机制，所以使用时需要十分小心</p>
<blockquote>
<p>注意：使用rm命令要格外小心。<strong>因为一旦删除了一个文件，就无法再恢复它</strong>。所以，在删除文件之前，最好再看一下文件的内容，确定是否真要删除。rm命令可以用-i选项，这个选项在使用文件扩展名字符删除多个文件时特别有用。使用这个选项，系统会要求你逐一确定是否要删除。这时，必须输入y并按Enter键，才能删除文件。如果仅按Enter键或其他字符，文件不会被删除。</p>
</blockquote>
<p><s><code>rm -rf /*</code>删库跑路</s></p>
<h3 id="8-移动和重命名"><a class="markdownIt-Anchor" href="#8-移动和重命名"></a> 8、移动和重命名</h3>
<ul>
<li>
<p>mv：（Move）用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中</p>
<p>选项：</p>
<blockquote>
<p>-b：当文件存在时，覆盖前，为其创建一个备份<br />
-f：若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录；<br />
-i：交互式操作，覆盖前先行询问用户，如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入”y”，表示将覆盖目标文件；输入”n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。<br />
-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</p>
</blockquote>
</li>
</ul>
<h2 id="五-文件属性与权限管理"><a class="markdownIt-Anchor" href="#五-文件属性与权限管理"></a> 五、文件属性与权限管理</h2>
<h3 id="1-基本属性"><a class="markdownIt-Anchor" href="#1-基本属性"></a> 1、基本属性</h3>
<blockquote>
<p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
</blockquote>
<p>使用<code>ls -l</code>或<code>ll</code>命令来查看当前目录下的详细信息。列的类型依次是：</p>
<p>基本属性、文件硬链接数（包含的文件数量）、从属用户、从属组、文件所占用的空间(以字节为单位)、文件（目录）最近访问（修改）时间、文件名（如果是符号链接，那么会用<code>-&gt;</code>指向实际的文件路径，类似Windows的快捷方式）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-0-7-centos /]<span class="comment"># ls -l</span></span><br><span class="line">total 72</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Mar  7  2019 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Jul  5 01:27 boot</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>第一列的属性有10个字符长度，分为了4个区域</p>
<p><img src="363003_1227493859FdXT.png" alt="img" /></p>
<p>第一个字符有下面几类</p>
<ul>
<li>[ <strong>d</strong> ]表示目录</li>
<li>[ <strong>-</strong> ]表示文件；</li>
<li>[ <strong>l</strong> ]表示链接文档(link file)；</li>
<li>[ <strong>b</strong> ]表示设备文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>[ <strong>c</strong> ]表示设备文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>后面字符以三个为一组，且均为<code>rwx</code>三个参数的组合。[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)，减号[ - ]表示没有相应权限。 要注意的是，这三个权限的位置不会改变。</p>
<h3 id="2-文件从属"><a class="markdownIt-Anchor" href="#2-文件从属"></a> 2、文件从属</h3>
<blockquote>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。<br />
同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。<br />
文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。<br />
因此，Linux系统按文件所有者(属主)、文件所有者同组用户（属组）和其他用户来规定了不同的文件访问权限。<br />
对于 root 用户来说，一般情况下，文件的权限对其不起作用（最高权限者可以修改权限）。</p>
</blockquote>
<p>以下三个命令通用的选项：-R或–recursive：递归处理，将指令目录下的所有文件及子目录一并处理</p>
<h4 id="21-改变属组"><a class="markdownIt-Anchor" href="#21-改变属组"></a> 2.1 改变属组</h4>
<ul>
<li>chgrp：（Change group）该命令用来改变指定文件所属的用户组。如果用户不是该文件的文件主或超级用户(root)，则不能改变该文件的组。</li>
</ul>
<h4 id="22-改变属主"><a class="markdownIt-Anchor" href="#22-改变属主"></a> 2.2 改变属主</h4>
<ul>
<li>chown：（Change owner）改变某个文件或目录的所有者和所属的组，只有文件主和超级用户才可以便用该命令。</li>
</ul>
<h3 id="3-权限更改"><a class="markdownIt-Anchor" href="#3-权限更改"></a> 3、权限更改</h3>
<ul>
<li>chmod（Change mode）变更文件或目录的权限</li>
</ul>
<blockquote>
<p>在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用chmod指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。</p>
</blockquote>
<p>权限范围的表示法如下：</p>
<p><code>u</code> User，文件或目录的拥有者；<br />
<code>g</code> Group，文件或目录的所属群组；<br />
<code>o</code> Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；<br />
<code>a</code> All，全部的用户，包含拥有者，所属群组以及其他用户；<br />
<code>r</code> 读取权限，数字代号为“4”;<br />
<code>w</code> 写入权限，数字代号为“2”；<br />
<code>x</code> 执行或切换权限，数字代号为“1”；<br />
<code>-</code> 不具任何权限，数字代号为“0”；<br />
<code>s</code> 特殊功能说明：变更文件或目录的权限。</p>
<p>常用数字代号表示，每种身份(owner/group/others)各自的三个权限(r/w/x)分数是累加的，例如当权限为： [-rwxrwx—] 时分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<h2 id="六-查看文件内容"><a class="markdownIt-Anchor" href="#六-查看文件内容"></a> 六、查看文件内容</h2>
<ul>
<li>
<p>cat：（concatenate）按从上到下的循序显示全部文件内容，本意是连接文件并打印到标准输出设备上</p>
<p>使用例子：</p>
<blockquote>
<p>cat m1 （在屏幕上显示文件ml的内容）<br />
cat m1 m2 （同时显示文件ml和m2的内容）<br />
cat m1 m2 &gt; file （将文件ml和m2合并后放入文件file中）</p>
</blockquote>
</li>
<li>
<p>tac：和cat相反的循序显示</p>
</li>
<li>
<p>nl：（Number of Lines） 显示的时候输出行号</p>
</li>
<li>
<p>more ：以全屏幕的方式按页显示文本文件的内容。more命令中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）</p>
</li>
<li>
<p>less：与 more 类似，不同的是less命令可以向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。按Q键退出less程序。</p>
</li>
<li>
<p>head：用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。可以使用选项-n&lt;数字&gt;来指定显示头部内容的行数或-c&lt;字符数&gt;指定显示头部内容的字符数</p>
</li>
<li>
<p>tail：和head类似，用于显示文件的尾部内容，默认也是10行</p>
</li>
</ul>
<h2 id="七-文件链接"><a class="markdownIt-Anchor" href="#七-文件链接"></a> 七、文件链接</h2>
<p>Linux具有为一个文件起多个名字的功能，称为链接。被链接的文件可以存放在相同的目录下，但是必须有不同的文件名，而不用在硬盘上为同样的数据重复备份。另外，被链接的文件也可以有相同的文件名，但是存放在不同的目录下，这样只要对一个目录下的该文件进行修改，就可以完成对所有目录下同名链接文件的修改。对于某个文件的各链接文件，我们可以给它们指定不同的存取权限，以控制对信息的共享和增强安全性。</p>
<blockquote>
<p>Linux 的文件链接分为两种，一种是硬链接（Hard Link），另一种是符号链接（Symbolic Link），也叫软链接</p>
</blockquote>
<p><img src="ln.jpg" alt="img" /></p>
<h3 id="1-硬链接"><a class="markdownIt-Anchor" href="#1-硬链接"></a> 1、硬链接</h3>
<p>建立硬链接时，在另外的目录或本目录中增加目标文件的一个目录项，这样，一个文件就登记在多个目录中。如上图所示的m2.c文件就在目录mub1和liu中都建立了目录项。</p>
<p>创建硬链接后，己经存在的文件的I节点号（Inode）会被多个目录文件项使用。一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的链接数为l。</p>
<p>硬链接有如下限制：</p>
<ul>
<li>不能对目录文件做硬链接。</li>
<li>不能在不同的文件系统之间做硬链接。就是说，链接文件和被链接文件必须位于同一个文件系统中。</li>
</ul>
<h3 id="2-符号链接"><a class="markdownIt-Anchor" href="#2-符号链接"></a> 2、符号链接</h3>
<p>符号链接也称为软链接，是将一个路径名链接到一个文件。这些文件是一种特别类型的文件。事实上，它只是一个文本文件（如图中的abc文件），其中包含它提供链接的另一个文件的路径名，如图中虚线箭头所示。另一个文件是实际包含所有数据的文件。所有读、写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。</p>
<blockquote>
<p>符号链接的机制基本上类似于Windows的快捷方式</p>
</blockquote>
<p>与硬链接不同的是，符号链接确实是一个新文件，当然它具有不同的I节点号；而硬链接并没有建立新文件。</p>
<p>符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。</p>
<p>符号链接保持了链接与源文件或目录之间的区别：</p>
<ul>
<li>删除源文件或目录，只删除了数据，不会删除链接。一旦以同样文件名创建了源文件，链接将继续指向该文件的新数据。</li>
<li>在目录长列表中，符号链接作为一种特殊的文件类型显示出来，其第一个字母是l。</li>
<li>符号链接的大小是其链接文件的路径名中的字节数。</li>
</ul>
<h3 id="3-创建文件链接"><a class="markdownIt-Anchor" href="#3-创建文件链接"></a> 3、创建文件链接</h3>
<p>使用命令<code>ln</code>（link）创建文件链接，默认的连接类型是硬连接。如果要创建符号连接需要使用<code>-s</code>（soft）选项。</p>
<p><code>ln</code>命令会增加链接数，<code>rm</code>命令会减少链接数。一个文件除非链接数为0，否则不会从文件系统中被物理地删除。</p>
<p>用<code>ln -s</code>命令建立符号链接时，源文件最好用绝对路径名。这样可以在任何工作目录下进行符号链接。而当源文件用相对路径时，如果当前的工作路径与要创建的符号链接文件所在路径不同，就不能进行链接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># touch f1</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">f1</span><br><span class="line">[root@localhost home]<span class="comment"># ln f1 f2</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">f1  f2</span><br><span class="line">[root@localhost home]<span class="comment"># ln -s f1 f3</span></span><br><span class="line">[root@localhost home]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--. 2 root root 0 7月   5 23:37 f1</span><br><span class="line">-rw-r--r--. 2 root root 0 7月   5 23:37 f2</span><br><span class="line">lrwxrwxrwx. 1 root root 2 7月   5 23:38 f3 -&gt; f1</span><br></pre></td></tr></table></figure>
<p>使用<code>ls -l</code>或<code>ll</code>命令时，可以看到符号链接名后有一个箭头指向源文件或目录</p>
<h2 id="八-vim编辑器"><a class="markdownIt-Anchor" href="#八-vim编辑器"></a> 八、Vim编辑器</h2>
<h3 id="1-介绍"><a class="markdownIt-Anchor" href="#1-介绍"></a> 1、介绍</h3>
<p>学Linux就不得不提到vim，而vim又来自于vi</p>
<blockquote>
<p>Vi编辑器是所有Unix及Linux系统下标准的编辑器，由美国加州大学伯克利分校的Bill Joy所创立。对Unix及Linux系统的任何版本，vi编辑器是完全相同的。Vi也是Linux中最基本的文本编辑器，学会它后，您将在Linux的世界里畅行无阻。</p>
<p>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。Vim普遍被推崇为类Vi编辑器中最好的一个。</p>
</blockquote>
<p><a href="https://www.vim.org/">官网</a>简介：</p>
<blockquote>
<p>Vim是一个高度可配置的文本编辑器，它可以使创建和更改任何类型的文本变得非常高效。在大多数UNIX系统和Apple OS X中，它都是作为&quot;vi&quot;被包含在内的。</p>
<p>Vim是坚固稳定的，并且正在不断发展，以变得更好。其特点包括：</p>
<ul>
<li>持久的多级撤消树</li>
<li>扩展插件系统</li>
<li>支持数百种编程语言和文件格式</li>
<li>强大的搜索和替换</li>
<li>与多种工具集成</li>
</ul>
</blockquote>
<p>类比Windows的话，vi相当于记事本，而vim则相当于notepad++</p>
<h3 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2、使用</h3>
<p>输入命令<code>vim 文件名</code>，当文件名存在时打开文件，不存在时则创建并打开，可以使用绝对路径或相对路径表达式</p>
<p>打开后，便进入了命令模式（一般模式），像下面这样，光标会在第一行，<code>~</code>表示此行没有任何内容（包括换行符），左下角是文件名，此时还不能编辑文件，任何操作都会被视为命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;test.txt&quot;</span> [New File]                                                                  0,0-1         All</span><br></pre></td></tr></table></figure>
<p>vi/vim的操作中常用的有三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的工作流程如下：</p>
<p><img src="vim-vi-workmodel.png" alt="img" /></p>
<p>模式切换：</p>
<ul>
<li>创建或者打开后便进入了命令模式，按下<code>i</code>、<code>a</code>、<code>o</code>键(大小写均可)进入输入模式，常用<code>i</code></li>
<li>输入模式下按<code>ESC</code>键回到命令模式</li>
<li>命令模式下输入冒号<code>:</code>进入底线命令模式，退格键删除冒号回到命令模式，或者输入命令回车执行</li>
</ul>
<p>底线命令模式可以视作对命令模式功能的扩展</p>
<h3 id="3-命令模式"><a class="markdownIt-Anchor" href="#3-命令模式"></a> 3、命令模式</h3>
<p>命令模式下一些常用的操作</p>
<ul>
<li>按下<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>键分别可以使光标向左、下、上、右移动，当然也可以使用方向键，这样的设计意图是为了在编辑文件同时切换位置时，减少手移动的距离，提高操作效率（<s>Windows使用鼠标操作移动距离最大</s>）</li>
<li><code>w</code>跳到下个单词的开头</li>
<li><code>e</code>跳到下个单词的最后</li>
<li><code>b</code>跳到前一个单词的开头</li>
<li><code>ctrl</code>+<code>b</code>向上移动一页，等同于<code>Page Up</code>；<code>ctrl</code>+<code>f</code>向下移动一页，等同于<code>Page Down</code></li>
<li>输入数字并按下回车，向下移动数字相应的行数</li>
<li><code>/word</code>从光标位置往下查找名为word的字符串；<code>?word</code>往上查找</li>
<li><code>x</code>从光标位置向后删除一个字符，<code>X</code>（大写）向前删除</li>
<li><code>dd</code>删除光标位置的一整行内容</li>
<li><code>yy</code>复制光标位置的一整行内容</li>
<li><code>u</code>撤销，<code>ctrl</code>+<code>r</code>重做（分别相当于Windows的ctrl+z和ctrl+y）</li>
<li><code>ZZ</code>（大写）若文件没有改变，则不储存离开，若文件已经被改变，则储存后离开</li>
</ul>
<h3 id="4-输入模式"><a class="markdownIt-Anchor" href="#4-输入模式"></a> 4、输入模式</h3>
<p>按下<code>i</code>或<code>insert</code>键进入输入模式后，左下角会有个INSERT字样的提示，说明当前是输入模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">-- INSERT --                                                                           0,1           All</span><br></pre></td></tr></table></figure>
<p>输入模式下可以使用一切常规的操作，键盘上的字符即输入字符，命令即执行命令</p>
<h3 id="5-底线命令模式"><a class="markdownIt-Anchor" href="#5-底线命令模式"></a> 5、底线命令模式</h3>
<p>底线命令模式可以使用一些额外的命令，比如保存文件、退出vim</p>
<ul>
<li><code>:q</code>退出编辑器</li>
<li><code>:w</code>将编辑的数据写入硬盘</li>
<li><code>:wq</code>结合上面的功能，保存并退出</li>
<li>在上面的命令后加<code>!</code>可以强制执行，特别的是，强制写入与当前用户对文件的权限有关</li>
<li><code>:set nu</code>在每一行的前面显示该行的行号，<code>:set nonu</code>取消行号显示</li>
</ul>
<h2 id="九-扩展资料"><a class="markdownIt-Anchor" href="#九-扩展资料"></a> 九、扩展资料</h2>
<p><a href="https://man.linuxde.net/">Linux命令大全</a></p>
<p>以游戏的方式学习vim：<a href="http://vim-adventures.com/">vim冒险</a>(英文)</p>
<p><a href="https://vimhelp.org/">vim在线帮助文件</a>(英文)</p>
<p><a href="http://cenalulu.github.io/linux/all-vim-cheatsheat/">史上最全Vim快捷键键位图 – 入门到进阶</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记（下）</title>
    <url>/linux-learn-part2/</url>
    <content><![CDATA[<h2 id="一-用户和用户组"><a class="markdownIt-Anchor" href="#一-用户和用户组"></a> 一、用户和用户组</h2>
<blockquote>
<p>Linux 是<strong>多用户多任务</strong>操作系统，换句话说，Linux 系统支持多个用户在同一时间内登陆，不同用户可以执行不同的任务，并且互不影响。<br />
不同用户具有不同的权限，毎个用户在权限允许的范围内可以在同一时间完成不同的任务，Linux 正是通过这种权限的划分与管理，实现了多用户多任务的运行机制。</p>
<p>用户组是具有相同特征用户的逻辑集合，可以把需要相同权限的用户放入一个组，那么，所有用户就具有了和组一样的权限，这就是用户组。</p>
</blockquote>
<span id="more"></span>
<p>用户和组之间的关系如下图所示：</p>
<p><img src="2-1Z40QP4595X.gif" alt="img" /></p>
<h3 id="1-配置文件"><a class="markdownIt-Anchor" href="#1-配置文件"></a> 1、配置文件</h3>
<h4 id="11-用户配置文件"><a class="markdownIt-Anchor" href="#11-用户配置文件"></a> 1.1 用户配置文件</h4>
<blockquote>
<p>本节了解即可</p>
</blockquote>
<p><code>/etc/passwd</code>和<code>/etc/shadow</code>：这两个文件可以说是linux系统中最重要的文件之一。如果没有这两个文件或者这两个文件出问题，那就无法正常登录linux系统了。</p>
<p>使用<code>cat /etc/passwd</code>或<code>vim /etc/passwd</code>（推荐，有高亮显示）命令来查看文件</p>
<p><img src="image-20200712183438723.png" alt="image-20200712183438723" /></p>
<p>文件内容由<code>:</code>符号分割成7个字段，每个字段的含义：</p>
<ul>
<li>用户名：即代表用户账号的字符串</li>
<li>该账号的口令（密码）：为什么是<code>x</code>呢？早期的unix系统口令确实是存放在这里，但基于安全因素，后来就将其存放到<code>/etc/shadow</code>中了，在这里只用一个<code>x</code>代替。</li>
<li>用户标识号(uid)：系统识别用户身份就是通过这个数字来的，0就是root，取值范围是0<sub>65535，1</sub>499由系统作为管理账号保留。</li>
<li>组标识号(gid)：这个字段对应<code>/etc/group</code> 中的一条记录</li>
<li>注释说明：该字段没有实际意义，相当于备注</li>
<li>用户目录：当用户登录时就处在这个目录下。root的目录是/root，普通用户的目录则为<code>/home</code>相应的用户名文件夹，位置可以自定义。</li>
<li>shell：用户登录后要启动一个进程，用来将用户下达的指令传给内核，这就是shell。Linux的shell有很多种，在CentOS中是bash</li>
</ul>
<hr />
<p><code>/etc/shadow</code>文件：</p>
<p><img src="image-20200712192135334.png" alt="image-20200712192135334" /></p>
<p>这个文件和<code>/etc/passwd</code>类似，也用<code>:</code>分割成不同的字段，包括最后3个字段默认为空的共9个：</p>
<ul>
<li>用户名：跟/etc/passwd对应</li>
<li>用户密码：这个才是该账号的真正的密码，不过这个密码已经加密过了，但是有些黑客还是能够解密的。所以为了安全，该文件属性设置为600（只允许root读写）。</li>
<li>上次更改密码的时间戳(单位：天)：这个数字是距离1970年1月1日到上次更改密码的天数计算而来</li>
<li>要过多少天才可以更改密码：默认是0，即不限制</li>
<li>密码多少天后到期：即在多少天内必须更改密码，超过设定值未更改将不能登录系统。默认是99999，相当于永远不需要改</li>
<li>密码到期前的警告期限：默认为7，表示当7天后密码会过期时，系统就发出警告提醒用户，他的密码将在7天后到期</li>
<li>账号失效期限：如果设置这个值为3，则表示：密码已经到期后，用户并没有在到期前修改密码，那么再过3天，则这个账号就失效了，即锁定了。</li>
<li>账号的有效期：和“上次更改密码的时间戳”一样，是按距离1970年1月1日多少天算的。它表示的含义是，账号在这个日期前可以使用，到期后账号作废。</li>
<li>最后一个字段作为保留用的，无实际意义</li>
</ul>
<h4 id="12-用户组配置文件"><a class="markdownIt-Anchor" href="#12-用户组配置文件"></a> 1.2 用户组配置文件</h4>
<p><code>/etc/group</code>此文件是记录组 ID（GID）和组名相对应的文件。前面讲过，/etc/passwd 文件中每行用户信息的第四个字段对应的 /etc/group 文件中的一条记录。用vim打开这个文件，发现也是用<code>:</code>分割为4个字段</p>
<p><img src="image-20200713153748531.png" alt="image-20200713153748531" /></p>
<p>各字段的含义：</p>
<ul>
<li>
<p>用户组的名称：由字母或数字构成</p>
</li>
<li>
<p>组密码：和 /etc/passwd 文件一样，这里的<code>x</code>仅仅是密码标识，真正加密后的组密码默认保存在 /etc/gshadow 文件中。</p>
<blockquote>
<p>不过，用户设置密码是为了验证用户的身份，那用户组设置密码是用来做什么的呢？用户组密码主要是用来指定组管理员的，由于系统中的账号可能会非常多，root 用户可能没有时间进行用户的组调整，这时可以给用户组指定组管理员，如果有用户需要加入或退出某用户组，可以由该组的组管理员替代 root 进行管理。但是这项功能目前很少使用，我们也很少设置组密码。如果需要赋予某用户调整某个用户组的权限，则可以使用 sudo 命令代替</p>
</blockquote>
</li>
<li>
<p>组ID (gid)：就是用户组的 ID 号，Linux 系统就是通过 GID 来区分用户组的</p>
</li>
<li>
<p>组中的用户：此字段列出每个群组包含的所有用户。需要注意的是，如果该用户组是这个用户的初始组，则该用户不会写入这个字段，比如root组就没有写root用户。可以这么理解，该字段显示的用户都是这个用户组的附加用户</p>
</li>
</ul>
<p><strong>每个用户都可以加入多个附加组，但是只能属于一个初始组</strong></p>
<p><code>/etc/gshadow</code>文件同<code>/etc/shadow</code>文件，储存一些关于用户组的需要保护的信息，用vim打开，看到也是用<code>:</code>分割为4个字段，同时左下角提示这是只读的文件（图中已剪掉中间部分）</p>
<p><img src="image-20200713160327799.png" alt="image-20200713160327799" /></p>
<p>各字段含义：</p>
<ul>
<li>
<p>组名：同 /etc/group 文件中的组名相对应</p>
</li>
<li>
<p>组密码：对于大多数用户来说，通常不设置组密码，因此该字段常为空，但有的为 <code>!</code>，指的是该群组没有组密码，也不设有群组管理员。</p>
</li>
<li>
<p>组管理员：从系统管理员的角度来说，该文件最大的功能就是创建群组管理员</p>
<blockquote>
<p>那么，什么是群组管理员呢？</p>
<p>考虑到 Linux 系统中账号太多，而超级管理员 root 可能比较忙碌，因此当有用户想要加入某群组时，root 或许不能及时作出回应。这种情况下，如果有群组管理员，那么他就能将用户加入自己管理的群组中，也就免去麻烦 root 了。</p>
<p>不过，由于目前有 sudo 之类的工具，因此群组管理员的这个功能已经很少使用了。</p>
</blockquote>
</li>
<li>
<p>组中的附加用户：该字段显示这个用户组中有哪些附加用户，和 /etc/group 文件中附加组显示内容相同。</p>
</li>
</ul>
<h3 id="2-用户管理"><a class="markdownIt-Anchor" href="#2-用户管理"></a> 2、用户管理</h3>
<h4 id="21-添加用户"><a class="markdownIt-Anchor" href="#21-添加用户"></a> 2.1 添加用户</h4>
<p>使用<code>useradd [选项] 用户名</code>来添加用户，可用选项：</p>
<blockquote>
<p>-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中；<br />
-d&lt;登入目录&gt;：指定用户登入时的启始目录；<br />
-e&lt;有效期限&gt;：指定帐号的有效期限（格式为 “YYYY-MM-DD”）；<br />
-f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号；<br />
-g&lt;群组&gt;：指定用户所属的群组。一般以和用户名相同的组作为用户的初始组，在创建用户时会默认建立初始组。一旦手动指定，则系统将不会在创建此默认的初始组目录；<br />
-G&lt;群组&gt;：指定用户所属的附加群组(把用户加入其他组，使用附加组)；<br />
<strong>-m：自动建立用户的登入目录（该选项是默认的）</strong>；<br />
-M：不要自动建立用户的登入目录；<br />
-n：取消建立以用户名称为名的群组；<br />
-r：建立系统帐号。也就是 UID 在 1~499 之间，供系统程序使用的用户。由于系统用户主要用于运行系统所需服务的权限配置，因此系统用户的创建默认不会创建主目录；<br />
-s<shell>：指定用户登入后所使用的shell（默认是 /bin/bash）；<br />
-u<uid>：指定用户id。</p>
</blockquote>
<p>创建一个名为<code>guest</code>的用户，使用<code>tail -n1</code>查看配置文件最后一行的信息，发现写入了新建用户默认的数据。因为没有设置密码，所以密码字段是 <code>!!</code>，代表这个用户没有合理密码，不能正常登录。</p>
<p><img src="image-20200712232132709.png" alt="image-20200712232132709" /></p>
<p>切换到对应的用户目录，有一些默认的隐藏文件</p>
<p><img src="image-20200712232703014.png" alt="image-20200712232703014" /></p>
<h4 id="22-修改用户密码锁定用户"><a class="markdownIt-Anchor" href="#22-修改用户密码锁定用户"></a> 2.2 修改用户密码&amp;锁定用户</h4>
<p><code>passwd [选项] 用户名</code>用于设置用户的认证信息，包括用户密码、密码过期时间等。系统管理者root则能用它管理系统用户的密码。只有管理者可以指定用户名，一般用户只能变更自己的密码。</p>
<p>可用选项：</p>
<blockquote>
<p>-d：删除密码，仅有系统管理者才能使用；<br />
-f：强制执行；<br />
-k：设置只有在密码过期失效后，才能更新；<br />
-l：锁定密码，该选项会在 /etc/shadow 文件中指定用户的加密密码串前添加 “!”，使密码失效。仅 root 用户可用；<br />
-u：解锁用户，和 -l 选项相对应，也是只能 root 用户使用；<br />
-s：列出密码的相关信息，仅有系统管理者才能使用；<br />
-u：解开已上锁的帐号。<br />
-n天数：设置该用户修改密码后，多长时间不能再次修改密码，对应 /etc/shadow 文件中第4个字段；<br />
-x天数：设置该用户的密码有效期，对应 /etc/shadow 文件中各行密码的第5个字段；<br />
-w天数：设置用户密码过期前的警告天数，对于 /etc/shadow 文件中各行密码的第6个字段；<br />
-i日期：设置用户密码失效日期，对应 /etc/shadow 文件中各行密码的第7个字段。</p>
</blockquote>
<p>管理员模式下passwd命令附加用户名修改相应用户的密码，否则就是修改管理员的密码，如果密码长度小于8位或者过于简单，会出现提示</p>
<p>输入两次修改密码，这里和登录的时候一样，是不显示任何字符的，但是已经输入了（图中设置了系统语言为中文）</p>
<p><img src="image-20200713011418943.png" alt="image-20200713011418943" /></p>
<h4 id="23-修改用户属性"><a class="markdownIt-Anchor" href="#23-修改用户属性"></a> 2.3 修改用户属性</h4>
<p>修改用户属性有两种方式，一种是使用Vim编辑器手动修改涉及用户信息的相关文件（/etc/passwd、/etc/shadow、/etc/group、/etc/gshadow（后两个为用户组文件））另一个方法就是使用usermod 命令，需要注意的是，此命令不允许你改变正在线上的使用者帐号名称。</p>
<p>格式：</p>
<p><code>usermod [选项] 用户名</code></p>
<p>选项：</p>
<blockquote>
<p>-c&lt;备注&gt;：修改用户帐号的备注文字；<br />
-d&lt;用户目录&gt;：修改用户的主目录，使用绝对路径，<strong>对于不存在的目录，不会主动创建</strong>；<br />
-e&lt;有效期限&gt;：修改帐号的有效期限；<br />
-f&lt;失效天数&gt;：修改在密码过期后多少天即关闭该帐号；<br />
-g&lt;群组&gt;：修改用户所属的群组；<br />
-G&lt;群组&gt;；修改用户所属的附加群组；<br />
-l&lt;帐号名称&gt;：修改用户帐号名称；<br />
-L：锁定用户密码，即锁定用户；<br />
-s<shell>：修改用户登入后所使用的shell；<br />
-u<uid>：修改用户ID；<br />
-U:解除密码锁定。</p>
</blockquote>
<p><strong>useradd 命令和 usermod 命令的区别：前者用于添加用户，同时可以对用户信息进行指定；后者针对与已存在的用户，使用该命令可以修改它们的信息</strong></p>
<p><img src="image-20200713013253372.png" alt="image-20200713013253372" /></p>
<h4 id="24-切换用户"><a class="markdownIt-Anchor" href="#24-切换用户"></a> 2.4 切换用户</h4>
<p><code>su</code>是最简单的用户切换命令，通过该命令可以实现任何身份的切换，包括从普通用户切换为 root 用户、从 root 用户切换为普通用户以及普通用户之间的切换。</p>
<blockquote>
<p>普通用户之间切换以及普通用户切换至 root 用户，都需要知晓对方的密码，只有正确输入密码，才能实现切换；从 root 用户切换至其他用户，无需知晓对方密码，直接可切换成功。</p>
</blockquote>
<p>可使用的选项：</p>
<blockquote>
<p>-：当前用户不仅切换为指定用户的身份，同时所用的工作环境也切换为此用户的环境（包括 PATH 变量、MAIL 变量等），如果省略用户名，则默认切换为root用户。<br />
-l：同上，也是在切换用户身份的同时，完整切换工作环境，但后面需要添加要切换的用户名。<br />
-p或-m（–preserve-environment）：变更身份时，不要变更环境变量。<br />
-c &lt;指令&gt; 或–command &lt;指令&gt;：仅切换用户执行完指定的指令后，即恢复原来的身份。</p>
</blockquote>
<p>也就是说，不使用<code>-</code>选项的话，切换后的环境变量是之前用户的，相当于临时切换。</p>
<p>如图，新开一个会话窗口，登录guest用户，切换root用户，输入密码后用<code>env | grep guest</code>查看环境变量，发现用户名及相关环境变量还是guest，而不是root</p>
<p><img src="image-20200713020512101.png" alt="image-20200713020512101" /></p>
<h4 id="25-删除用户"><a class="markdownIt-Anchor" href="#25-删除用户"></a> 2.5 删除用户</h4>
<p><code>userdel</code>命令用于删除指定的用户，以及与用户相关的文件。若不加选项，则仅删除用户帐号，而不删除相关文件</p>
<p>选项：</p>
<blockquote>
<p>-f：强制删除用户，即使用户当前已登录；<br />
-r：删除用户的同时，删除与用户相关的所有文件。</p>
</blockquote>
<p><strong>不要轻易使用-r选项；它会同时删除用户的所有文件和目录，如果用户目录下有重要的文件，在删除前记得备份</strong></p>
<h3 id="3-用户组管理"><a class="markdownIt-Anchor" href="#3-用户组管理"></a> 3、用户组管理</h3>
<h4 id="31-添加用户组"><a class="markdownIt-Anchor" href="#31-添加用户组"></a> 3.1 添加用户组</h4>
<p>命令格式：<code>groupadd [选项] 组名</code></p>
<p>选项：</p>
<ul>
<li>-g GID：指定组 ID；</li>
<li>-r：创建系统群组。</li>
</ul>
<h4 id="32-修改用户组"><a class="markdownIt-Anchor" href="#32-修改用户组"></a> 3.2 修改用户组</h4>
<p>命令格式：<code>groupmod [选项] 组名</code></p>
<p>选项：</p>
<ul>
<li>-g GID：修改组 ID；</li>
<li>-n 新组名：修改组名；</li>
</ul>
<h4 id="33-删除用户组"><a class="markdownIt-Anchor" href="#33-删除用户组"></a> 3.3 删除用户组</h4>
<p>命令格式：<code>groupdel 组名</code>。</p>
<p>使用 groupdel 命令删除群组，其实就是删除 /etc/gourp 文件和 /etc/gshadow 文件中有关目标群组的数据信息。</p>
<p><strong>不能使用 groupdel 命令随意删除群组</strong>：此命令仅适用于删除那些 “不是任何用户初始组” 的群组，换句话说，如果有群组还是某用户的初始群组，则无法使用 groupdel 命令成功删除</p>
<h2 id="二-磁盘空间"><a class="markdownIt-Anchor" href="#二-磁盘空间"></a> 二、磁盘空间</h2>
<p><code>df</code>(disk free)命令用于显示已挂载磁盘的总容量、使用容量、剩余容量等，可以不加任何参数。默认显示单位为KB。</p>
<p><img src="image-20200713184814551.png" alt="image-20200713184814551" /></p>
<p>这样显示看着不太方便，可以使用<code>-h</code>选项自动选择合适的单位显示，如K、M、G（省略了B）</p>
<p><img src="image-20200713185037612.png" alt="image-20200713185037612" /></p>
<p>其它选项：</p>
<blockquote>
<p>-a或–all：包含全部的文件系统；<br />
–block-size=&lt;区块大小&gt;：以指定的区块大小来显示区块数目；<br />
-h或–human-readable：以可读性较高的方式来显示信息；<br />
-H或–si：与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes；<br />
-i或–inodes：显示inode的信息；<br />
-k或–kilobytes：指定区块大小为1024字节；<br />
-l或–local：仅显示本地端的文件系统；<br />
-m或–megabytes：指定区块大小为1024*1024字节；<br />
–no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值；<br />
-P或–portability：使用POSIX的输出格式；<br />
–sync：在取得磁盘使用信息前，先执行sync指令；<br />
-t&lt;文件系统类型&gt;或–type=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息；<br />
-T或–print-type：显示文件系统的类型；<br />
-x&lt;文件系统类型&gt;或–exclude-type=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息；<br />
–help：显示帮助；<br />
–version：显示版本信息。</p>
</blockquote>
<hr />
<p><code>du</code>(Disk usage)也是查看使用空间的，但是与df命令不同的是du命令是对文件和目录磁盘使用空间的查看，不加选项时默认显示当前目录的使用空间情况。</p>
<p>选项：</p>
<blockquote>
<p>-a或-all 显示目录中个别文件的大小。<br />
-b或-bytes 显示目录或文件大小时，以byte为单位。<br />
-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br />
-k或–kilobytes 以KB(1024bytes)为单位输出。<br />
-m或–megabytes 以MB为单位输出。<br />
-s或–summarize 仅显示总计，只列出最后加总的值。<br />
-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br />
-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br />
-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。<br />
-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br />
-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br />
–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br />
-D或–dereference-args 显示指定符号链接的源文件大小。<br />
-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br />
-l或–count-links 重复计算硬件链接的文件。</p>
</blockquote>
<p>示例：</p>
<p><img src="image-20200713193318434.png" alt="image-20200713193318434" /></p>
<h2 id="三-进程管理"><a class="markdownIt-Anchor" href="#三-进程管理"></a> 三、进程管理</h2>
<p><code>ps</code> （Process Status，不是PhotoShop）命令是最常用的监控进程的命令，通过此命令可以查看系统中所有运行进程的详细信息。</p>
<p>由于ps命令能够支持的系统类型非常多，所以选项也很多。这里只列出了几个常用的选项：</p>
<blockquote>
<p>a：显示一个终端的所有进程，除会话引线外；<br />
u：显示进程的归属用户及内存的使用情况；<br />
x：显示没有控制终端的进程；<br />
-l：长格式显示更加详细的信息；<br />
-e：显示所有进程；</p>
</blockquote>
<p>ps 命令有些与众不同，它的部分选项可以不用加<code>-</code>符号，比如选项<code>aux</code>。</p>
<p><img src="image-20200713195629067.png" alt="image-20200713195629067" /></p>
<p>图中部分输出已省略，各列的含义分别是：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>该进程是由哪个用户产生的。</td>
</tr>
<tr>
<td>PID</td>
<td>进程的 ID。</td>
</tr>
<tr>
<td>%CPU</td>
<td>该进程占用 CPU 资源的百分比，占用的百分比越高，进程越耗费资源。</td>
</tr>
<tr>
<td>%MEM</td>
<td>该进程占用物理内存的百分比，占用的百分比越高，进程越耗费资源。</td>
</tr>
<tr>
<td>VSZ</td>
<td>该进程占用虚拟内存的大小，单位为 KB。</td>
</tr>
<tr>
<td>RSS</td>
<td>该进程占用实际物理内存的大小，单位为 KB。</td>
</tr>
<tr>
<td>TTY</td>
<td>该进程是在哪个终端运行的。其中，tty1 ~ tty7 代表本地控制台终端（可以通过 Alt+F1 ~ F7 快捷键切换不同的终端），tty1~tty6 是本地的字符界面终端，tty7 是图形终端。pts/0 ~ 255 代表虚拟终端，一般是远程连接的终端，第一个远程连接占用 pts/0，第二个远程连接占用 pts/1，依次増长。</td>
</tr>
<tr>
<td>STAT</td>
<td>进程状态。常见的状态有以下几种：-D：不可被唤醒的睡眠状态，通常用于 I/O 情况。-R：该进程正在运行。-S：该进程处于睡眠状态，可被唤醒。-T：停止状态，可能是在后台暂停或进程处于除错状态。-W：内存交互状态（从 2.6 内核开始无效）。-X：死掉的进程（应该不会出现）。-Z：僵尸进程。进程已经中止，但是部分程序还在内存当中。-&lt;：高优先级（以下状态在 BSD 格式中出现）。-N：低优先级。-L：被锁入内存。-s：包含子进程。-l：多线程（小写 L）。-+：位于后台。</td>
</tr>
<tr>
<td>START</td>
<td>该进程的启动时间。</td>
</tr>
<tr>
<td>TIME</td>
<td>该进程占用 CPU 的运算时间，注意不是系统时间。</td>
</tr>
<tr>
<td>COMMAND</td>
<td>产生此进程的命令名。</td>
</tr>
</tbody>
</table>
<hr />
<p><code>pstree</code> 命令是以树形结构显示程序和进程之间的关系，基本格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstree [选项] [PID或用户名]</span><br></pre></td></tr></table></figure>
<p>常用选项及含义：</p>
<blockquote>
<p>-a：显示启动每个进程对应的完整指令，包括启动进程的路径、参数等。<br />
-c：不使用精简法显示进程信息，即显示的进程中包含子进程和父进程。<br />
-n：根据进程 PID 号来排序输出，默认是以程序名排序输出的。<br />
-p：显示进程的 PID。<br />
-u：显示进程对应的用户名称。</p>
</blockquote>
<p><img src="image-20200713213453435.png" alt="image-20200713213453435" /></p>
<p>另外，centos7上默认没有安装psmisc包，无法使用pstree命令，安装命令：<code> yum -y install psmisc</code></p>
<hr />
<p><code>kill</code>命令用来杀死进程。本质上，kill 命令的原理是向操作系统内核发送一个信号（多是终止信号）和目标进程的 PID，然后系统内核根据收到的信号类型，对指定进程进行相应的操作。</p>
<p>格式：<code>kill [信号] PID</code></p>
<p>kill 命令只能识别 PID，而不能识别进程名。Linux 定义了几十种不同类型的信号，可以使用 <code>kill -l</code> 命令查看所有信号及其编号，以下是常用的信号及其含义（表中省略了信号名称的前缀 SIG）：</p>
<table>
<thead>
<tr>
<th>信号编号</th>
<th>信号名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>EXIT</td>
<td>程序退出时收到该信息。</td>
</tr>
<tr>
<td>1</td>
<td>HUP</td>
<td>挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。</td>
</tr>
<tr>
<td>2</td>
<td>INT</td>
<td>表示结束进程，但并不是强制性的，常用的 “Ctrl+C” 组合键发出就是一个 kill -2 的信号。</td>
</tr>
<tr>
<td>3</td>
<td>QUIT</td>
<td>退出。</td>
</tr>
<tr>
<td>9</td>
<td>KILL</td>
<td>杀死进程，即强制结束进程。</td>
</tr>
<tr>
<td>11</td>
<td>SEGV</td>
<td>段错误。</td>
</tr>
<tr>
<td>15</td>
<td>TERM</td>
<td>正常结束进程，是 kill 命令的默认信号。</td>
</tr>
</tbody>
</table>
<h2 id="四-软件安装"><a class="markdownIt-Anchor" href="#四-软件安装"></a> 四、软件安装</h2>
<blockquote>
<p>Linux系统和Windows系统安装应用软件的方式是不同的，而且Linux系统的软件包的管理要比Windows系统软件包的管理复杂得多。同时因为Windows下所有的软件都不能在Linux中识别，所以 Windows 中大量的木马和病毒也都无法感染Linux。</p>
</blockquote>
<p>CentOS安装软件的方式一般来说有三种：</p>
<ul>
<li>rpm包安装（Redhat Package Manager）</li>
<li>压缩包解压缩安装</li>
<li>yum在线安装（Yellow dog Updater, Modified）</li>
</ul>
<h3 id="1-安装jdk8rpm"><a class="markdownIt-Anchor" href="#1-安装jdk8rpm"></a> 1、安装jdk8（rpm）</h3>
<p>首先去<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">oracle官网</a>上下载jdk8的rpn包（提示需要注册账号，注册即可）</p>
<p><img src="image-20200714160703488.png" alt="image-20200714160703488" /></p>
<p>使用FTP将其上传到服务器。参考：<a href="https://cloud.tencent.com/document/product/213/10912">Linux 云服务器搭建 FTP 服务</a></p>
<p>然后确认当前服务器没有java环境，并且rpm包已经上传完毕</p>
<p><img src="image-20200714161422232.png" alt="image-20200714161422232" /></p>
<p>执行<code>rpm -ivh jdk-8u241-linux-x64.rpm</code>命令开始安装，这里的参数含义：</p>
<ul>
<li>-i：安装（install）;</li>
<li>-v：显示更详细的信息（verbose）;</li>
<li>-h：打印 #，显示安装进度（hash）;</li>
</ul>
<p>当两个进度条走完后，便安装完毕了，此时可以删除rpm包</p>
<p><img src="image-20200714163114857.png" alt="image-20200714163114857" /></p>
<p>在/usr/java目录下可以看到安装后的jdk文件</p>
<p><img src="image-20200714165218512.png" alt="image-20200714165218512" /></p>
<p>配置环境变量：使用命令<code>vim /etc/profile</code>打开并编辑环境变量文件，在末尾追加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_241-amd64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin</span><br></pre></td></tr></table></figure>
<p>最后执行<code>source /etc/profile</code>使修改的文件生效，然后<code>java -version</code>检查是否安装成功</p>
<p><img src="image-20200714171318731.png" alt="image-20200714171318731" /></p>
<h3 id="2-安装tomcattargz压缩包"><a class="markdownIt-Anchor" href="#2-安装tomcattargz压缩包"></a> 2、安装tomcat（tar.gz压缩包）</h3>
<p>从<a href="https://tomcat.apache.org/download-90.cgi">tomcat官网</a>下载tar.gz格式的二进制分发包，然后使用FTP上传到服务器，检查文件是否存在，然后使用<code>tar -zxvf 压缩包名</code>命令解压</p>
<p><img src="image-20200714221828581.png" alt="image-20200714221828581" /></p>
<p>其中的选项说明：</p>
<ul>
<li>-z或–gzip或–ungzip：通过gzip指令处理备份文件</li>
<li>-x或–extract或–get：从备份文件中还原文件</li>
<li>-v：显示操作过程</li>
<li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt;：指定备份文件</li>
</ul>
<p>解压完成后，检查当前目录，进入tomcat的bin目录，Windows使用bat文件启动，Linux使用sh文件</p>
<p><img src="image-20200714222039077.png" alt="image-20200714222039077" /></p>
<p>运行此文件不能直接输入文件名，会被视为命令，此时使用<code>./startup.sh</code>（需要注意的是tomcat依赖java环境，此时）</p>
<p><img src="image-20200714222259665.png" alt="image-20200714222259665" /></p>
<p>当然，关闭的时候运行<code>./shutdown.sh</code></p>
<p>附：tar命令详解：</p>
<blockquote>
<p>tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>
<p>首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p>
<p>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p>
</blockquote>
<h3 id="3-安装vimyum"><a class="markdownIt-Anchor" href="#3-安装vimyum"></a> 3、安装vim（yum）</h3>
<blockquote>
<p>目前Linux厂商发布软件机制主要分为2大类<br />
Dpkg:由 Debian Linux 社区开发，B2D,Ubantu 等 Linux 发行版使用就是这种机制<br />
RPM:由 Red Hat 开发，CentOs,SuSe 使用就是这种机制<br />
这两种机制安装软件会先检测前置软件是否存在，如果不存在则不安装.如软件 A 安装。需系统内含有软件 B，那么不存在则不会安装软件<br />
为了解决这种因依赖问题而导致软件不能安装厂商又提供了在线升级机制，简单的说就是先将前驱软件都安装以保证要安的软件能正确安装</p>
<p>Dpkg 机制对应的在线升级机制 APT<br />
RPM 机制对应的在线升级机制 YUM</p>
</blockquote>
<p>虚拟机安装的CentOS默认是没有vim的，下面将通过vim来演示yum的使用</p>
<p>安装命令：<code>yum -y install 包名</code>，<code>-y</code>表示安装过程中所有询问用户的操作都为 yes</p>
<p><img src="image-20200715003210525.png" alt="image-20200715003210525" /></p>
<p>卸载命令：<code>yum remove 包名</code></p>
<p><img src="image-20200714235946397.png" alt="image-20200714235946397" /></p>
<blockquote>
<p>使用 yum 卸载软件包时，会同时卸载所有与该包有依赖关系的其他软件包，即便有依赖包属于系统运行必备文件，也会被 yum 无情卸载，带来的直接后果就是使系统崩溃。</p>
<p><strong>除非你能确定卸载此包以及它的所有依赖包不会对系统产生影响，否则不要使用 yum 卸载软件包。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>rpm</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础整理与查漏补缺</title>
    <url>/java-base/</url>
    <content><![CDATA[<p><font color=white>Java入门很久了，也没有好好整理一下知识树，遇到一些忘记or遗漏的知识点时，就会深感自身能力不足且惭愧，所以借此机会将Java的基础知识结构过一遍</font></p>
<span id="more"></span>
<p>首先是<a href="http://naotu.baidu.com/file/8d2420d2b524ee9ff06569eebd68c102?token=732f60f903bd38d3">思维导图</a>：</p>
<p><img src="Java%E5%9F%BA%E7%A1%80.png" alt="Java基础" /></p>
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<blockquote>
<p>Java是一种广泛使用的计算机编程语言，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web应用开发和移动应用开发。</p>
</blockquote>
<p>Java的发展依托于互联网，所以绝大多数企业级Web应用开发都是以Java作为开发语言，而移动应用开发则是因为移动设备的Android系统的大部分代码采用Java编程语言编程</p>
<h3 id="发展历史"><a class="markdownIt-Anchor" href="#发展历史"></a> 发展历史</h3>
<p>上世纪90年代初，任职于Sun MicroSystems的詹姆斯·高斯林（James Gosling，公认的Java之父）等人开发了Java语言的雏形，最初被命名为Oak（橡树）。随着1990年代互联网的发展，Sun公司看见Oak在互联网上应用的前景，于是改造了Oak，直到1995年5月以Java的名称正式发布（当时Oak这个名字已被一家显卡制造商注册）。Java伴随着互联网的迅猛发展而发展，逐渐成为重要的编程语言之一。</p>
<p>1999年6月，Sun公司发布了Java的三个版本：微型版（J2ME）、标准版（J2SE）和企业版（J2EE）。</p>
<p>2004年9月，J2SE1.5发布，为了表示该版本的重要性，版本号1.5改为5.0，此后的版本号均以X.0命名。</p>
<p>2005年6月，<a href="https://zh.wikipedia.org/wiki/JavaOne%E5%A4%A7%E4%BC%9A">JavaOne大会</a>召开，Sun公司发布Java SE 6。此时，为了取消Java各种版本名中的数字<code>2</code>：J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME。</p>
<p>2009年4月，Oracle公司（甲骨文）以74亿美金收购了Sun公司，Java也随之成为了甲骨文公司的产品。</p>
<h3 id="语言特点"><a class="markdownIt-Anchor" href="#语言特点"></a> 语言特点</h3>
<ol>
<li>
<p>跨平台，Java对于不同的硬件架构和操作系统（Windows、Linux、macOS）等，提供了不同的本地语言环境，这使得开发者或用户不会因为不同平台的差异而在开发或使用过程中产生隔阂。</p>
<blockquote>
<p>Java不同于一般的编译语言或解释型语言。它首先将源代码编译成字节码，再依赖各种不同平台上的虚拟机来解释执行字节码，从而具有“一次编写，到处运行”的跨平台特性。在早期JVM中，这在一定程度上降低了Java程序的运行效率。但在J2SE1.4.2之后，Java的运行速度有了大幅提升。</p>
</blockquote>
</li>
<li>
<p>面向对象编程（即Object-oriented programming，缩写OOP，又叫物件导向程式设计）：Java语言的开发者在设计软件的时候将一切事物视作对象进行处理，事物的属性即对象的字段，事物的行为即对象的方法。（作为对比：C语言则是面向过程编程）</p>
</li>
<li>
<p>泛型（也叫参数化类型）编程允许程序员在强类型程序设计语言中编写代码时使用一些调用时才指定的类型，在实例化时作为参数指明这些类型，使用泛型的主要目的是加强类型安全及减少类型转换的次数。</p>
</li>
<li>
<p>自动垃圾回收：Java对象的创建和放置都是在内存堆栈上面进行的。当一个对象没有任何引用的时候，Java的自动垃圾收集机制就会发挥作用，自动删除这个对象所占用的空间，释放内存以避免内存泄漏。</p>
</li>
<li>
<p>解释型：Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行。</p>
</li>
</ol>
<p>此外java特点还有分布式的、健壮的、安全的、可移植的、多线程的、动态的、高性能的……</p>
<h3 id="jre-jdk与jvm"><a class="markdownIt-Anchor" href="#jre-jdk与jvm"></a> JRE、JDK与JVM</h3>
<p>JVM：Java Virtual Machine，即java虚拟机，能够运行编译成java字节码形式的应用程序</p>
<blockquote>
<p>Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。通过对中央处理器（CPU）所执行的软件实现，实现能执行编译过的Java程序码（Applet与应用程序）。</p>
</blockquote>
<p>JRE：Java Runtime Environment，java运行环境，包括了java虚拟机以及运行库，要运行java程序就需要安装JRE</p>
<p>JDK：Java Development Kit，java开发工具包，除了包含有JRE以外，还有开发者所需的如编译、调试工具等等</p>
<p>关于三者的关系以及包含的组件，参考如下JavaSE概念图：</p>
<p><img src="image-20210319024525292.png" alt="image-20210319024525292" /></p>
<h3 id="开发工具与环境"><a class="markdownIt-Anchor" href="#开发工具与环境"></a> 开发工具与环境</h3>
<p>搭建Java开发环境要先安装JDK，此处参考<a href="/software/portable-software/#Oracle-JDK">JDK8便携版的制作</a>，或者JDK11（有Oracle官方提供的zip版本），需要注意的是JDK11没有自带JRE，需要在JDK根目录使用如下命令生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure>
<p>若不愿在Oracle注册帐号，还可以通过以下途径进行下载：</p>
<ul>
<li><a href="https://www.injdk.cn/">Java I tell you</a></li>
<li><a href="https://portapps.io/app/oracle-jdk-portable/">Portapps</a>（仅OracleJDK）</li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/AdoptOpenJDK/">清华大学开源软件镜像站</a>（仅OpenJDK）</li>
</ul>
<h4 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h4>
<p>在环境变量（当前用户为管理员的话，在用户变量或系统变量中均可）新建<code>JAVA_HOME</code>，值指向JDK的安装目录，然后在PATH中追加<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code>，与其它值之间使用分号分割，末尾不用分号</p>
<p>以前的教程中还会提到设置<code>CLASSPATH</code>，需要注意的是在JDK5以后不需要再另外设置<code>CLASSPATH</code>了。参考<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html">Setting the Class Path</a>以及<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466914339296">classpath和jar</a></p>
<blockquote>
<p>类路径告诉JDK工具和应用程序在哪里可以找到<strong>第三方和用户定义的类</strong>，这些类不是Java平台的扩展或组成部分。</p>
</blockquote>
<h4 id="ide"><a class="markdownIt-Anchor" href="#ide"></a> IDE</h4>
<p>尽管可以使用记事本写代码并使用命令来编译运行，但还是不如专门的集成开发工具便捷。<br />
主流的java开发工具：</p>
<ul>
<li><a href="https://www.eclipse.org/">Eclipse</a>：最初是由IBM公司开发的，2001年11月贡献给开源社区，由非营利软件供应商联盟Eclipse基金会管理。早期使用的比较多。优点是免费、开源且轻量</li>
<li><a href="https://www.jetbrains.com/idea/">IDEA</a>：JetBrains公司开发，功能强大且十分智能，编码体验很舒适。仅社区版免费但没有数据库工具、不支持Spring开发等等，旗舰版可试用30天。有官方汉化插件，比eclipse占用更多内存，更新稳定但BUG也不少，推出新特性的同时也会有新BUG出现</li>
<li><a href="https://code.visualstudio.com/">VScode</a>：由微软开发，和那个臃肿的Visual Studio没啥关系。严格来说不是IDE，而是功能强大的编辑器，IDE能做到的，它也能做到。丰富的插件市场使它可以胜任一切编程语言</li>
</ul>
<h4 id="彩蛋"><a class="markdownIt-Anchor" href="#彩蛋"></a> 彩蛋</h4>
<p>使用十六进制编辑器打开由Java源代码编译出的二进制文件（.class文件）的话，最前面的4个字节是CA FE BA BE，即词组“CAFE BABE”（咖啡屋宝贝）。</p>
<p><img src="image-20210319233851493.png" alt="image-20210319233851493" /></p>
<h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2>
<p>无论什么编程语言，先从一段Hello World代码开始：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>public/class/static/void：都是关键字，其中public为访问修饰符，class表示这是一个类，static表示是静态的，void表示返回类型为空（没有返回值）</li>
<li>Main/main；作为标识符，M大写的表示类名，这个名字必须与文件名一致，每个java源文件有且只能有一个公共类；小写的则是方法名，作为应用程序的入口点。<strong>在Java编程语言中，每个应用程序都必须包含一个main方法</strong></li>
<li>String[] args：用于传递命令行参数</li>
</ul>
<h3 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h3>
<p>标识符是指用于命名类名、变量名以及方法名的字符，它有以下几点要求：</p>
<ul>
<li>必须以字母（大写或小写）,美元符号<code>$</code>、或者下划线<code>_</code>开始</li>
<li>之后可以是字母（大写或小写）,美元符号<code>$</code>、下划线<code>_</code>或数字的任意组合</li>
<li>不能使用关键字作为标识符</li>
<li>大小写敏感</li>
</ul>
<blockquote>
<p><strong>不要使用中文作为标识符</strong>，尽管这在编译和运行过程中是正常的</p>
</blockquote>
<h3 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h3>
<table>
<thead>
<tr>
<th style="text-align:center">类别</th>
<th style="text-align:center">关键字</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">访问控制</td>
<td style="text-align:center">private</td>
<td style="text-align:center">私有的</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">protected</td>
<td style="text-align:center">受保护的</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">public</td>
<td style="text-align:center">公共的</td>
</tr>
<tr>
<td style="text-align:center">类、方法和变量修饰符</td>
<td style="text-align:center">abstract</td>
<td style="text-align:center">抽象的（类）</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">class</td>
<td style="text-align:center">类</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">extends</td>
<td style="text-align:center">扩充、继承</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">final</td>
<td style="text-align:center">最终的、不可变的</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">implements</td>
<td style="text-align:center">实现（接口）</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">interface</td>
<td style="text-align:center">接口</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">native</td>
<td style="text-align:center">本地，原生方法（非Java实现）</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">new</td>
<td style="text-align:center">新、创建</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">static</td>
<td style="text-align:center">静态</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">strictfp</td>
<td style="text-align:center">严格、精准</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">synchronized</td>
<td style="text-align:center">（线程）同步</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">transient</td>
<td style="text-align:center">短暂</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">volatile</td>
<td style="text-align:center">易失</td>
</tr>
<tr>
<td style="text-align:center">程序控制语句</td>
<td style="text-align:center">braek</td>
<td style="text-align:center">跳出（循环）</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">case</td>
<td style="text-align:center">定义一个值以供switch选择</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">continue</td>
<td style="text-align:center">继续</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">default</td>
<td style="text-align:center">默认</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">do</td>
<td style="text-align:center">做（循环）</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">else</td>
<td style="text-align:center">否则</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">for</td>
<td style="text-align:center">循环</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">if</td>
<td style="text-align:center">如果</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">instanceof</td>
<td style="text-align:center">（是否是对象的）实例</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">return</td>
<td style="text-align:center">返回</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">switch</td>
<td style="text-align:center">根据值选择执行</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">while</td>
<td style="text-align:center">循环</td>
</tr>
<tr>
<td style="text-align:center">错误处理</td>
<td style="text-align:center">assert</td>
<td style="text-align:center">断言</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">catch</td>
<td style="text-align:center">处理捕获（的异常）</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">finally</td>
<td style="text-align:center">有没有异常都执行</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">throw</td>
<td style="text-align:center">抛出异常</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">throws</td>
<td style="text-align:center">声明可能被抛出的异常</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">try</td>
<td style="text-align:center">捕获（异常）</td>
</tr>
<tr>
<td style="text-align:center">包相关</td>
<td style="text-align:center">import</td>
<td style="text-align:center">导入</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">package</td>
<td style="text-align:center">包（的路径）</td>
</tr>
<tr>
<td style="text-align:center">基本类型</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">布尔</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">byte</td>
<td style="text-align:center">字节</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">char</td>
<td style="text-align:center">字符</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">double</td>
<td style="text-align:center">双精度浮点</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">float</td>
<td style="text-align:center">单精度浮点</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">int</td>
<td style="text-align:center">整型</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">long</td>
<td style="text-align:center">长整型</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">short</td>
<td style="text-align:center">短整型</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">null</td>
<td style="text-align:center">空</td>
</tr>
<tr>
<td style="text-align:center">变量引用</td>
<td style="text-align:center">super</td>
<td style="text-align:center">父类、超类</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">this</td>
<td style="text-align:center">本类</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">void</td>
<td style="text-align:center">无返回值</td>
</tr>
<tr>
<td style="text-align:center">保留</td>
<td style="text-align:center">goto</td>
<td style="text-align:center">跳转，不可使用</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">const</td>
<td style="text-align:center">常量，不可使用</td>
</tr>
</tbody>
</table>
<h4 id="修饰符"><a class="markdownIt-Anchor" href="#修饰符"></a> 修饰符</h4>
<p>不写修饰符即为package/friendly/default。</p>
<ul>
<li>
<p>package：在同一包内可见。可修饰：类、接口、变量、方法</p>
</li>
<li>
<p>private：在同一类内可见。可修饰：变量、方法。 不能修饰类（外部类）</p>
</li>
<li>
<p>public：对所有类可见。可修饰：类、接口、变量、方法</p>
</li>
<li>
<p>protected：对同一包内的类和所有子类可见。可修饰：变量、方法。 不能修饰类（外部类）</p>
</li>
</ul>
<h5 id="修饰符的访问范围"><a class="markdownIt-Anchor" href="#修饰符的访问范围"></a> 修饰符的访问范围</h5>
<p><img src="image-20210320032317279.png" alt="image-20210320032317279" /></p>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<blockquote>
<p>注释的作用：标识程序是干什么的，以及它是如何构建的。注释帮助程序员进行相互沟通以及理解程序。注释不是程序设计语言，所以编译器编译程序时忽略它们。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="文档注释"><a class="markdownIt-Anchor" href="#文档注释"></a> 文档注释</h4>
<p>还有一种特殊的注释叫<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html">JavaDoc</a>，它允许你在程序中嵌入关于程序的信息，这种特殊的多行注释需要写在类或方法的定义处，用于从Java源文件生成API文档的HTML页面。格式如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>文档注释内可以使用两种标签，一种是仅放置于描述部分后面的块标签（Block tags）：</p>
<ul>
<li>@author：作者名</li>
<li>@deprecated：已弃用的类、方法或属性</li>
<li>@throws和@exception：抛出的异常</li>
<li>@param：方法的参数</li>
<li>@return：方法的返回值</li>
<li>@version：版本号</li>
<li>@since：起始的JDK版本号（基于什么版本开发的）</li>
<li>@see：指定到其它类的链接（另请参阅）</li>
<li>@serial：用于默认可序列化字段（参考<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/serialization/index.html">Java对象序列化</a>）</li>
<li>@implNote：实现说明</li>
</ul>
<p>另一种是可以放置在注释的描述部分或任意位置的内联标签（Inline tags）：</p>
<ul>
<li>{@docRoot}：当前文档根目录的路径</li>
<li>{@value}：显示常量值</li>
<li>{@inheritDoc}：从直接父类继承的注释</li>
<li>{@link}：插入带有可见文本标签的内联链接，该标签指向引用类的指定包、类或成员名称的文档</li>
<li>{@linkplain}：同上，但是链接以纯文本显示</li>
<li>{@code}：等同于<code>&lt;code&gt;&lt;/code&gt;</code>，以代码字体显示，而不是将文本解释为HTML标记或嵌套的Javadoc标签</li>
<li>{@literal}：显示文本，而不是将文本解释为HTML标记或嵌套的Javadoc标签</li>
</ul>
<p>文档生成示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个用于演示文档注释的类，包含了一个&#123;<span class="doctag">@link</span> String String&#125;类型的私有字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> L</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置并获取name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception name为空</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getSet</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">if</span> (name == <span class="literal">null</span> || name.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用<code>javadoc</code>命令（注意使用<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDFDACB">参数</a>指定编码格式）生成HTML文档，双击index.html查看</p>
<p><img src="image-20210323232401844.png" alt="image-20210323232401844" /></p>
<p>在IDEA中可以通过<code>主菜单-&gt;工具-&gt;生成JavaDoc...</code>便捷的生成文档</p>
<p><img src="image-20210323232754938.png" alt="image-20210323232754938" /></p>
<h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3>
<p>变量即可以变化的量。在Java中，变量按类型可以分为基本类型的变量和引用类型的变量。按范围可以分为局部变量、类变量(静态变量)、成员变量(非静态变量、实例变量)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> i; <span class="comment">// 静态变量</span></span><br><span class="line">	<span class="type">char</span> c; <span class="comment">// 成员变量</span></span><br><span class="line">	String str; <span class="comment">// 成员变量，引用类型</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// 局部变量，方法参数</span></span><br><span class="line">		<span class="type">float</span> f; <span class="comment">// 局部变量</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h4>
<ul>
<li>局部变量声明在方法、构造方法或者语句块中；</li>
<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>
<li>访问修饰符不能用于局部变量；</li>
<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>
<li>局部变量是在栈上分配的。</li>
<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>
</ul>
<h4 id="实例变量"><a class="markdownIt-Anchor" href="#实例变量"></a> 实例变量</h4>
<ul>
<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>
<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>
<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>
<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>
<li>实例变量可以声明在使用前或者使用后；</li>
<li>访问修饰符可以修饰实例变量；</li>
<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>
<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>
<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>
</ul>
<h4 id="静态变量"><a class="markdownIt-Anchor" href="#静态变量"></a> 静态变量</h4>
<ul>
<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>
<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>
<li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li>
<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li>
<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>
<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li>
<li>默认值和实例变量相同。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>
<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>
<li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>
</ul>
<h4 id="变量的作用域"><a class="markdownIt-Anchor" href="#变量的作用域"></a> 变量的作用域</h4>
<p>变量的范围是程序中该变量可以被引用的部分。</p>
<ul>
<li>局部变量的作用范围从声明开始，直到包含它的块结束。</li>
<li>方法的参数范围涵盖整个方法，它实际上是一个局部变量。</li>
<li>循环的初始化部分声明的变量，其作用范围为整个循环体。但循环体内声明的变量其作用范围是从它声明到循环体结束。</li>
</ul>
<h3 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h3>
<p>常量使用<code>final</code>关键字修饰，常量名通常为全部大写，常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。</p>
<h3 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>算术运算符</td>
<td>+</td>
<td>加</td>
</tr>
<tr>
<td></td>
<td>-</td>
<td>减</td>
</tr>
<tr>
<td></td>
<td>*</td>
<td>乘</td>
</tr>
<tr>
<td></td>
<td>/</td>
<td>除</td>
</tr>
<tr>
<td></td>
<td>%</td>
<td>取余，左边的数对右边相除后的余数</td>
</tr>
<tr>
<td></td>
<td>++</td>
<td>自增</td>
</tr>
<tr>
<td></td>
<td>–</td>
<td>自减</td>
</tr>
<tr>
<td>关系运算符（值判断）</td>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td></td>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td></td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td></td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td></td>
<td>&gt;=</td>
<td>大于或等于</td>
</tr>
<tr>
<td></td>
<td>&lt;=</td>
<td>小于或等于</td>
</tr>
<tr>
<td>位运算符</td>
<td>&amp;</td>
<td>与，如果相对应位都是1，则结果为1，否则为0</td>
</tr>
<tr>
<td></td>
<td>|</td>
<td>或，如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td></td>
<td>^</td>
<td>非，也叫异或，如果相对应位值相同，则结果为0，否则为1</td>
</tr>
<tr>
<td></td>
<td>~</td>
<td>按位取反，0变1，1变1</td>
</tr>
<tr>
<td></td>
<td>&lt;&lt;</td>
<td>左移</td>
</tr>
<tr>
<td></td>
<td>&gt;&gt;</td>
<td>右移</td>
</tr>
<tr>
<td></td>
<td>&gt;&gt;&gt;</td>
<td>无符号右移（按位右移补零）</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>&amp;&amp;</td>
<td>逻辑与，“一假则假”</td>
</tr>
<tr>
<td></td>
<td>||</td>
<td>逻辑或，“一真则真”</td>
</tr>
<tr>
<td></td>
<td>!</td>
<td>逻辑非，“真假反转”</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>=</td>
<td>赋值，将右边的值赋予左边</td>
</tr>
<tr>
<td></td>
<td>+=</td>
<td>相加后赋值，将左边原来的值与右边相加后赋予左边，下同</td>
</tr>
<tr>
<td></td>
<td>-=</td>
<td>相减后赋值</td>
</tr>
<tr>
<td></td>
<td>*=</td>
<td>相乘后赋值</td>
</tr>
<tr>
<td></td>
<td>/=</td>
<td>相除后赋值</td>
</tr>
<tr>
<td></td>
<td>%=</td>
<td>取余后赋值</td>
</tr>
<tr>
<td></td>
<td>&lt;&lt;=</td>
<td>左移后赋值</td>
</tr>
<tr>
<td></td>
<td>&gt;&gt;=</td>
<td>右移后赋值</td>
</tr>
<tr>
<td></td>
<td>&amp;=</td>
<td>按位与后赋值</td>
</tr>
<tr>
<td></td>
<td>^=</td>
<td>按位异或赋值</td>
</tr>
<tr>
<td></td>
<td>!=</td>
<td>按位非后赋值</td>
</tr>
<tr>
<td>条件运算符(三元运算符)</td>
<td>?:</td>
<td>判断第一个表达式的真假，真则值为第二个表达式，假则值为第三个表达式</td>
</tr>
<tr>
<td>类型比较</td>
<td>instanceof</td>
<td>检查该对象是否是一个指定的类型（类类型或接口类型）</td>
</tr>
<tr>
<td>字符串连接运算符</td>
<td>+</td>
<td>当表达式中含有字符或字符串时，此运算符将视为字符串的连接</td>
</tr>
</tbody>
</table>
<ul>
<li>逻辑运算<code>&amp;&amp;</code>和<code>||</code>是短路的</li>
<li>只能对整数类型以及字符类型进行位运算</li>
<li>位运算比算术运算效率高</li>
</ul>
<h4 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级"></a> 运算符优先级</h4>
<p>运算优先级从高到低如下所示，不用刻意记忆，使用时可以通过括号<code>()</code>来改变优先级的顺序</p>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">操作符</th>
<th style="text-align:left">关联性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">后缀</td>
<td style="text-align:left">() [] . (点操作符)</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">一元：后自增、后自减</td>
<td style="text-align:left">expr++ expr–</td>
<td style="text-align:left">从左到右</td>
</tr>
<tr>
<td style="text-align:left">一元：前自增、前自减</td>
<td style="text-align:left">++expr --expr + - ～ ！</td>
<td style="text-align:left">从右到左</td>
</tr>
<tr>
<td style="text-align:left">先乘除</td>
<td style="text-align:left">* / ％</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">后加减</td>
<td style="text-align:left">+ -</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">移位</td>
<td style="text-align:left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">关系</td>
<td style="text-align:left">&gt; &gt;= &lt; &lt;=</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">相等</td>
<td style="text-align:left">== !=</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">按位与</td>
<td style="text-align:left">＆</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">按位异或</td>
<td style="text-align:left">^</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">按位或</td>
<td style="text-align:left">|</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">逻辑与</td>
<td style="text-align:left">&amp;&amp;</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">逻辑或</td>
<td style="text-align:left">| |</td>
<td style="text-align:left">左到右</td>
</tr>
<tr>
<td style="text-align:left">条件</td>
<td style="text-align:left">?:</td>
<td style="text-align:left">从右到左</td>
</tr>
<tr>
<td style="text-align:left">赋值</td>
<td style="text-align:left">= += -= *= /= ％= &gt;&gt;= &lt;&lt;= ＆ = ^= |=</td>
<td style="text-align:left">从右到左</td>
</tr>
<tr>
<td style="text-align:left">逗号</td>
<td style="text-align:left">,</td>
<td style="text-align:left">左到右</td>
</tr>
</tbody>
</table>
<h3 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h3>
<ul>
<li>基本数据类型有：byte、short、int、long、float、double、boolean、char<br />
其中byte，short，int，long是整数类型，float、double是浮点数类型，char是字符类型，boolean布尔类型用于逻辑判断</li>
<li>long类型的值在书写时可以后跟大写<code>L</code>表示，float类型的值在书写时必须后跟<code>f</code>（可大写可小写）</li>
<li>整数类型的不同进制表示示例：16进制0xf，8进制077</li>
<li>char的16进制unicode字符表示法：\u0000</li>
<li>java没有无符号的数据类型</li>
</ul>
<h4 id="范围"><a class="markdownIt-Anchor" href="#范围"></a> 范围</h4>
<p>按8位=1字节，最高位表示符号位（正或负），以二进制补码计算，各种整数类型可表示的范围如下：</p>
<ul>
<li>byte：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">-2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>7</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{7-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> = -128 ~ 127</li>
<li>short：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>15</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{15-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> = -32768 ~ 32767</li>
<li>int：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>31</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{31-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> = -2147483648 ~ 2147483647</li>
<li>long：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>63</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{63-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> = -9223372036854775808 ~ 9223372036854775807</li>
</ul>
<p>char为2个字节，float为4个字节，double为8个字节</p>
<p>关于浮点数的定义，参考<a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE 754二进制浮点数算术标准</a>，这里给出范围</p>
<ul>
<li>float：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>149</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-149}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">4</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3.4</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">3.4*10^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>double：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1074</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-1074}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">7</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.79</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">1.79*10^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3>
<p>不同的基本数据类型之间可以混合进行计算，但需要转换先转化为同一类型。有如下三种转换形式：</p>
<h4 id="自动类型转换"><a class="markdownIt-Anchor" href="#自动类型转换"></a> 自动类型转换</h4>
<p>char类型与整数类型计算时char自动转换为int</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> c + <span class="number">1</span>; <span class="comment">// 98</span></span><br></pre></td></tr></table></figure>
<p>低精度的与高精度的计算时，低精度的先转换为高精度的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> f + <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h4 id="强制类型转换"><a class="markdownIt-Anchor" href="#强制类型转换"></a> 强制类型转换</h4>
<p>可以使用强制转换由高精度的数据类型转换到低精度的数据类型，但超过范围时会丢失精度</p>
<p>格式：(需要转换的类型) 被转换的变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) i; <span class="comment">// -56</span></span><br></pre></td></tr></table></figure>
<p>高位字节被去掉，保留低位字节进行表示</p>
<p><img src="image-20210321234418184.png" alt="image-20210321234418184" /></p>
<p>由浮点数转换到整数时，舍弃小数部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.23f</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) f; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h4 id="隐含强制类型转换"><a class="markdownIt-Anchor" href="#隐含强制类型转换"></a> 隐含强制类型转换</h4>
<p>所有的整数进行计算时会提升到默认类型int</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">short</span>) (b + <span class="number">1</span>); <span class="comment">// 需要强制转换，因为计算时默认类型为int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b + <span class="number">2</span>; <span class="comment">// 不需要强制转换</span></span><br></pre></td></tr></table></figure>
<h3 id="流程控制"><a class="markdownIt-Anchor" href="#流程控制"></a> 流程控制</h3>
<ul>
<li>
<p>条件判断：if或者if…else</p>
</li>
<li>
<p>循环：for(;😉、for(😃、while()和do,while</p>
</li>
<li>
<p>多重选择：switch…case，可用于整数类型和字符（串）类型，当没有匹配到任何case语句时执行default分支</p>
</li>
<li>
<p>break用于结束多重选择或跳出整个循环体</p>
</li>
<li>
<p>continue用于结束当次循环，跳转到下一次循环</p>
</li>
</ul>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<p>数组是相同数据类型的集合，数组是引用类型，一旦创建后大小不能改变，使用<code>数组名.length</code>来获得数组中的元素数量</p>
<p>数组中的元素初始化时若未赋值，将使用默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>，字符为<code>\0</code>（控制字符，ASCII代码0），引用类型为<code>null</code></p>
<p>声明数组的方式有两种，推荐使用前者，后者是为了照顾C/C++的程序员</p>
<ul>
<li>数据类型[] 数组名</li>
<li>数据类型 数组名[]</li>
</ul>
<p>创建数组的方式（第三种为静态初始化，仅用于声明的同时赋值，不能对已赋值数组进行二次赋值）</p>
<ul>
<li>new 数据类型[数组大小]</li>
<li>new 数据类型[]{ 数据1, 数据2, 数据3, …, 数据n }</li>
<li>{ 数据1, 数据2, 数据3, …, 数据n }</li>
</ul>
<p>通过索引值访问数组元素，索引值从<code>0</code>开始到<code>length-1</code>。如果越界，会抛出<code>ArrayIndexOutOfBoundsException</code></p>
<h4 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h4>
<p>使用多维数组与一维数组相似：数据类型[][] 数组名 = { {数据1, 数据2, 数据3, …, 数据n}, …, {数据1, 数据2, 数据3, …, 数据n} }</p>
<p>也可以创建锯齿型数组，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] array = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="基本输入与输出"><a class="markdownIt-Anchor" href="#基本输入与输出"></a> 基本输入与输出</h3>
<p>通过<code>Scanner</code>对象获取简单的文本扫描器，可以使用正则表达式解析基本类型和字符串，将标准输入流对象<code>System.in</code>传入构造方来扫描控制台输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	System.out.print(<span class="string">&quot;输入字符串：&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (sc.hasNext()) &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">		System.out.println(<span class="string">&quot;str = &quot;</span> + str);</span><br><span class="line">	&#125;</span><br><span class="line">	sc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210408163038589.png" alt="image-20210408163038589" /></p>
<p>方法说明</p>
<ul>
<li><code>hasNext()</code>：判断是否还有输入</li>
<li><code>hasNextLine()</code>：判断是否还有下一行输入</li>
<li><code>next()</code>：接收字符串，以空格为结束标志</li>
<li><code>nextLine()</code>：接受一整行字符串</li>
<li><code>hasNextXxx()</code>：Xxx为数据类型，判断是否还有对应类型的输入</li>
<li><code>nextXxx()</code>：Xxx为数据类型，将输入转换为对应类型，无法转换时抛出<code>InputMismatchException</code></li>
<li><code>close()</code>：关闭Scanner对象</li>
</ul>
<p><code>System.out</code>是标准输出流对象，用于向控制台输出消息，其常用的方法有</p>
<ul>
<li><code>println()</code>：有多种重载方法，直接输出换行或者接收任何对象输出其数据并换行，接收<code>Object</code>类型时会先调用<code>String.valueOf()</code>。具体使用的换行符取决于系统</li>
<li><code>print()</code>：同上，但不会换行，并且不接收空参数</li>
<li><code>printf()</code>：类似于c语言的printf函数，使用指定的格式字符串和参数将格式化的字符串输出</li>
<li><code>format()</code>：同上</li>
</ul>
<h3 id="编程规范"><a class="markdownIt-Anchor" href="#编程规范"></a> 编程规范</h3>
<ul>
<li><a href="https://google.github.io/styleguide/javaguide.html">Google Java编程风格规范</a>，<a href="https://jervyshi.gitbooks.io/google-java-styleguide-zh/content/index.html">中文版</a></li>
<li><a href="https://developer.aliyun.com/special/tech-java">阿里巴巴Java开发手册</a></li>
<li><a href="http://java.sun.com/docs/books/jls/index.html">Oracle Java语言规范</a></li>
</ul>
<h2 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h2>
<blockquote>
<p>面向对象程序设计是种具有对象概念的编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类（class）的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象。</p>
</blockquote>
<h3 id="特征"><a class="markdownIt-Anchor" href="#特征"></a> 特征</h3>
<p>面向对象的编程语言具有如下三大特征：</p>
<ul>
<li>封装：将抽象性函数接口的实现细节部分包装、隐藏起来的方法。<br />
具备封装性的面向对象程序设计隐藏了某一方法的具体运行步骤，取而代之的是通过消息传递机制发送消息给它。封装是通过限制只有特定类的对象可以访问这一特定类的成员，而它们通常利用接口实现消息的传入传出。</li>
<li>继承：在某种情况下，一个类会有“子类”。子类比原本的类（称为父类）要更加具体化。子类会继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法。</li>
<li>多态：多态的原义是指生物学中表示生物或物种可以具有许多不同的形式或阶段。这个原则也可以应用于面向对象的编程语言，即类的子类可以定义它们自己的唯一行为，但仍然共享父类的一些相同功能。由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应</li>
</ul>
<h3 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h3>
<p>类（class）是创建对象的蓝图，是能描述一类事物行为和状态的模板或者说所创建的对象共同的属性和方法。</p>
<h4 id="字段属性"><a class="markdownIt-Anchor" href="#字段属性"></a> 字段(属性)</h4>
<p>在一个类中定义的字段有两种，一种是实例字段。实例字段的特点是，不同的实例有各自的字段，独立使用互不影响。</p>
<p>另一种使用<code>static</code>修饰的字段是静态字段，也叫类字段。静态字段是类独有的，所有实例都会共享该字段</p>
<p>使用<code>final</code>修饰的字段在初始化后不能被改变</p>
<h4 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类"></a> 抽象类</h4>
<p>使用<code>abstract</code>关键字修饰的类叫抽象类，它可以包含抽象方法。抽象类无法实例化，但可以进行子类化</p>
<ul>
<li>如果一个类包含抽象方法，那么类本身必须则声明为<code>abstract</code></li>
<li>当抽象类被子类化时，其子类需要实现父类中所有的抽象方法，若没有则子类必须声明为<code>abstract</code></li>
<li>抽象类可以包含静态字段和方法，同样使用类名进行引用</li>
<li>抽象类可以实现接口，且不用实现所有方法，但此抽象类的非抽象子类必须实现其接口的所有方法</li>
</ul>
<blockquote>
<p>抽象类被定义为永远不会也不能被实例化为具体对象的一种类。它往往用于定义一种抽象上的概念，在类的继承关系中它往往处在较上层的位置。在程序设计的实践活动中，抽象类与接口存在类似的地方，即它更偏重于对共通的方法和属性进行规约。但与接口存在一个非常大的差异则在于，抽象类往往可以规约一个共同的方法和属性时提供一个对他们的实现。</p>
</blockquote>
<h4 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h4>
<p>使用关键字<code>interface</code>来申明一个接口。接口可以规定方法的原型：方法名、参数列表以及返回类型，但不能规定方法的实现</p>
<ul>
<li>一个类只能有一个父类，但可以实现（implements）多个接口。即“单继承，多实现”</li>
<li>接口默认是抽象的，声明接口的时候不需要使用abstract关键字。</li>
<li>接口中的方法默认也是抽象的，所以方法的abstract关键字也不需要。</li>
<li>接口中的所有方法默认是public的。所以不需要使用public关键字（用了也不影响，编译器会忽略）</li>
<li>接口可以继承（extends）其他接口，类似于子类继承父类，相当于扩展了接口的方法</li>
</ul>
<h5 id="比较接口与抽象类"><a class="markdownIt-Anchor" href="#比较接口与抽象类"></a> 比较接口与抽象类</h5>
<table>
<thead>
<tr>
<th></th>
<th>接口</th>
<th>抽象类</th>
</tr>
</thead>
<tbody>
<tr>
<td>实例化</td>
<td>不能</td>
<td>不能</td>
</tr>
<tr>
<td>定义字段</td>
<td>所有字段均为public、static和final的</td>
<td>可以声明非静态和final的</td>
</tr>
<tr>
<td>定义方法</td>
<td>所有方法均为public的</td>
<td>支持所有访问修饰符的方法</td>
</tr>
<tr>
<td>继承</td>
<td>只能继承接口</td>
<td>单继承</td>
</tr>
<tr>
<td>实现</td>
<td>可以实现多个接口</td>
<td>可以实现多个接口</td>
</tr>
</tbody>
</table>
<p><strong>使用抽象类还是接口？</strong></p>
<ul>
<li>使用抽象类：当需要在几个密切相关的类之间共享代码，或者需要除public之外的访问修饰符(例如protected和private)，或需要声明非static或非final字段时</li>
<li>使用接口：会有不相关的类将实现你的接口，或指定特定数据类型的行为，但不关心谁实现其行为，以及想要利用类的多重继承机制时</li>
</ul>
<h4 id="嵌套类"><a class="markdownIt-Anchor" href="#嵌套类"></a> 嵌套类</h4>
<blockquote>
<p>嵌套类分为两类：静态和非静态。声明为 <code>static</code> 的嵌套类称为静态嵌套类(static nested classes)。非静态嵌套类称为内部类(inner classes)。</p>
</blockquote>
<h5 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h5>
<p>内部类即在类中定义的类</p>
<p>要实例化内部类，必须先实例化外部类，然后通过外部类的实例来实例化内部类。内部类可以直接访问外部类的方法和字段（包括private的）。但是由于内部类与实例相关联，所以无法定义任何静态字段或方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">OuterClass</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>(<span class="string">&quot;outerClass&quot;</span>);</span><br><span class="line">		OuterClass.<span class="type">InnerClass</span> <span class="variable">in</span> <span class="operator">=</span> out.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">		in.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">OuterClass</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        	<span class="keyword">static</span> <span class="type">int</span> i; <span class="comment">// error</span></span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;InnerClass&quot;</span> + name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="静态内部类"><a class="markdownIt-Anchor" href="#静态内部类"></a> 静态内部类</h5>
<p>可以用<code>static</code>修饰内部类使其成为静态内部类。同样的，使用静态内部类，需要通过外部类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		OuterClass.<span class="type">InnerClass</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>.InnerClass();</span><br><span class="line">		in.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;InnerClass&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="局部类"><a class="markdownIt-Anchor" href="#局部类"></a> 局部类</h5>
<p>也叫本地类（local class），是一种在方法体中，for 循环或 if 子句中定义的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">LocalClass</span> &#123;</span><br><span class="line">			<span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">					System.out.println(arg);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">LocalClass</span>().list();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>局部类可以访问局部变量。但是只能访问 final 或 effectively final (实际上 final，在初始化之后其值永远不会更改的) 的封闭块的局部变量和参数。</li>
<li>在方法中声明的局部类可以访问方法的参数</li>
<li>局部类与内部类类似，无法定义或声明任何静态字段或方法</li>
<li>不能在一个语句块内声明一个接口，因为接口本质上是静态的（不能被实例化）</li>
<li>局部类可以有静态字段，前提是它们是常量，即使用<code>final static</code>修饰</li>
</ul>
<h5 id="匿名类"><a class="markdownIt-Anchor" href="#匿名类"></a> 匿名类</h5>
<p>不能实例化接口，但可以使用匿名类的方式来创建接口的对象。只会使用一次的局部类可以更改成匿名类，它能够同时声明和实例化一个要实现的接口或要继承的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Anonymous</span> <span class="variable">anonymous</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Anonymous</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Anonymous&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		anonymous.say();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Anonymous</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不能在匿名类中声明构造函数</li>
<li>匿名类的主体中可以声明方法，但不能使用语句</li>
<li>局部类是类声明，但匿名类是表达式，所以它必须是语句的一部分，即末尾需要有一个分号</li>
<li>与局部类相同，无法在匿名类中定义或声明任何静态字段或方法</li>
<li>但同样的，可以具有<code>final static</code>修饰的常量</li>
</ul>
<hr />
<p>有这么多不同类型的嵌套类，那何时使用嵌套类，局部类，匿名类呢？</p>
<blockquote>
<p>当需要声明字段或其他方法，使用匿名类</p>
<p>当需要创建多个类的实例，访问其构造方法或引入新的类时，使用局部类</p>
<p>如果需求与局部类相似，但希望更广泛地使用，并且不需要访问局部变量或方法参数时，且需要访问非公共字段和方法时，使用非静态嵌套类（内部类），否则使用静态嵌套类</p>
</blockquote>
<h4 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h4>
<p>枚举是一种特殊的类，使用<code>enum</code>关键字定义，它使变量成为一组预定义的常量，使用时变量必须等于其预定义的值之一。因为是常量，所以枚举的字段名称通常全为大写字母。</p>
<blockquote>
<p>所有枚举隐式继承 java.lang.Enum。因为一个类只能继承一个父类，所以枚举不能继承任何其他类。<br />
枚举类型的构造函数必须是包私有或私有访问，它会在枚举主体开头自动创建定义的常量。你不能自己调用枚举的构造函数。<br />
可以声明枚举的实例，但不能实例化枚举类型，即不能使用new操作符创建枚举实例</p>
</blockquote>
<p>可以在枚举类主体内定义方法和其他字段。或者定义枚举常量的字段值，（在常量创建时）使用构造函数将这些值传递给枚举常量。<br />
必须在任何字段或方法之前首先定义常量。此外，当存在字段和方法时，枚举常量列表必须以分号结尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">	BLACK(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">	WHITE(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>),</span><br><span class="line">	YELLOW(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> r;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> g;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">	Color(<span class="type">int</span> r, <span class="type">int</span> g, <span class="type">int</span> b) &#123;</span><br><span class="line">		<span class="built_in">this</span>.r = r;</span><br><span class="line">		<span class="built_in">this</span>.g = g;</span><br><span class="line">		<span class="built_in">this</span>.b = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getR</span><span class="params">()</span> &#123; <span class="keyword">return</span> r; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getG</span><span class="params">()</span> &#123; <span class="keyword">return</span> g; &#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getB</span><span class="params">()</span> &#123; <span class="keyword">return</span> b; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>枚举类的字段也可以是非final类型，即可以在运行期修改，但是不推荐这样做</strong></p>
<p>编译器在创建枚举时会自动添加一些特殊的方法</p>
<ul>
<li>
<p>静态方法<code>values()</code>：该方法返回一个数组，此数组按照声明的顺序包含了枚举的所有值。此方法通常用于迭代枚举类型的值</p>
</li>
<li>
<p>常量的final方法<code>name()</code>：返回当前枚举常量的名称，与枚举中声明的名称完全相同</p>
</li>
<li>
<p>常量的final方法<code>ordinal()</code>：返回此枚举常量的序号（其在枚举声明中的位置，从0开始）。大多数情况下不会使用这种方法，它被设计用于复杂的基于枚举的数据结构</p>
</li>
</ul>
<blockquote>
<p>因<code>toString()</code>方法可被重写，所以当需要枚举常量的原始名称时，应使用<code>name()</code>方法；需要具有可读性时，使用<code>toString()</code>方法</p>
</blockquote>
<h3 id="对象实例"><a class="markdownIt-Anchor" href="#对象实例"></a> 对象(实例)</h3>
<p>对象是类的一个实例，有状态和行为。一个典型的 Java 程序会创建许多对象，它们通过调用方法进行交互。通过这些对象的交互程序可以执行各种任务</p>
<p>使用<code>new</code>操作符从一个类中创建一个对象，对象名作为<a href="#%E6%A0%87%E8%AF%86%E7%AC%A6">标识符</a>需要符合其命名规则。<code>new</code>操作符通过为新对象分配内存并返回对该内存的引用来实例化一个类。<code>new</code>操作符也会调用对象的构造函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Type name = new Constructor(zero or more parameters);</span><br></pre></td></tr></table></figure>
<h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3>
<blockquote>
<p>方法（Method）指的是对象（所谓的实例方法）的一种子程序。形同面向过程编程里的函数，一个方法通常以一系列的语句所组成，并以之完成一个动作。其可以借由输入一组参数以制订所需的动作，且一部分的方法可能会有输出值（返回值）。方法的目的是提供一个机制，以访问（对于读和写）对象的私有资料存储区。</p>
</blockquote>
<p>方法声明的必需元素包括方法的返回类型、名称、一对括号 <code>()</code>， 以及在大括号 <code>&#123;&#125;</code> 之间的方法主体。完整的方法声明有以下6个部分：</p>
<ol>
<li>访问修饰符（如 <code>public</code>，<code>private</code>）</li>
<li>方法返回的值的数据类型，如果该方法不需要返回值，则为<code>void</code></li>
<li>方法名称，规范与<a href="#%E6%A0%87%E8%AF%86%E7%AC%A6">标识符</a>类似，但略有不同</li>
<li>括号中的形式参数列表，以逗号分割并以它们的数据类型为开头，由括号<code>()</code>括起来。如果没有参数，则必须使用空括号</li>
<li>一个异常列表，以<code>throws</code>声明并以逗号分割的异常类型，说明这个方法可能会抛出的一个或多个异常</li>
<li>方法体，在括号<code>&#123;&#125;</code>之间的代码，其中可以包括局部变量的声明</li>
</ol>
<blockquote>
<p>方法名称和参数类型构成为方法的签名（signature）</p>
</blockquote>
<h4 id="方法的参数"><a class="markdownIt-Anchor" href="#方法的参数"></a> 方法的参数</h4>
<p>除了普通的方法参数外，有一种特殊的参数叫可变参数：可以在参数列表的<strong>最后一个</strong>参数的类型后面使用三个点(<code>...</code>)，空格和参数名称来创建可变数量的参数方式，当不清楚有多少特定类型的参数会传递给该方法时，就可以使用可变参数，这是手动创建数组的快捷方式，可以传入任意数量的参数来调用该方法，包括零个。</p>
<p>可以将任何数据类型用于方法的参数，但需要注意</p>
<ul>
<li>基本数据类型（如int、double）通过值传递到方法中，这意味着对参数值的任何更改仅存在于该方法的范围内，当该方法返回时，参数将消失，对其进行的任何更改都将丢失。</li>
<li>引用数据类型（对象、数组）也是通过值传递到方法中。这意味着当方法返回时，传入的引用仍然引用与之前相同的对象。所以，如果对象的字段值具有适当的访问级别，则可以在该方法中更改该字段。</li>
</ul>
<p>运行以下程序，其中point对象的字段值x与y变化了，但是i还是原来的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	movePoint(point, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">movePoint</span><span class="params">(Point p, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">	p.move(i, i);</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;move over&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法</h4>
<p>又叫构造函数，类似于一般的方法，除了<strong>命名与类名相同并且没有返回类型</strong>，它是在创建一个类的实例时自动调用的。可以使用构造函数来初始化实例的字段</p>
<p>编译器会自动为任何没有构造函数的类提供一个无参数的默认构造函数。这个默认构造函数将调用父类的无参构造函数。在这种情况下，如果超类没有无参构造函数，编译器会发出警告，因此你必须确认它是否存在。没有显式父类时，隐式父类为<code>Object</code>，其有一个无参的构造函数。</p>
<p>子类继承父类时，创建子类对象会先调用父类构造方法再调用子类的构造方法</p>
<blockquote>
<p>如果一个类的构造函数不能被调用，那么它就不能直接创建对象。</p>
</blockquote>
<h4 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法</h4>
<p>使用<code>static</code>修饰的方法就叫静态方法，或者类方法。一个典型的例子：作为程序入口的main方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>调用实例方法必须通过一个实例变量，而调用静态方法则不需要实例变量，通过类名就可以调用。静态方法更类似于其它编程语言的函数</p>
<p><strong>静态方法内只能访问静态字段</strong></p>
<h4 id="方法重载"><a class="markdownIt-Anchor" href="#方法重载"></a> 方法重载</h4>
<blockquote>
<p>方法重载（Overload）：当存在多个同名方法但方法之间形式参数的数据类型不同或数量不同时，即为方法重载。</p>
</blockquote>
<ul>
<li>重载的方法的返回值可以不同，但是如果重载的方法之间只有返回值不同就不足以构成重载。因为编译器在区分不同的重载方法时不考虑返回类型，所以即使它们具有不同的返回类型，也不能声明具有相同签名（即方法名称和参数类型）的两个方法。</li>
<li>访问修饰符也可以不同，规则同上，如果仅有访问修饰符不同就不能构成重载</li>
<li>重载的方法可以声明新的或更多的抛出异常</li>
<li>不能声明多个具有相同名称和相同数量与类型的参数的方法，因为编译器无法区分</li>
<li>构造方法也可以重载，重载方式与普通方法的重载形式一样，唯一不同的是没有返回值的声明</li>
</ul>
<h4 id="方法重写覆写"><a class="markdownIt-Anchor" href="#方法重写覆写"></a> 方法重写(覆写)</h4>
<blockquote>
<p>方法重写（Override）：子类通过提供与父类（超类）中的方法具有相同签名（名称和参数）以及相同返回类型的方法，子类中的实现将覆盖父类（超类）中的实现，这种子类方法的实现就叫方法重写。具体执行的方法将由调用该方法的对象确定。</p>
</blockquote>
<ul>
<li>重写方法时，使用<code>@Override</code>注解用来指示编译器将要覆盖父类中的方法。如果重写的方法没有使用此注解，编译不会报错；如果被重写的方法不存在且子类方法使用了此注解，编译则报错</li>
<li>重写的方法不能抛出新的异常或者比被重写的方法申明范围更广的异常</li>
<li>被<code>final</code>关键字修饰的方法不能被重写</li>
<li>重写的方法的访问权限不能比父类中被重写的方法的访问权限低（public&gt;protected&gt;package&gt;private）</li>
<li>参考<a href="#%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E8%AE%BF%E9%97%AE%E8%8C%83%E5%9B%B4">修饰符的访问范围</a>：如子类与父类在同一个包中，那么子类可以重写父类无访问修饰符的方法，若不再同一个包中则不行</li>
<li>如果不能继承一个类（被<code>final</code>修饰），则不能重写该类的方法</li>
<li>重写方法还可以返回由被重写方法返回类型的子类型。此子类型称为协变（covariant）返回类型</li>
<li>使用<code>super</code>关键字在子类中调用父类的被重写方法，使用<code>super(参数列表)</code>调用父类的构造方法</li>
<li>子类可以重载（Overload）从超类继承的方法，这样的重载方法既不隐藏也不覆盖超类实例方法，它们是新方法，对于子类是唯一的。</li>
</ul>
<h5 id="被隐藏的方法"><a class="markdownIt-Anchor" href="#被隐藏的方法"></a> 被隐藏的方法</h5>
<blockquote>
<p>如果子类定义的静态方法与父类中的静态方法具有相同的签名（名称和参数），则子类方法隐藏父类中的方法。</p>
</blockquote>
<ul>
<li>因为通过实例进行调用，所以被调用的重写实例方法的是子类中的方法。</li>
<li>因为静态方法总是通过类名来进行调用，所以被调用的隐藏静态方法取决于它是从父类还是从子类调用的。</li>
</ul>
<p>以下代码中<code>Main</code>类包含一个实例方法和一个静态方法以及用于程序入口的main方法，<code>SubMain</code>继承了<code>Main</code>类，它重写<code>Main</code>了中的实例方法，并隐藏<code>Main</code>中的静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubMain</span>();</span><br><span class="line">		Main.testStaticMethod();</span><br><span class="line">		m.testMethod();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Main - testMethod&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Main - testStaticMethod&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubMain</span> <span class="keyword">extends</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;subMain - testMethod&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStaticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;subMain - testStaticMethod&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<img src="image-20210325222315531.png" alt="image-20210325222315531" /></p>
<hr />
<p>定义与父类的方法具有相同签名的方法时会发生的情况：</p>
<table>
<thead>
<tr>
<th></th>
<th>父类实例方法</th>
<th>父类静态方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>子类实例方法</td>
<td>重写（Overrides）</td>
<td>编译报错</td>
</tr>
<tr>
<td>子类静态方法</td>
<td>编译报错</td>
<td>隐藏（Hide）</td>
</tr>
</tbody>
</table>
<h4 id="接口方法"><a class="markdownIt-Anchor" href="#接口方法"></a> 接口方法</h4>
<p>实现接口的类必须实现接口中声明的所有方法</p>
<ul>
<li>重写的方法不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常</li>
<li>重写的方法要保持与接口中一致的方法名，并且应该保持相同或者相兼容的返回值类型</li>
<li>接口中的静态方法永远不会被继承</li>
</ul>
<h5 id="默认方法"><a class="markdownIt-Anchor" href="#默认方法"></a> 默认方法</h5>
<p>默认方法是接口中可以有方法体的方法之一，其使用<code>default</code>关键字修饰。作用在于提供给实现类可选的实现方法，而不是必选项，在接口中可以有其默认的实现</p>
<p>默认方法在被实现类重写时，形式与接口方法一样，而无需继续使用<code>default</code>关键字</p>
<p>默认方法的方便之处在于，当一个接口需要扩展方法时，需要对每一个已实现接口的类进行方法补充，而默认方法则避免了这一问题的产生</p>
<p>当一个接口继承包含默认方法的接口时，可以执行以下操作：</p>
<ul>
<li>不提及默认方法，它允许继承的接口继承默认方法。</li>
<li>使用<code>abstract</code>重新声明默认方法。</li>
<li>重新定义默认方法，将重写该方法。</li>
</ul>
<h5 id="接口的静态方法"><a class="markdownIt-Anchor" href="#接口的静态方法"></a> 接口的静态方法</h5>
<p>除了默认方法，还可以在接口中定义静态方法。与默认方法不同的是，<strong>接口中的静态方法永远不会被继承</strong>，因为静态方法是一种与定义它的类相关联的方法，而不是与任何对象相关联的方法，类的每个实例都共享其静态方法。</p>
<hr />
<p>默认方法、抽象方法与实例方法一样都可以被继承。但是，当类或接口的超类提供具有相同签名的多个默认方法时，编译器将遵循以下两个规则来解决名称冲突：</p>
<ol>
<li>
<p>实例方法优于接口默认方法。下列代码输出为software</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Software</span> <span class="keyword">implements</span> <span class="title class_">Game</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">		System.out.println(main.myName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Software</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;software&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">	<span class="keyword">default</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;game&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>已被其他候选覆盖的方法将被忽略。即A类实现B接口，B接口继承了C接口，B接口与C接口均有相同的默认方法时，就会出现这种情况，因为此时B接口的方法被解释为重写了C接口的方法。下列代码输出为mobile game</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">MobileGame</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">		System.out.println(main.myName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">	<span class="keyword">default</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;game&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobileGame</span> <span class="keyword">extends</span> <span class="title class_">Game</span>&#123;</span><br><span class="line">	<span class="keyword">default</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;mobile game&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果两个或多个独立定义的默认方法冲突，或者默认方法与抽象方法冲突，则会产生编译错误，此时必须显式覆盖超类的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">MobileGame</span>, ComputerGame&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Main&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerGame</span> &#123;</span><br><span class="line">	<span class="keyword">default</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;computer game&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MobileGame</span> &#123;</span><br><span class="line">	<span class="keyword">default</span> String <span class="title function_">myName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;mobile game&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="抽象方法"><a class="markdownIt-Anchor" href="#抽象方法"></a> 抽象方法</h4>
<p>抽象方法指只有方法声明，而没有具体方法体的方法(没有大括号，后跟分号)。只会存在于抽象类或接口中</p>
<h3 id="包及类的访问作用域"><a class="markdownIt-Anchor" href="#包及类的访问作用域"></a> 包及类的访问作用域</h3>
<p>与命名空间（namespace）类似，可以把不同的类放进包（package）来进行管理，在类文件的第一条语句使用<code>package 包路径</code>来声明类所在的包，使用<code>import 类的完整路径</code>来导入其它包的类，或者<code>import static 类的完整路径.静态变量或方法</code>来导入类的静态变量或方法</p>
<p>不同包中的类名可以相同，但是同时调用不同包中的同名类时需要将其中一个加上包名（完整路径）进行区分</p>
<p>java会默认导入<code>java.lang</code>包下的所有类</p>
<p>类的访问作用域参考<a href="#%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E8%AE%BF%E9%97%AE%E8%8C%83%E5%9B%B4">修饰符的访问范围</a></p>
<h2 id="常用核心类"><a class="markdownIt-Anchor" href="#常用核心类"></a> 常用核心类</h2>
<blockquote>
<p><code>java.lang</code>和<code>java.util</code>包提供了几乎所有应用程序都会使用到的基本功能，以<code>java.lang</code>和<code>java.util</code>开头的软件包则为特定功能提供了补充API。</p>
</blockquote>
<h3 id="字符串string"><a class="markdownIt-Anchor" href="#字符串string"></a> 字符串String</h3>
<p>字符串广泛应用于编程中，在java里String属于引用类型（不是基本数据类型），但编译器会对其做特殊处理。</p>
<p>使用双引号<code>&quot;&quot;</code>来直接创建一个字符串，或者通过<code>new</code>关键字调用构造方法来创建，区别在于当内容相同时前者在引用上是相同的，而后者不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">	System.out.println(str1 == str2);</span><br><span class="line">	System.out.println(str3 == str4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上程序输出<img src="image-20210327235754443.png" alt="image-20210327235754443" /></p>
<ul>
<li>
<p>比较两个字符串对象的内容是否相等，必须使用<code>equals()</code>方法（String类重写了此方法，其按字符逐个比较），<code>==</code>作用于对象只能比较引用是否相同<br />
所以空字符串<code>&quot;&quot;</code>和空对象<code>null</code>是两个概念，在判断一个字符串是否为空前，要先判断对象是否为空，否则会产生<code>NullPointerException</code>异常</p>
</li>
<li>
<p>String类是final的，所以不能被继承。同时字符串也是常量，即不可变的，因为其内部使用一个<code>private final char value[]</code>字段作为字符存储管理，即对原字符串做的任何处理都会创建一个新的引用对象，并且不会改变原字符串<br />
<img src="image-20210328194831344.png" alt="image-20210328194831344" /></p>
</li>
<li>
<p>使用<code>+</code>运算符来连接字符串，并且也对其他对象转换为字符串提供了特殊支持。下面的代码被编译为字节码后，使用<code>javap -verbose class文件名</code>命令解析后可知，在执行时，字符串连接是通过<code>StringBuilder</code>（或<code>StringBuffer</code>）类及其<code>append()</code>方法实现的。字符串转换是通过<code>toString()</code>方法实现的（该方法由<code>Object</code>定义并由Java中的所有类继承）</p>
</li>
</ul>
<p><img src="image-20210329012311006.png" alt="image-20210329012311006" /></p>
<p>一些常用的字符串方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public char charAt(int index)</td>
<td style="text-align:left">返回指定索引位置的字符值</td>
</tr>
<tr>
<td>public int compareTo(String anotherString)</td>
<td style="text-align:left">按字典顺序比较两个字符串（基于Unicode值）。如果String对象按字典顺序排列在anotherString之前，结果为负整数，否则为正整数。如果字符串相等，则为0</td>
</tr>
<tr>
<td>public int compareToIgnoreCase(String str)</td>
<td style="text-align:left">同上，但忽略大小写</td>
</tr>
<tr>
<td>public String concat(String str)</td>
<td style="text-align:left">等同于<code>+</code>，将指定的字符串连接到原字符串的末尾，将会返回新的字符串</td>
</tr>
<tr>
<td>public boolean contains(CharSequence s)</td>
<td style="text-align:left">当且仅当此字符串包含指定的字符时，返回true</td>
</tr>
<tr>
<td>public boolean endsWith(String suffix)</td>
<td style="text-align:left">检查字符串是否以指定的后缀结尾</td>
</tr>
<tr>
<td>public boolean equals(Object anObject)</td>
<td style="text-align:left">将此字符串与指定对象进行比较，当且仅当对象为String类型和内容相等时，返回true</td>
</tr>
<tr>
<td>public boolean equalsIgnoreCase(String anotherString)</td>
<td style="text-align:left">同上，但忽略大小写</td>
</tr>
<tr>
<td>public static String format(String format, Object… args)</td>
<td style="text-align:left">使用指定的格式字符串和参数返回格式化的字符串。<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html">格式化语法参考</a></td>
</tr>
<tr>
<td>public int indexOf(int ch)</td>
<td style="text-align:left">返回指定字符第一次出现在此字符串中的位置，没有则返回-1</td>
</tr>
<tr>
<td>public int indexOf(int ch, int fromIndex)</td>
<td style="text-align:left">同上，但指定开始位置</td>
</tr>
<tr>
<td>public int indexOf(String str)</td>
<td style="text-align:left">返回指定字符串第一次出现在此字符串中的位置，没有则返回-1</td>
</tr>
<tr>
<td>public int indexOf(String str, int fromIndex)</td>
<td style="text-align:left">同上，但指定开始位置</td>
</tr>
<tr>
<td>public int length()</td>
<td style="text-align:left">返回此字符串的长度</td>
</tr>
<tr>
<td>public boolean isEmpty()</td>
<td style="text-align:left">当且仅当字符串长度为0时返回true（不能用于判断对象是否为空）</td>
</tr>
<tr>
<td>public static String join(CharSequence delimiter, CharSequence… elements)</td>
<td style="text-align:left">返回一个由指定元素和分隔符组成的字符串</td>
</tr>
<tr>
<td>public int lastIndexOf(int ch)</td>
<td style="text-align:left">返回指定字符最后一次出现在此字符串中的位置，没有则返回-1</td>
</tr>
<tr>
<td>public int lastIndexOf(int ch, int fromIndex)</td>
<td style="text-align:left">同上，但指定开始位置</td>
</tr>
<tr>
<td>public int lastIndexOf(String str)</td>
<td style="text-align:left">返回指定字符串最后一次出现在此字符串中的位置，没有则返回-1</td>
</tr>
<tr>
<td>public int lastIndexOf(String str, int fromIndex)</td>
<td style="text-align:left">同上，但指定开始位置</td>
</tr>
<tr>
<td>public boolean matches(String regex)</td>
<td style="text-align:left">判断此字符串是否与给定的正则表达式匹配</td>
</tr>
<tr>
<td>public String replace(char oldChar, char newChar</td>
<td style="text-align:left">将旧字符替换为新字符并返回一个新字符串</td>
</tr>
<tr>
<td>public String replace(CharSequence target, CharSequence replacement)</td>
<td style="text-align:left">将旧字符序列替换为新字符序列并返回一个新字符串</td>
</tr>
<tr>
<td>public String[] split(String regex)</td>
<td style="text-align:left">使用给定正则表达式将字符串拆分为字符串数组</td>
</tr>
<tr>
<td>public boolean startsWith(String prefix)</td>
<td style="text-align:left">检查字符串是否以指定的前缀开始</td>
</tr>
<tr>
<td>public String substring(int beginIndex)</td>
<td style="text-align:left">从给定位置开始到结尾返回一个子字符串</td>
</tr>
<tr>
<td>public String substring(int beginIndex, int endIndex)</td>
<td style="text-align:left">从给定位置开始到给定结束位置返回一个子字符串</td>
</tr>
<tr>
<td>public char[] toCharArray()</td>
<td style="text-align:left">将此字符串转换为新的字符数组。</td>
</tr>
<tr>
<td>public String toLowerCase()</td>
<td style="text-align:left">将所有字符串转换为小写</td>
</tr>
<tr>
<td>public String toUpperCase()</td>
<td style="text-align:left">将所有字符串转换为大写</td>
</tr>
<tr>
<td>public String trim()</td>
<td style="text-align:left">返回去除前导空白和尾随空白后的字符串，包括空格，<code>\t</code>，<code>\r</code>，<code>\n</code>，<code>\u3000</code>（全角空格）</td>
</tr>
<tr>
<td>public static String valueOf(Object obj)</td>
<td style="text-align:left">将对象转换为字符串，其提供有不同数据类型参数的共9种重载方法</td>
</tr>
</tbody>
</table>
<h4 id="stringbuffer"><a class="markdownIt-Anchor" href="#stringbuffer"></a> StringBuffer</h4>
<p>由于字符串是不可变对象，对字符串进行反复修改操作时，会产生许多临时对象，这样会浪费内存以及影响垃圾回收的效率，所以更有效率的字符串修改推荐使用StringBuffer和StringBuilder类。<br />
效率比较：</p>
<p><img src="image-20210329224849408.png" alt="image-20210329224849408" /></p>
<p>StringBuffer和StringBuilder类的区别在于，前者于JDK1.0推出，是线程安全的（同步访问），而后者于JDK1.5推出，非线程安全但执行效率更高。在大多数情况下，建议优先使用StringBuilder类</p>
<h4 id="stringbuilder"><a class="markdownIt-Anchor" href="#stringbuilder"></a> StringBuilder</h4>
<p>创建一个StringBuilder对象需要使用<code>new</code>操作符调用构造方法，构造方法有以下四种：</p>
<ul>
<li><code>StringBuilder()</code>：构造一个不包含任何字符且初始容量为16个字符的StringBuilder对象</li>
<li><code>StringBuilder(CharSequence seq)</code>：以指定字符序列内容构造一个StringBuilder对象，其初始容量为字符序列参数的长度加16</li>
<li><code>StringBuilder(int capacity)</code>：构造一个不包含任何字符且指定初始容量的StringBuilder对象</li>
<li><code>StringBuilder(String str)</code>：以指定字符串构造一个StringBuilder对象，其初始容量为字符串参数的长度加16</li>
</ul>
<p>方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public StringBuilder append(String str)</td>
<td>包括基本数据类型在内共13种重载方法。将指定的数据追加到此序列，其长度会随参数的长度自动增加。 若参数为null ，则将字符<code>null</code>附加到此序列。</td>
</tr>
<tr>
<td>public StringBuilder delete(int start, int end)</td>
<td>删除从start开始到end-1处的字符串，即[start, end)</td>
</tr>
<tr>
<td>public StringBuilder deleteCharAt(int index)</td>
<td>删除指定位置处的字符</td>
</tr>
<tr>
<td>public int indexOf(String str)</td>
<td>返回指定字符第一次出现在此字符串中的位置，没有则返回-1</td>
</tr>
<tr>
<td>public int indexOf(String str, int fromIndex)</td>
<td>同上，但指定开始位置</td>
</tr>
<tr>
<td>public StringBuilder insert(int offset, String str)</td>
<td>包括基本数据类型在内共12种重载方法。将指定的数据按指定的位置插入此字符序列。并将原来在该位置右面的所有字符后移，并将此序列的长度增加参数的长度。 如果参数为null ，则将字符<code>null</code>插入到此序列中</td>
</tr>
<tr>
<td>public int lastIndexOf(String str)</td>
<td>返回指定字符最后一次出现在此字符串中的位置，没有则返回-1</td>
</tr>
<tr>
<td>public int lastIndexOf(String str, int fromIndex)</td>
<td>同上，但指定开始位置</td>
</tr>
<tr>
<td>public StringBuilder replace(int start, int end, String str)</td>
<td>用指定字符串替换此序列指定开始到结束位置的子字符串</td>
</tr>
<tr>
<td>public StringBuilder reverse()</td>
<td>反转字符串</td>
</tr>
</tbody>
</table>
<h4 id="stringjoiner"><a class="markdownIt-Anchor" href="#stringjoiner"></a> StringJoiner</h4>
<p>当需要拼接一个带前缀、后缀和使用分隔符分割每个子字符串的字符串时，可以使用StringJoiner。它有两个构造方法：</p>
<ul>
<li><code>StringJoiner(CharSequence delimiter)</code>：以指定分隔符构造一个不带前缀、后缀的StringJoiner对象</li>
<li><code>StringJoiner(CharSequence delimiter,  CharSequence prefix, CharSequence suffix)</code>：以指定分隔符、前缀和后缀构造一个StringJoiner对象</li>
</ul>
<p>以及几个实例方法：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>public StringJoiner add(CharSequence newElement)</td>
<td>将给定字符序列值添加为StringJoiner的下一个元素。 如果newElement为null ，则添加字符串<code>null</code></td>
</tr>
<tr>
<td>public int length()</td>
<td>返回此StringJoiner的String表示形式的长度</td>
</tr>
<tr>
<td>public StringJoiner merge(StringJoiner other)</td>
<td>与另一个StringJoiner的元素合并，不使用other的前缀和后缀，但使用other的分隔符作为连接</td>
</tr>
</tbody>
</table>
<hr />
<p>图：String、StringBuilder、StringBuffer类的继承与接口关系</p>
<p><img src="CharSequence.jpg" alt="CharSequence" /></p>
<h3 id="引用类型包装类"><a class="markdownIt-Anchor" href="#引用类型包装类"></a> 引用类型(包装类)</h3>
<p>因为面向对象编程语言的特性，所以Java为每个基本数据类型都设计了其对应的引用类型（或者说基础类型的包装类），便于将数据视为对象使用</p>
<table>
<thead>
<tr>
<th style="text-align:left">基本数据类型</th>
<th style="text-align:left">对应的引用类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">java.lang.Boolean</td>
</tr>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">java.lang.Byte</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">java.lang.Short</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">java.lang.Integer</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">java.lang.Long</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">java.lang.Float</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">java.lang.Double</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">java.lang.Character</td>
</tr>
</tbody>
</table>
<p>可以给引用对象赋值为<code>null</code>，但不能将基本类型赋值为<code>null</code>。包装类也和<code>String</code>具有相同的设计，被<code>final</code>修饰所以不能被继承，以及内部使用一个<code>private final</code>修饰的对应基本类型的<code>value</code></p>
<p>除了<code>Character</code>只有第一个以外每个包装类都有两个构造方法</p>
<ol>
<li>根据基本类型创建包装类对象</li>
<li>根据字符串创建包装类对象</li>
</ol>
<p>对于第二种构造方法，不同的引用类型有不同的处理方法，所有的整数类型必须是十进制格式，浮点数类型可以使用科学计数法，否则会抛出<code>NumberFormatException</code>异常；<code>Boolean</code>会把除了“true”以外的字符串都转换为<code>false</code></p>
<ul>
<li>
<p>字段：包装类中也定义了一些静态常量字段，如类型所占二进制位数<code>SIZE</code>，字节数<code>BYTES</code>，最大值<code>MAX_VALUE</code>，最小值<code>MIN_VALUE</code>，浮点数类型还有<code>NaN</code>（非数字），正无穷<code>POSITIVE_INFINITY</code>以及负无穷<code>NEGATIVE_INFINITY</code></p>
</li>
<li>
<p>方法：整数与浮点数包装类继承自<code>Number</code>类，重写了<code>xxxValue()</code>方法所以可以把包装类对象转换为其它基本类型的数据，实际上还是强制类型转换<br />
所有包装类都实现了<code>Comparable</code>接口重写<code>compareTo()</code>方法，用以比较两个包装类的值的大小</p>
</li>
</ul>
<blockquote>
<p>虽然都是用于类型转换的方法，但<code>valueOf(String s)</code>和<code>parseXxx(String s)</code>是有区别的：前者返回包装类型，后者返回基本类型，并且<code>valueOf(String s)</code>会调用<code>parseXxx(String s)</code>方法	所以建议优先使用<code>parseXxx(String s)</code>方法</p>
</blockquote>
<h4 id="自动装箱拆箱"><a class="markdownIt-Anchor" href="#自动装箱拆箱"></a> 自动装箱&amp;拆箱</h4>
<p>从基本类型转换到引用类型这一过程叫“装箱”，反正则是“拆箱”，因为Java编译器自动在基本类型和引用类型之间进行转型，所以被称为自动装箱（Auto Boxing）和自动拆箱（Auto Unboxing）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// Auto Boxing</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a; <span class="comment">// Auto Unboxing</span></span><br></pre></td></tr></table></figure>
<p>在编译后实际执行的字节码中，是严格区分基本类型和引用类型的，所以自动装箱和自动拆箱只会发生在编译过程中。</p>
<p>因为可以给对象赋值为<code>null</code>，而不能给基本类型<code>null</code>值，所以自动拆箱时可能会引发<code>NullPointerException</code></p>
<h4 id="整数缓存机制"><a class="markdownIt-Anchor" href="#整数缓存机制"></a> 整数缓存机制</h4>
<p>在所有整数引用类型（Byte、Short、Integer、Long）中，都有一个名字带有<code>Cache</code>的私有静态内部类，其用于存储**-127~128**之间的数值，因为java认为这个范围的数据使用是最频繁的，将其生成的包装类对象存储在方法区的常量池中共享可以增加程序执行的效率</p>
<p>如图，若没有缓存机制，则a == b也是false</p>
<p><img src="image-20210401232451010.png" alt="image-20210401232451010" /></p>
<blockquote>
<p>缓存以支持<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.7">JLS</a>（java语言规范-5.1.7装箱转换）要求的-128到127（含）之间的值的自动装箱的对象标识语义。 首次使用时会初始化缓存。高速缓存的大小可以由-XX:AutoBoxCacheMax=&lt;size&gt;选项控制。 在虚拟机初始化期间，可以在sun.misc.VM类的私有系统属性中设置并保存java.lang.Integer.IntegerCache.high属性。</p>
</blockquote>
<hr />
<p>图：所有包装类的继承与接口关系</p>
<p><img src="Number.png" alt="Number" /></p>
<h3 id="数学计算"><a class="markdownIt-Anchor" href="#数学计算"></a> 数学计算</h3>
<h4 id="math"><a class="markdownIt-Anchor" href="#math"></a> Math</h4>
<p>Math类包含了用于执行基本数学运算的一些属性和方法。</p>
<p>Math类是不可被继承的（被<code>final</code>修饰），无法实例化（private的无参构造方法），所以其大量的方法是静态的，直接调用即可</p>
<p>常量有两个，自然对数<code>E</code>和圆周长与直径的比<code>π</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">E</span> <span class="operator">=</span> <span class="number">2.7182818284590452354</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159265358979323846</span>;</span><br></pre></td></tr></table></figure>
<p>方法示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;-1的绝对值：&quot;</span> + Math.abs(-<span class="number">1</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;2的16次方：&quot;</span> + Math.pow(<span class="number">2</span>, <span class="number">16</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;256的平方根：&quot;</span> + Math.sqrt(<span class="number">256</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;512的立方根：&quot;</span> + Math.cbrt(<span class="number">512</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;1.23向下取整：&quot;</span> + Math.floor(<span class="number">1.23</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;2.22向上取整：&quot;</span> + Math.ceil(<span class="number">2.22</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;3.21四舍五入：&quot;</span> + Math.round(<span class="number">3.21</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;10为底1000的对数：&quot;</span> + Math.log10(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">	<span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> Math.PI;</span><br><span class="line">	System.out.println(<span class="string">&quot;sin(π/2)=&quot;</span> + Math.sin(PI / <span class="number">2</span>));</span><br><span class="line">	System.out.println(<span class="string">&quot;cos(π)=&quot;</span> + Math.cos(PI));</span><br><span class="line">	System.out.println(<span class="string">&quot;tan(0)=&quot;</span> + Math.tan(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210402172925472.png" alt="image-20210402172925472" /></p>
<blockquote>
<p>默认情况下，Math类的多数方法只是简单地调用StrictMath的等效方法。鼓励代码生成器使用特定于平台的本机库或微处理器指令（如果有）来提供Math方法的高性能实现。这种更高性能的实现仍必须符合Math的规范。</p>
</blockquote>
<p>而<code>StrictMath</code>类的一些方法被声明为<code>native</code>且没有方法体，即方法的实现是由其它语言提供的，这一技术叫JNI（Java Native Interface），通过使用Java本地接口书写程序，可以确保代码在不同的平台上具有相同的计算结果，便于移植。通常情况下使用<code>Math</code>就行了</p>
<h4 id="random"><a class="markdownIt-Anchor" href="#random"></a> Random</h4>
<p>Math类仅提供了一个random()方法用以生成[0, 1)之间的随机数，其相当于调用<code>new Random().nextDouble()</code>。而<code>Random</code>类则是专门用于产生随机数的</p>
<p>只有两个构造方法</p>
<ul>
<li>无参构造方法Random()：创建一个新的随机数生成器。该构造方法将使用种子唯一化器与系统纳秒时间值按位异或作为随机数生成器的种子，确保每次调用时都有不同的结果。</li>
<li>Random(long seed)：使用long类型的种子创建一个新的随机数生成器。如果手动指定种子，则随机数生成器对象每次将产生相同的值</li>
</ul>
<p>实例方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">System.out.println(r.nextInt()); <span class="comment">// 生成一个随机整数</span></span><br><span class="line">System.out.println(r.nextLong()); <span class="comment">// 生成一个长整型随机数</span></span><br><span class="line">System.out.println(r.nextFloat()); <span class="comment">// 生成一个单精度浮点随机数</span></span><br><span class="line">System.out.println(r.nextDouble()); <span class="comment">// 生成一个双精度浮点随机数</span></span><br><span class="line">System.out.println(r.nextBoolean()); <span class="comment">// 生成一个随机布尔值</span></span><br><span class="line">System.out.println(r.nextInt(<span class="number">1000</span>)); <span class="comment">// 生成一个0到指定上限范围的随机整数</span></span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">r.nextBytes(b); <span class="comment">// 生成一组随机字节并将其放入提供的字节数组中</span></span><br><span class="line"><span class="comment">// 使用流API来生成指定数量与范围的随机数，并使用lambda表达式输出，不指定数量时，数量为Long类型的最大值</span></span><br><span class="line">r.ints(<span class="number">10</span>, <span class="number">0</span>, <span class="number">100</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h4 id="biginteger"><a class="markdownIt-Anchor" href="#biginteger"></a> BigInteger</h4>
<p>当需要计算的数据范围超过了long型的最大范围2<sup>63</sup>-1时怎么办呢，java提供了一个大整数类型<code>BigInteger</code>用来处理这种情况，其内部使用了一个<code>int[]</code>用来存放数据，和一个<code>int</code>值来表示符号。因为计算机的内存是有限的，所以<code>BigInteger</code>的实现也要求了其最大范围：当结果超出(-2<sup>Integer.MAX_VALUE</sup>, 2<sup>Integer.MAX_VALUE</sup>)时，调用<code>BigInteger</code>的构造函数和操作都将引发<code>ArithmeticException </code></p>
<p>使用<code>BigInteger</code>做计算的时候只能使用实例方法，不能使用运算符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">BigInteger</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;12345678987654321&quot;</span>);</span><br><span class="line">	<span class="type">BigInteger</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;98765432123456789&quot;</span>);</span><br><span class="line">	System.out.println(b1.add(b2)); <span class="comment">// 加</span></span><br><span class="line">	System.out.println(b1.subtract(b2)); <span class="comment">// 减</span></span><br><span class="line">	System.out.println(b1.multiply(b2)); <span class="comment">// 乘</span></span><br><span class="line">	System.out.println(b2.divide(b1)); <span class="comment">// 除</span></span><br><span class="line">	System.out.println(b1.pow(<span class="number">3</span>)); <span class="comment">// 指数值</span></span><br><span class="line">	System.out.println(b2.remainder(b1)); <span class="comment">// 取余</span></span><br><span class="line">	System.out.println(b1.gcd(b2)); <span class="comment">// 求最大公约数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210403165857438.png" alt="image-20210403165857438" /></p>
<h4 id="bigdecimal"><a class="markdownIt-Anchor" href="#bigdecimal"></a> BigDecimal</h4>
<p>和<code>BigInteger</code>类似，因为基本类型的浮点数无法准确的表示其值，所以使用<code>BigDecimal</code>用于处理需要高精度计算的浮点数，内部使用<code>BigInteger</code>值储存数字，<code>int</code>值<code>scale</code>储存小数位数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.456789&quot;</span>);</span><br><span class="line">	<span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;987654.321&quot;</span>);</span><br><span class="line">	System.out.println(b1.scale()); <span class="comment">// 小数位数，负值表示末尾0的个数</span></span><br><span class="line">	System.out.println(b1.add(b2)); <span class="comment">// 加</span></span><br><span class="line">	System.out.println(b1.subtract(b2)); <span class="comment">// 减</span></span><br><span class="line">	System.out.println(b1.multiply(b2)); <span class="comment">// 乘</span></span><br><span class="line">	<span class="comment">// 除法存在除不尽的情况，此时需要使用第二个参数指定精度，第三个参数指定舍入模式</span></span><br><span class="line">	System.out.println(b2.divide(b1, <span class="number">10</span>, BigDecimal.ROUND_UP));</span><br><span class="line">	<span class="comment">// 或者做除法的同时求余数，返回BigDecimal的数组，分别是商和余数</span></span><br><span class="line">	System.out.println(Arrays.toString(b2.divideAndRemainder(b1)));</span><br><span class="line">	<span class="comment">// 比较值时要使用compareTo()方法，equals()会同时比较小数位数</span></span><br><span class="line">	<span class="type">BigDecimal</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.45600&quot;</span>);</span><br><span class="line">	<span class="type">BigDecimal</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.456&quot;</span>);</span><br><span class="line">	System.out.println(b3.compareTo(b4));</span><br><span class="line">	System.out.println(b3.equals(b4));</span><br><span class="line">	<span class="comment">// 去掉末尾的0</span></span><br><span class="line">	System.out.println(b3.stripTrailingZeros());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210403182658582.png" alt="image-20210403182658582" /></p>
<p>舍入模式有下面几种</p>
<ul>
<li><code>ROUND_UP</code>：向零远的方向舍入</li>
<li><code>ROUND_DOWN</code>：向零近的方向舍入</li>
<li><code>ROUND_CEILING</code>：向正无穷的方向舍入</li>
<li><code>ROUND_FLOOR</code>：向负无穷的方向舍入</li>
<li><code>ROUND_HALF_UP</code>：四舍五入</li>
<li><code>ROUND_HALF_DOWN</code>：五舍六入</li>
<li><code>ROUND_HALF_EVEN</code>：需要舍入的上一位若是奇数则四舍五入，若是偶数则五舍六入</li>
<li><code>ROUND_UNNECESSARY</code>：不作舍入，如果发生除不尽的情况，则抛出异常<code>ArithmeticException</code></li>
</ul>
<h3 id="时间与日期"><a class="markdownIt-Anchor" href="#时间与日期"></a> 时间与日期</h3>
<p>最简单的，获取时间戳：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回当前时间戳（单位：毫秒），即从UTC 1970年1月1日0点0分0秒开始经过的时间。</span></span><br><span class="line"><span class="comment">该值的粒度取决于操作系统测量时间的单位长度，例如许多操作系统会以几十毫秒为单位测量时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br></pre></td></tr></table></figure>
<p>在JavaSE 8之前，日期和时间机制是由<code>java.util.Date</code>，<code>java.util.Calendar</code>和<code>java.util.TimeZone</code>类及其子类提供的。<br />
这些类有几个缺点，例如：</p>
<ul>
<li><code>Calendar</code>类不是类型安全的。</li>
<li>因为类是可变的，所以它们不能用于多线程应用程序。</li>
<li>应用程序代码中的错误是常见的，因为月份的编号不常见，并且缺乏类型安全性。</li>
</ul>
<p>额外的，<code>java.sql.Date</code>专门用于数据库的日期对象，其继承自<code>java.util.Date</code>，会自动忽略所有时间相关信息</p>
<p>所以此节将侧重于<code>java.time</code>包下的时间日期类。这是用于表示日期和时间的 API 的核心，它包括日期，时间，日期和时间组合，时区，瞬时，持续时间和时钟的类。这些类是基于ISO-8601中定义的日历系统，并且是不可变的（和<code>String</code>类似）和线程安全的。其分为如下几类：</p>
<ul>
<li>星期和月的枚举：<code>DayOfWeek</code>，<code>Month</code></li>
<li>本地日期和时间：<code>LocalDateTime</code>，<code>LocalDate</code>，<code>LocalTime</code></li>
<li>带时区的日期和时间：<code>ZonedDateTime</code></li>
<li>时刻：<code>Instant</code></li>
<li>时区：<code>ZoneId</code>，<code>ZoneOffset</code></li>
<li>时间间隔：<code>Period</code>，<code>ChronoUnit</code>，<code>Duration</code></li>
</ul>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/ISO_8601">ISO-8601</a>日历系统是国际标准化组织的日期和时间的表示方法，全称为“数据存储和交换形式·信息交换·日期和时间的表示方法”。它是当今世界上大部分地区使用的现代民用日历系统。它相当于前公历制度，即所有时间适用于闰年规则。对于现代编写的大多数应用程序，ISO-8601规则是完全合适的。但是对于要求准确历史日期的应用程序来说不合适。</p>
</blockquote>
<p>方法的前缀命名标准：</p>
<table>
<thead>
<tr>
<th>前缀</th>
<th>方法类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>of</code></td>
<td>静态工厂</td>
<td>创建一个实例，其中工厂主要验证输入参数，而不是转换它们。</td>
</tr>
<tr>
<td><code>from</code></td>
<td>静态工厂</td>
<td>将输入参数转换为目标类的实例，这涉及可能从输入中丢失信息。</td>
</tr>
<tr>
<td><code>parse</code></td>
<td>静态工厂</td>
<td>解析输入字符串以生成目标类的实例。</td>
</tr>
<tr>
<td><code>format</code></td>
<td>实例</td>
<td>使用指定的格式化程序格式化时间对象中的值以生成字符串。</td>
</tr>
<tr>
<td><code>get</code></td>
<td>实例</td>
<td>返回目标对象状态的一部分。</td>
</tr>
<tr>
<td><code>is</code></td>
<td>实例</td>
<td>查询目标对象的状态。</td>
</tr>
<tr>
<td><code>with</code></td>
<td>实例</td>
<td>返回目标对象修改后的副本。这与 JavaBean 中的 <code>set</code> 方法不同。</td>
</tr>
<tr>
<td><code>plus</code></td>
<td>实例</td>
<td>返回目标对象的副本，并添加指定的时间量。</td>
</tr>
<tr>
<td><code>minus</code></td>
<td>实例</td>
<td>返回目标对象的副本，并减去指定的时间量。</td>
</tr>
<tr>
<td><code>to</code></td>
<td>实例</td>
<td>将此对象转换为另一种类型。</td>
</tr>
<tr>
<td><code>at</code></td>
<td>实例</td>
<td>将此对象与另一个对象组合。</td>
</tr>
</tbody>
</table>
<h4 id="常量-2"><a class="markdownIt-Anchor" href="#常量-2"></a> 常量</h4>
<p><code>DayOfWeek</code>枚举提供了从<code>MONDAY</code>到<code>SUNDAY</code>共七个用于指定一周中星期几的常量，以及除了枚举类默认方法以外的一些实用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 计算星期五的3天后是星期几</span></span><br><span class="line">	System.out.println(DayOfWeek.FRIDAY.plus(<span class="number">3</span>));</span><br><span class="line">	<span class="comment">// 计算星期一的5天前是星期几</span></span><br><span class="line">	System.out.println(DayOfWeek.MONDAY.minus(<span class="number">5</span>));</span><br><span class="line">	<span class="comment">// 获取星期几的数字值（1到7）</span></span><br><span class="line">	System.out.println(DayOfWeek.THURSDAY.getValue());</span><br><span class="line">	<span class="comment">// 从数字值获取DayOfWeek的实例，超过范围将抛出DateTimeException</span></span><br><span class="line">	System.out.println(DayOfWeek.of(<span class="number">6</span>));</span><br><span class="line">	<span class="keyword">for</span> (DayOfWeek value : DayOfWeek.values()) &#123; <span class="comment">// 遍历枚举值</span></span><br><span class="line">		<span class="comment">// 返回本地默认语言环境下星期几表示的文本</span></span><br><span class="line">		System.out.printf(<span class="string">&quot;%s\t&quot;</span>, value.getDisplayName(TextStyle.FULL, Locale.getDefault()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210404172932597.png" alt="image-20210404172932597" /></p>
<p><code>Month</code>枚举提供了从<code>JANUARY</code>到<code>DECEMBER</code>用于指定一年中几月的常量，与<code>DayOfWeek</code>枚举类似，<code>Month</code>枚举常量的整数值范围为1到12</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 计算一月的10个月后是几月</span></span><br><span class="line">	System.out.println(Month.JANUARY.plus(<span class="number">10</span>));</span><br><span class="line">	<span class="comment">// 计算二月的5个月前是几月</span></span><br><span class="line">	System.out.println(Month.FEBRUARY.minus(<span class="number">5</span>));</span><br><span class="line">	<span class="comment">// 获取几月的数字值（1到12）</span></span><br><span class="line">	System.out.println(Month.MARCH.getValue());</span><br><span class="line">	<span class="comment">// 从数字值获取Month的实例，超过范围将抛出DateTimeException</span></span><br><span class="line">	System.out.println(Month.of(<span class="number">4</span>));</span><br><span class="line">	<span class="comment">// 获取该月天数的最大值</span></span><br><span class="line">	System.out.println(Month.MAY.maxLength());</span><br><span class="line">	<span class="keyword">for</span> (Month value : Month.values()) &#123; <span class="comment">// 遍历枚举值</span></span><br><span class="line">		<span class="comment">// 返回本地默认语言环境下月份表示的文本</span></span><br><span class="line">		System.out.printf(<span class="string">&quot;%s &quot;</span>, value.getDisplayName(TextStyle.FULL, Locale.getDefault()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210404174152009.png" alt="image-20210404174152009" /></p>
<h4 id="本地日期"><a class="markdownIt-Anchor" href="#本地日期"></a> 本地日期</h4>
<p><code>java.time</code>包中的API有4个专门用于处理日期的类，而不用考虑时间或时区。它们分别是：<code>LocalDate</code>、<code>YearMonth</code>、<code>MonthDay</code>和<code>Year</code></p>
<p><code>LocalDate</code>类表示本地日期年月日，用于不需要显示时间的日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 从指定年月日创建LocalDate对象</span></span><br><span class="line">	System.out.println(LocalDate.of(<span class="number">2021</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">	<span class="comment">// 从默认时区的系统时钟中获取当前日期。</span></span><br><span class="line">	<span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">	System.out.println(date);</span><br><span class="line">	<span class="comment">// 返回使用时间调节器经过调整后（下个月第一天）的日期</span></span><br><span class="line">	System.out.println(date.with(TemporalAdjusters.firstDayOfNextMonth()));</span><br><span class="line">	<span class="comment">// 或者使用lambda表达式：当年的第100天</span></span><br><span class="line">	System.out.println(date.with(t -&gt; t.with(ChronoField.DAY_OF_YEAR, <span class="number">100</span>)));</span><br><span class="line">	<span class="comment">// 50天后的日期</span></span><br><span class="line">	System.out.println(date.plusDays(<span class="number">50</span>));</span><br><span class="line">	<span class="comment">// 是否为闰年</span></span><br><span class="line">	System.out.println(date.isLeapYear());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210404231257646.png" alt="image-20210404231257646" /></p>
<p><code>YearMonth</code>类表示特定的年和月</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 从指定年月创建YearMonth对象</span></span><br><span class="line">	<span class="type">YearMonth</span> <span class="variable">yearMonth</span> <span class="operator">=</span> YearMonth.of(<span class="number">2021</span>, <span class="number">1</span>);</span><br><span class="line">	System.out.println(yearMonth);</span><br><span class="line">	<span class="comment">// 返回当月的天数</span></span><br><span class="line">	System.out.println(yearMonth.lengthOfMonth());</span><br><span class="line">	<span class="comment">// 返回当年的天数</span></span><br><span class="line">	System.out.println(yearMonth.lengthOfYear());</span><br><span class="line">	<span class="comment">// 6个月以前的年月</span></span><br><span class="line">	System.out.println(yearMonth.minusMonths(<span class="number">6</span>));</span><br><span class="line">	<span class="comment">// 是否在指定的年月以前</span></span><br><span class="line">	System.out.println(yearMonth.isBefore(YearMonth.now()));</span><br><span class="line">	<span class="comment">// 是否在指定的年月以后</span></span><br><span class="line">	System.out.println(yearMonth.isAfter(YearMonth.of(<span class="number">2021</span>, <span class="number">12</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210405004318655.png" alt="image-20210405004318655" /></p>
<p><code>MonthDay</code>类表示特定的月和日，<code>Year</code>类表示年</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 测试某个月日是否对某年有效</span></span><br><span class="line">	System.out.println(MonthDay.of(Month.FEBRUARY, <span class="number">29</span>).isValidYear(Year.now().getValue()));</span><br><span class="line">	<span class="comment">// 以格式--MM-dd从文本字符串中获取MonthDay的实例</span></span><br><span class="line">	System.out.println(MonthDay.parse(<span class="string">&quot;--11-11&quot;</span>));</span><br><span class="line">	<span class="comment">// 将年份与一年中的第几天结合起来以创建LocalDate</span></span><br><span class="line">	System.out.println(Year.now().atDay(<span class="number">70</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210405022202184.png" alt="image-20210405022202184" /></p>
<h4 id="本地时间"><a class="markdownIt-Anchor" href="#本地时间"></a> 本地时间</h4>
<p>与<code>LocalDate</code>类类似的<code>LocalTime</code>类仅处理时间，但不存储时区和夏令时信息。使用24小时制，小时数从0到23，分钟数与秒数从0到59，纳秒数从0到999,999,999，但通常纳秒数只有前3位，后面都是0</p>
<p><code>LocalDate</code>与<code>LocalTime</code>组合在一起就是<code>LocalDateTime</code>类了，它用于同时处理日期和时间，也不会储存时区信息。并且根据ISO-8601标准，日期与时间同时显示时，使用<code>T</code>连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 以指定小时和分钟数创建LocalTime对象，秒和纳秒数将设置为0</span></span><br><span class="line">	System.out.println(LocalTime.of(<span class="number">6</span>, <span class="number">30</span>));</span><br><span class="line">	<span class="comment">// 计算这个时间是当天的第几秒</span></span><br><span class="line">	System.out.println(LocalTime.now().toSecondOfDay());</span><br><span class="line">	<span class="comment">// 以指定的日期和时间创建LocalDateTime对象</span></span><br><span class="line">	<span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2021</span>, Month.SEPTEMBER, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	System.out.println(dateTime);</span><br><span class="line">	<span class="comment">// 30天后的日期（月份会自动调整）</span></span><br><span class="line">	System.out.println(dateTime.plusDays(<span class="number">30</span>));</span><br><span class="line">	<span class="comment">// 当天是星期几（以枚举字段显示）</span></span><br><span class="line">	System.out.println(dateTime.getDayOfWeek());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210405172114387.png" alt="image-20210405172114387" /></p>
<h4 id="时区和偏移"><a class="markdownIt-Anchor" href="#时区和偏移"></a> 时区和偏移</h4>
<p>时区是使用相同标准时间的地球区域，每个时区可以由标识符描述，通常格式为时区标识符region/city和GMT/UTC时间的偏移量。例：Asia/Shanghai +08:00</p>
<ul>
<li><code>ZoneId</code> 指定时区标识符，并提供在 <code>Instant</code> 和 <code>LocalDateTime</code> 之间进行转换的方法。</li>
<li><code>ZoneOffset</code> 指定从GMT/UTC时区的偏移。</li>
<li><code>ZonedDateTime</code> 处理日期和时间，带有与GMT/UTC时间的偏移量。相当于结合了<code>LocalDateTime</code>类与<code>ZoneId</code>类</li>
<li><code>OffsetDateTime</code> 处理日期和时间，带有与GMT/UTC时间的偏移量，没有时区标识符。相当于结合了<code>LocalDateTime</code>类与<code>ZoneOffset</code>类</li>
<li><code>OffsetTime</code> 处理时间，带有与GMT/UTC时间的偏移量，没有时区标识符。相当于结合了<code>LocalTime</code>类与<code>ZoneOffset</code>类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 获取系统默认时区</span></span><br><span class="line">	System.out.println(ZoneId.systemDefault());</span><br><span class="line">	<span class="comment">// 使用小时数偏移量获取ZoneOffset</span></span><br><span class="line">	System.out.println(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">	<span class="comment">// 使用默认时区从当前系统获取日期时间</span></span><br><span class="line">	System.out.println(ZonedDateTime.now());</span><br><span class="line">	<span class="comment">// 以指定时区表示当前时间</span></span><br><span class="line">	System.out.println(ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)));</span><br><span class="line">	<span class="comment">// 给LocalDateTime添加ZoneId可以转换为ZonedDateTime</span></span><br><span class="line">	<span class="comment">// 以这种方式创建的ZonedDateTime其日期和时间与上面的相同，但附加的时区不同，所以是两个不同的时刻</span></span><br><span class="line">	System.out.println(LocalDateTime.now().atZone(ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>)));</span><br><span class="line">	<span class="comment">// 模拟计算2021年4月1日0时0分从上海花费12小时飞往洛杉矶后当地的时间，以及是否为夏令时</span></span><br><span class="line">	<span class="type">ZonedDateTime</span> <span class="variable">shanghai</span> <span class="operator">=</span> ZonedDateTime.of(<span class="number">2021</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">	System.out.println(shanghai);</span><br><span class="line">	<span class="type">ZonedDateTime</span> <span class="variable">losAngeles</span> <span class="operator">=</span> shanghai.withZoneSameInstant(ZoneId.of(<span class="string">&quot;America/Los_Angeles&quot;</span>)).plusHours(<span class="number">12</span>);</span><br><span class="line">	System.out.println(losAngeles);</span><br><span class="line">	System.out.println(losAngeles.getZone().getRules().isDaylightSavings(losAngeles.toInstant()));</span><br><span class="line">	<span class="comment">// OffsetDateTime内容：年月日时分秒毫秒偏移</span></span><br><span class="line">	<span class="type">OffsetDateTime</span> <span class="variable">offsetDateTime</span> <span class="operator">=</span> OffsetDateTime.now();</span><br><span class="line">	System.out.println(offsetDateTime);</span><br><span class="line">	<span class="comment">// 使用OffsetDateTime和TemporalAdjusters查找当月最后一个星期天是几号</span></span><br><span class="line">	System.out.println(offsetDateTime.with(TemporalAdjusters.lastInMonth(DayOfWeek.SUNDAY)).getDayOfMonth());</span><br><span class="line">	<span class="comment">// OffsetTime内容：时分秒毫秒偏移</span></span><br><span class="line">	<span class="type">OffsetTime</span> <span class="variable">offsetTime</span> <span class="operator">=</span> OffsetTime.now();</span><br><span class="line">	System.out.println(offsetTime);</span><br><span class="line">	<span class="comment">// 丢弃偏移信息转换为本地时间</span></span><br><span class="line">	System.out.println(offsetTime.toLocalTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210406164009530.png" alt="image-20210406164009530" /></p>
<blockquote>
<p>何时使用<code>OffsetDateTime</code>与<code>ZonedDateTime</code>？如果用于编写复杂的软件，根据地理位置为自己的日期和时间计算规则建模，或者将时间戳存储在仅跟踪GMT/UTC时区绝对偏移的数据库中，那么可以选择使用<code>OffsetDateTime</code>。此外，XML和其他网络传输格式将日期时间的格式定义为<code>OffsetDateTime</code>或<code>OffsetTime</code>。</p>
<p>虽然<code>ZonedDateTime</code>、<code>OffsetDateTime</code>与<code>OffsetTime</code>类都带有与GMT/UTC时间的偏移量，但只有<code>ZonedDateTime</code>使用<code>ZoneRules</code>，这是<code>java.time.zone</code>包下的类，其用于确定特定时区的偏移量的变化情况。<code>ZonedDateTime</code>类适用于如夏令时的计算场景，而<code>OffsetDateTime</code>和<code>OffsetTime</code>类没有使用<code>ZoneRules</code>所以不适用。</p>
</blockquote>
<h4 id="时刻与间隔"><a class="markdownIt-Anchor" href="#时刻与间隔"></a> 时刻与间隔</h4>
<p><code>Instant</code>类表示时间轴上纳秒的开始，可以用于生成表示机器时间的时间戳。返回的值是从1970年1月1日0时0分0秒（GMT）开始计算的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">	System.out.println(now.getEpochSecond()); <span class="comment">// 获取当前时间戳（单位：秒）</span></span><br><span class="line">	System.out.println(now.toEpochMilli()); <span class="comment">// 获取当前时间戳（单位：毫秒）</span></span><br><span class="line">	System.out.println(now.atZone(ZoneId.systemDefault())); <span class="comment">// 附加时区以转换为ZonedDateTime</span></span><br><span class="line">	<span class="comment">// 计算从2000年1月1日0时0分0秒到现在经过了多少秒</span></span><br><span class="line">	System.out.println(Instant.parse(<span class="string">&quot;2000-01-01T00:00:00.00Z&quot;</span>).until(now, ChronoUnit.SECONDS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210406203401607.png" alt="image-20210406203401607" /></p>
<p><code>Duration</code>用于测量基于秒（或纳秒）为单位的时间量；或者通过<code>Period</code>类来表示基于日期值(年，月，日)定义的时间量，这些时间计算都不会考虑时区或夏令时的影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">	<span class="comment">// 计算从6:00到现在经过了多少秒</span></span><br><span class="line">	System.out.println(Duration.between(LocalTime.of(<span class="number">6</span>, <span class="number">0</span>), LocalTime.now()).getSeconds());</span><br><span class="line">	<span class="comment">// 2小时加上30分是多少秒</span></span><br><span class="line">	System.out.println(Duration.ofHours(<span class="number">2</span>).plusMinutes(<span class="number">30</span>).getSeconds());</span><br><span class="line">	<span class="comment">// 现在离1996年9月1日经过了多少年月日，以及多少天</span></span><br><span class="line">	<span class="type">LocalDate</span> <span class="variable">birthday</span> <span class="operator">=</span> LocalDate.of(<span class="number">1996</span>, <span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">	<span class="type">Period</span> <span class="variable">p</span> <span class="operator">=</span> Period.between(birthday, now);</span><br><span class="line">	System.out.printf(<span class="string">&quot;%s年%s月%s日\n&quot;</span>, p.getYears(), p.getMonths(), p.getDays());</span><br><span class="line">	System.out.println(ChronoUnit.DAYS.between(birthday, now));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210406233315537.png" alt="image-20210406233315537" /></p>
<h4 id="格式化"><a class="markdownIt-Anchor" href="#格式化"></a> 格式化</h4>
<p>使用<code>java.time</code>包下的时间日期类时，若要进行格式化输出，需要使用其相应的格式化程序<code>DateTimeFormatter</code>，此类提供了一组预定义的格式化程序，也可以使用规定好的<a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns">格式化解析参数</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">	<span class="comment">// 直接打印时，使用的是ISO 8601标准格式</span></span><br><span class="line">	System.out.println(now);</span><br><span class="line">	<span class="comment">// 使用自定义格式将时间转换为字符串</span></span><br><span class="line">	<span class="type">DateTimeFormatter</span> <span class="variable">formatter1</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss E&quot;</span>);</span><br><span class="line">	System.out.println(now.format(formatter1));</span><br><span class="line">	<span class="comment">// 或者特定于语言环境的日期时间格式</span></span><br><span class="line">	<span class="type">DateTimeFormatter</span> <span class="variable">formatter2</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">	System.out.println(now.format(formatter2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210407000024041.png" alt="image-20210407000024041" /></p>
<h3 id="数组处理arrays"><a class="markdownIt-Anchor" href="#数组处理arrays"></a> 数组处理Arrays</h3>
<p><code>Arrays</code>工具类包含了用于操纵数组的各种静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// 生成10个范围为0到100的随机数组</span></span><br><span class="line">	<span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">Random</span>().ints(<span class="number">5</span>, <span class="number">0</span>, <span class="number">100</span>).toArray();</span><br><span class="line">	<span class="comment">// 输出数组内容的字符串表示形式</span></span><br><span class="line">	printArray(data);</span><br><span class="line">	<span class="comment">// 将指定的数组按升序排序</span></span><br><span class="line">	Arrays.sort(data);printArray(data);</span><br><span class="line">	<span class="comment">// 使用二分法搜索指定值，只能对已升序排序后的数组使用，返回负数表示不存在</span></span><br><span class="line">	System.out.println(Arrays.binarySearch(data, <span class="number">10</span>));</span><br><span class="line">	<span class="comment">// 转换为包装类型的数组</span></span><br><span class="line">	<span class="type">IntStream</span> <span class="variable">ints</span> <span class="operator">=</span> Arrays.stream(data);</span><br><span class="line">	Integer[] integers = ints.boxed().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">	<span class="comment">// 然后进行降序排列</span></span><br><span class="line">	Arrays.sort(integers, Comparator.reverseOrder());printArray(integers);</span><br><span class="line">	<span class="comment">// 指定容量复制数组，可以用于对数组进行扩容，扩充元素的初始值视类型而定</span></span><br><span class="line">	data = Arrays.copyOf(data, data.length * <span class="number">2</span>);printArray(data);</span><br><span class="line">	<span class="comment">// 以指定范围[fromIndex, toIndex)用指定值填充数组</span></span><br><span class="line">	Arrays.fill(data, data.length / <span class="number">2</span>, data.length, <span class="number">6</span>);printArray(data);</span><br><span class="line">	<span class="comment">// 判断两个数组是否包含相同顺序的相同元素</span></span><br><span class="line">	System.out.println(Arrays.equals(data, data.clone()));</span><br><span class="line">	<span class="comment">// 将数组转换为list集合</span></span><br><span class="line">	System.out.println(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>).toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">	System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210407232425816.png" alt="image-20210407232425816" /></p>
<h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3>
<h4 id="optional"><a class="markdownIt-Anchor" href="#optional"></a> Optional</h4>
<p><code>Optional</code>类是一个可以包含null值的容器对象，用于解决空指针异常的问题。<code>Optional</code>构造方法是私有的，所以无法被实例化，通过调用其静态方法获取对象</p>
<ul>
<li><code>empty()</code>：返回一个空的Optional实例</li>
<li><code>of(T value)</code>：T为泛型。以指定值返回一个Optional实例，如果传入值为<code>null</code>会抛出<code>NullPointerException</code></li>
<li><code>ofNullable(T value)</code>：同上，但允许<code>null</code>值</li>
</ul>
<p>实例方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	Optional&lt;Integer&gt; oi = Optional.of(i);</span><br><span class="line">	Optional&lt;Object&gt; oo = Optional.empty();</span><br><span class="line">	<span class="comment">// 如果此Optional存在值，则返回该值，否则抛出NoSuchElementException</span></span><br><span class="line">	System.out.println(oi.get());</span><br><span class="line">	<span class="comment">// 如果存在值，则返回true，否则返回false</span></span><br><span class="line">	System.out.println(oo.isPresent());</span><br><span class="line">	<span class="comment">// 如果存在值，则返回该值，否则返回参数值</span></span><br><span class="line">	System.out.println(oo.orElse(<span class="string">&quot;null&quot;</span>));</span><br><span class="line">	<span class="comment">// 以下为函数式编程方法</span></span><br><span class="line">	oi.ifPresent(System.out::println); <span class="comment">// 如果存在值，则使用该值调用指定操作，否则不执行任何操作</span></span><br><span class="line">	<span class="comment">// filter：如果存在值，则将这个值与给定的判断式匹配然后返回一个描述这个值的Optional，否则返回一个空的Optional</span></span><br><span class="line">	<span class="comment">// orElseGet：如果存在值则返回值，否则调用表达式方法并返回调用的结果。</span></span><br><span class="line">	System.out.println(oi.filter(x -&gt; x == <span class="number">0</span>).orElseGet(() -&gt; Integer.valueOf(<span class="string">&quot;0&quot;</span>)));</span><br><span class="line">	<span class="comment">// map：如果存在值，则将提供的映射函数应用于该值。如果映射函数的返回值不为null，则返回包含返回值的Optional，否则返回空的Optional</span></span><br><span class="line">	<span class="comment">// orElseThrow：如果存在值则返回值，否则抛出提供的异常</span></span><br><span class="line">	System.out.println(oi.map(Object::toString).orElseThrow(NullPointerException::<span class="keyword">new</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210409195044213.png" alt="image-20210409195044213" /></p>
<h4 id="uuid"><a class="markdownIt-Anchor" href="#uuid"></a> UUID</h4>
<p><a href="https://baike.baidu.com/item/UUID/5921266">UUID</a>（Universally Unique Identifier，通用唯一标识码）是用于计算机体系中识别信息数目的一组8bit128个数字所构成的标识符。GUID（Globally Unique Identifier）全球唯一标识码则特指微软对UUID标准的实现。</p>
<p>java中的UUID类仅有一个公共的构造方法：<code>UUID(long mostSigBits, long leastSigBits)</code>，但需要指定最高64位有效值和最低64位有效值，所以为了便于使用，有三种静态方法来创建UUID：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	List&lt;UUID&gt; uuids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">	uuids.add(UUID.randomUUID());<span class="comment">// 随机获取</span></span><br><span class="line">	uuids.add(UUID.fromString(UUID.randomUUID().toString())); <span class="comment">// 根据指定标准UUID字符串创建UUID对象</span></span><br><span class="line">	uuids.add(UUID.nameUUIDFromBytes(<span class="string">&quot;uuid char array&quot;</span>.getBytes())); <span class="comment">// 根据指定的字节数组创建UUID</span></span><br><span class="line">	uuids.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20210410172020926.png" alt="image-20210410172020926" /></p>
<p>实例方法：</p>
<ul>
<li><code>variant()</code>：变体，占1、2或3bit，在标准表示形式的第四组第一个表示。共有4种
<ul>
<li>0，二进制0，保留，用于向后兼容已经过时的NCS（1988年开发的Apollo网络计算系统）</li>
<li>2，二进制10，由<a href="https://www.ietf.org/rfc/rfc4122.txt">IETF RFC 4122</a>(Leach-Salz)定义。使用大端序作为二进制存储与传输方式。此类使用的就是这个</li>
<li>6，二进制110，保留，由微软向后兼容。使用小端序作为二进制存储与传输方式</li>
<li>7，二进制111，保留，便于以后定义</li>
</ul>
</li>
<li><code>version()</code>：版本，在标准表示形式的第三组第一个表示。对于第二和第三种变体，标准中定义了五种版本，java中只有前四种
<ul>
<li>1，基于时间戳、随机数和机器MAC地址的UUID</li>
<li>2，基于DEC安全的UUID</li>
<li>3，基于名称的UUID。通过计算MD5散列值和命名空间（namespace）标识符获得</li>
<li>4，使用随机性或伪随机性生成</li>
<li>5，同3，但是使用SHA1算法</li>
</ul>
</li>
<li><code>clockSequence()</code>：UUID的时钟序列值，<strong>仅版本1可用</strong></li>
<li><code>timestamp()</code>：UUID的时间戳，以100纳秒为单位，自1582年10月15日起计算，<strong>仅版本1可用</strong></li>
<li><code>getMostSignificantBits()</code>：返回最高64位有效值</li>
<li><code>getLeastSignificantBits()</code>：返回最低64位有效值</li>
<li><code>toString()</code>：UUID的标准字符串表示形式</li>
</ul>
<h4 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> Base64</h4>
<blockquote>
<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>64</mn></mrow><annotation encoding="application/x-tex">log_264</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">6</span><span class="mord">4</span></span></span></span>=6，所以每6个比特为一个单元，对应某个可打印字符。3个字节相当于24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，共62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后BinHex的版本使用不同的64字符集来代表6个二进制数字，但是不被称为Base64。</p>
<p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。</p>
</blockquote>
<p>Java的<code>Base64</code>类则提供了三种不同方式的编码器和解码器实现：</p>
<ul>
<li>基本的：使用<a href="https://www.ietf.org/rfc/rfc4648.txt">RFC 4648</a>中表1和<a href="https://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>指定的base64字符进行编码和解码操作。编码器不添加任何换行符，解码器拒绝base64以外的字符数据。</li>
<li>URL和文件名安全的：使用<a href="https://www.ietf.org/rfc/rfc4648.txt">RFC 4648</a>中表2指定的base64字符进行编码和解码操作。其它同上</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E7%94%A8%E9%80%94%E4%BA%92%E8%81%AF%E7%B6%B2%E9%83%B5%E4%BB%B6%E6%93%B4%E5%B1%95">MIME</a>：使用<a href="https://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>中表1指定的base64字符进行编码和解码操作。编码后的每行不超过76个字符，并且使用<code>\r\n</code>作为行分隔符。编码输出最后没有行分隔符</li>
</ul>
<p>通常使用下面几个静态方法来获取编码器和解码器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编码器，依次对应上述三种类型</span></span><br><span class="line">Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">Base64.<span class="type">Encoder</span> <span class="variable">urlEncoder</span> <span class="operator">=</span> Base64.getUrlEncoder();</span><br><span class="line">Base64.<span class="type">Encoder</span> <span class="variable">mimeEncoder</span> <span class="operator">=</span> Base64.getMimeEncoder();</span><br><span class="line"><span class="comment">// 解码器，依次对应上述三种类型</span></span><br><span class="line">Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">Base64.<span class="type">Decoder</span> <span class="variable">urlDecoder</span> <span class="operator">=</span> Base64.getUrlDecoder();</span><br><span class="line">Base64.<span class="type">Decoder</span> <span class="variable">mimeDecoder</span> <span class="operator">=</span> Base64.getMimeDecoder();</span><br><span class="line"><span class="comment">// MIME类型编码器，可以通过参数指定每行的长度及行的分隔符</span></span><br><span class="line">Base64.<span class="type">Encoder</span> <span class="variable">me</span> <span class="operator">=</span> Base64.getMimeEncoder(<span class="number">64</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;\n&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] uuid = UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">System.out.println(<span class="string">&quot;原字符串：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(uuid, StandardCharsets.UTF_8));</span><br><span class="line">System.out.println(<span class="string">&quot;base64基本编码：&quot;</span> + encoder.encodeToString(uuid));</span><br><span class="line">System.out.println(<span class="string">&quot;base64url编码：&quot;</span> + urlEncoder.encodeToString(uuid));</span><br><span class="line"></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    sj.add(UUID.randomUUID().toString());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;原字符串：&quot;</span> + sj.toString());</span><br><span class="line"><span class="type">byte</span>[] bytes = sj.toString().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">System.out.println(<span class="string">&quot;base64mime编码：&quot;</span> + mimeEncoder.encodeToString(bytes));</span><br></pre></td></tr></table></figure>
<p><img src="image-20210411025947381.png" alt="image-20210411025947381" /></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis多表关联映射(一对多、多对一、多对多)的配置与使用</title>
    <url>/mybatis-association-query/</url>
    <content><![CDATA[<h2 id="前言需求分析"><a class="markdownIt-Anchor" href="#前言需求分析"></a> 前言：需求分析</h2>
<p>在项目的数据查询中，最简单的是查询一个表里的内容，但是最常用的却是多表关联查询。比如</p>
<ul>
<li>根据某个职业的分类查询这个分类下所有角色(对象)的相关信息</li>
<li>根据多个角色的信息查询它们各自所属的职业分类</li>
<li>根据某个角色的标签查询这个标签下的角色，或者根据这个角色查询他有哪些标签</li>
</ul>
<p>以上例子依次对应了数据查询中<strong>一对多、多对一和多对多</strong>的情况，接下来将通过一个简单的项目介绍如何在mybatis里如何配置与使用这些多表关联查询</p>
<span id="more"></span>
<hr />
<h2 id="一-创建项目"><a class="markdownIt-Anchor" href="#一-创建项目"></a> 一、创建项目</h2>
<h3 id="1创建数据表插入数据"><a class="markdownIt-Anchor" href="#1创建数据表插入数据"></a> 1.创建数据表&amp;插入数据</h3>
<p>角色表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `char_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `star` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `initial_cost` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `work_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `work_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `name` (`name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> char_info <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;能天使&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;狙击&#x27;</span>,<span class="number">101</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;陨星&#x27;</span>,<span class="string">&#x27;5星&#x27;</span>,<span class="number">24</span>,<span class="string">&#x27;狙击&#x27;</span>,<span class="number">101</span>),(<span class="number">3</span>,<span class="string">&#x27;伊芙利特&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">31</span>,<span class="string">&#x27;术士&#x27;</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;莫斯提马&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">31</span>,<span class="string">&#x27;术士&#x27;</span>,<span class="number">102</span>),(<span class="number">5</span>,<span class="string">&#x27;艾雅法拉&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;术士&#x27;</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;阿米娅&#x27;</span>,<span class="string">&#x27;5星&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;术士&#x27;</span>,<span class="number">102</span>),(<span class="number">7</span>,<span class="string">&#x27;银灰&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;近卫&#x27;</span>,<span class="number">103</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;斯卡蒂&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;近卫&#x27;</span>,<span class="number">103</span>),(<span class="number">9</span>,<span class="string">&#x27;推进之王&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;先锋&#x27;</span>,<span class="number">104</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;红&#x27;</span>,<span class="string">&#x27;5星&#x27;</span>,<span class="number">7</span>,<span class="string">&#x27;特种&#x27;</span>,<span class="number">105</span>),(<span class="number">11</span>,<span class="string">&#x27;年&#x27;</span>,<span class="string">&#x27;6星&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;重装&#x27;</span>,<span class="number">106</span>);</span><br></pre></td></tr></table></figure>
<p>职业分类表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `char_work` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `work_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `work` (`name`,`work_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `char_work` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">101</span>,<span class="string">&#x27;狙击&#x27;</span>),(<span class="number">2</span>,<span class="number">102</span>,<span class="string">&#x27;术士&#x27;</span>),(<span class="number">3</span>,<span class="number">103</span>,<span class="string">&#x27;近卫&#x27;</span>),(<span class="number">4</span>,<span class="number">104</span>,<span class="string">&#x27;先锋&#x27;</span>),(<span class="number">5</span>,<span class="number">105</span>,<span class="string">&#x27;特种&#x27;</span>),(<span class="number">6</span>,<span class="number">106</span>,<span class="string">&#x27;重装&#x27;</span>),(<span class="number">7</span>,<span class="number">107</span>,<span class="string">&#x27;医疗&#x27;</span>),(<span class="number">8</span>,<span class="number">108</span>,<span class="string">&#x27;辅助&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2项目结构"><a class="markdownIt-Anchor" href="#2项目结构"></a> 2.项目结构</h3>
<p><img src="4026165801.png" alt="img" /></p>
<p>本项目使用IntelliJ IDEA创建，并使用maven管理所使用的相关库，如果不使用maven，请注意手动导入相关jar包：mybatis、mysql-connector-java。junit可选，仅作测试用(使用junit必须依赖hamcrest-core包)</p>
<h3 id="3初始化项目"><a class="markdownIt-Anchor" href="#3初始化项目"></a> 3.初始化项目</h3>
<h4 id="31配置mybatis"><a class="markdownIt-Anchor" href="#31配置mybatis"></a> 3.1配置mybatis</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">		<span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">		<span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/charInfoMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/charWorkMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置<code>mapUnderscoreToCamelCase</code>为<code>true</code>开启驼峰命名规则转换，即数据表的字段名xxx_yyy转换成java的字段名xxxYyy<br />
此处使用的mysql连接驱动包是5.x版本的，如果使用8.x注意更改驱动名称值为<code>com.mysql.cj.jdbc.Driver</code>，同时url需要指定参数<code>useSSL=false&amp;serverTimezone=UTC</code></p>
<h4 id="32封装sql会话访问工具类"><a class="markdownIt-Anchor" href="#32封装sql会话访问工具类"></a> 3.2封装sql会话访问工具类</h4>
<p>在util包下新建MybatisUtil类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>)) &#123;</span><br><span class="line">		sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">openSession</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="33创建java对象类"><a class="markdownIt-Anchor" href="#33创建java对象类"></a> 3.3创建java对象类</h4>
<p>在pojo包下新建与数据表相关的java对象和字段信息，并生成Getter与Setter方法，同时重写toString方法方便打印信息。本项目仅使用了查询功能，所以不用生成带参构造方法</p>
<hr />
<h2 id="二-一对多"><a class="markdownIt-Anchor" href="#二-一对多"></a> 二、一对多</h2>
<h3 id="1逻辑梳理"><a class="markdownIt-Anchor" href="#1逻辑梳理"></a> 1.逻辑梳理</h3>
<p>首先理清关系，一对多即一个对象关联多个对象，那么就需要使用同一个字段值来产生关系，所以此处char_info表引用了char_work表的work_id。在查询的时候逻辑顺序如下：</p>
<ol>
<li>在char_work表中通过name值(也可以使用表里其它的唯一值)查询相关的work_id</li>
<li>然后返回一个结果映射，在结果映射里通过work_id在char_info里查询到对应的char_info数据</li>
<li>返回的结果映射同时拥有char_work的信息和其相关的一组char_info数据</li>
</ol>
<p>所以我们需要在CharWork对象里增加一个<code>List&lt;charInfo&gt;</code>属性并生成Getter与Setter方法</p>
<h3 id="2charworkmapper映射文件设置"><a class="markdownIt-Anchor" href="#2charworkmapper映射文件设置"></a> 2.charWorkMapper映射文件设置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;charWork&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--一对多结果映射：一类职业对应多名干员--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;rmCharWork&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.CharWork&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;workId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_id&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;charInfoList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;charInfo.selectCharInfoByWorkId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCharInfoByWorkName&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;rmCharWork&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">		select * from char_work where name = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处resultMap的type即“一”的java对象类型，子标签id为主键，需要关联的属性和不符合驼峰命名转换规则的属性使用result子标签进行对应，property为java属性名，column为数据表字段名。<br />
collection的select值为charInfo命名空间(映射文件)里需要关联查询的select语句id</p>
<h3 id="3charatersmapper映射文件设置"><a class="markdownIt-Anchor" href="#3charatersmapper映射文件设置"></a> 3.charatersMapper映射文件设置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">		<span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">		<span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;charaters&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCharInfoByWorkId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.CharInfo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">		select * from char_info where work_id = #&#123;value&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处设置work_id值查询charInfo数据即可，无需手动调用</p>
<h3 id="4实例测试"><a class="markdownIt-Anchor" href="#4实例测试"></a> 4.实例测试</h3>
<p>test\java包里新建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">one2many</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.openSession()) &#123;</span><br><span class="line">		<span class="type">CharWork</span> <span class="variable">work</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;charWork.selectCharInfoByWorkName&quot;</span>, <span class="string">&quot;狙击&quot;</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charaters = work.getCharInfoList();</span><br><span class="line"></span><br><span class="line">		System.out.println(work);</span><br><span class="line">		<span class="keyword">for</span> (CharInfo c : charaters) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;\t&quot;</span> + c);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<p><img src="3024637912.png" alt="img" /></p>
<hr />
<h2 id="三-多对一"><a class="markdownIt-Anchor" href="#三-多对一"></a> 三、多对一</h2>
<h3 id="1逻辑梳理-2"><a class="markdownIt-Anchor" href="#1逻辑梳理-2"></a> 1.逻辑梳理</h3>
<p>多对一体现在查询结果上并不是多个实体对象显示对应的一条分类对象信息，而是每个实体对象后面显示其关联的分类对象信息，显示的“一”可以显示很多条重复的，但都是同一类对象，所以逻辑顺序如下：</p>
<ol>
<li>从char_info表查询所需的一组char_info信息</li>
<li>然后在结果映射里通过这一组char_info的work_id到char_work表里逐条查询所需的char_work信息</li>
<li>返回的结果映射信息就有了char_info信息以及对应的char_work信息</li>
</ol>
<p>那么很显然的我们需要在char_info的java对象里增加一个<code>charWork</code>对象属性，并生成相应的Setter和Getter方法</p>
<h3 id="2charinfomapper新增设置"><a class="markdownIt-Anchor" href="#2charinfomapper新增设置"></a> 2.charInfoMapper新增设置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对一结果映射：多名干员对应符合条件的一类职业--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;rmCharInfo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.CharInfo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;workId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;charWork&quot;</span> <span class="attr">select</span>=<span class="string">&quot;charWork.selectCharWorkByWorkId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCharInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;rmCharInfo&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此处resultMap使用<code>association</code>(映射)子标签来实现多对一的查询，原理和一对多相似，不过和collection不同的是association只能映射一个对象而不是一组对象的集合，同时依旧需要把传递的work_id属性进行result对应，否则CharInfo对象会获取不到work_id的值</p>
<h3 id="3charworkmapper新增设置"><a class="markdownIt-Anchor" href="#3charworkmapper新增设置"></a> 3.charWorkMapper新增设置</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCharWorkByWorkId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.CharWork&quot;</span>&gt;</span></span><br><span class="line">	select * from char_work where work_id = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>“一”的一边只需要增加一条sql语句就行了</p>
<h3 id="4实例测试-2"><a class="markdownIt-Anchor" href="#4实例测试-2"></a> 4.实例测试</h3>
<p>在测试类里新建一个many2one测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">many2one</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.openSession()) &#123;</span><br><span class="line">		List&lt;CharInfo&gt; charInfos = sqlSession.selectList(<span class="string">&quot;charInfo.selectCharInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (CharInfo c : charInfos) &#123;</span><br><span class="line">			System.out.println(c);</span><br><span class="line">			System.out.println(<span class="string">&quot;\t&quot;</span> + c.getCharWork());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里取出全部的CharInfo及其charWork信息，所以就不需要传递参数了，同时变量声明是先集合，再对应的单个对象，和一对多的使用方法是相反的</p>
<p>运行结果：</p>
<p><img src="1025955090.png" alt="img" /></p>
<hr />
<h2 id="四-多对多"><a class="markdownIt-Anchor" href="#四-多对多"></a> 四、多对多</h2>
<p>虽然mybatis可以使用association和collection标签专门用于对多个相关实体类数据进行级联查询，但仍不支持多个相关实体类数据的级联保存和级联删除操作。因此在进行实体类多对多映射表设计时，需要专门建立一个关联对象表对相关实体类的关联关系进行描述，所以多对多的处理可视为双向的一对多表查询</p>
<h3 id="1增加数据表"><a class="markdownIt-Anchor" href="#1增加数据表"></a> 1.增加数据表</h3>
<p>tag</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tag` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `tag` (`tag_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">16</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tag` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;治疗&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;支援&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;新手&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;费用回复&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;输出&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;生存&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;群攻&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;防护&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;减速&#x27;</span>),(<span class="number">10</span>,<span class="string">&#x27;削弱&#x27;</span>),(<span class="number">11</span>,<span class="string">&#x27;快速复活&#x27;</span>),(<span class="number">12</span>,<span class="string">&#x27;位移&#x27;</span>),(<span class="number">13</span>,<span class="string">&#x27;召唤&#x27;</span>),(<span class="number">14</span>,<span class="string">&#x27;控场&#x27;</span>),(<span class="number">15</span>,<span class="string">&#x27;爆发&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>char_tags</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `char_tags` (</span><br><span class="line">  `cid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `tid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `char_tags` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">2</span>,<span class="number">10</span>),(<span class="number">3</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">10</span>),(<span class="number">4</span>,<span class="number">2</span>),(<span class="number">4</span>,<span class="number">7</span>),(<span class="number">4</span>,<span class="number">14</span>),(<span class="number">5</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">10</span>),(<span class="number">6</span>,<span class="number">5</span>),(<span class="number">7</span>,<span class="number">2</span>),(<span class="number">7</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="number">5</span>),(<span class="number">8</span>,<span class="number">6</span>),(<span class="number">9</span>,<span class="number">4</span>),(<span class="number">9</span>,<span class="number">5</span>),(<span class="number">10</span>,<span class="number">11</span>),(<span class="number">10</span>,<span class="number">14</span>),(<span class="number">11</span>,<span class="number">2</span>),(<span class="number">11</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2增加对象与字段"><a class="markdownIt-Anchor" href="#2增加对象与字段"></a> 2.增加对象与字段</h3>
<p>pojo包下新增tag类与相关属性，对应tag表，同时增加List<CharInfo>属性，在CharInfo类里也增加一个List<tag>属性，此处无需char_tags表关联java类</p>
<h3 id="3增加映射配置"><a class="markdownIt-Anchor" href="#3增加映射配置"></a> 3.增加映射配置</h3>
<p>charInfoMapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多结果映射：查询某个干员所对应的多个标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;rmCharInfoWithTags&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.CharInfo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;star&quot;</span> <span class="attr">column</span>=<span class="string">&quot;star&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;initialCost&quot;</span> <span class="attr">column</span>=<span class="string">&quot;initial_cost&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;workName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_name&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;workId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_id&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;pojo.tag&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tagName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tag_name&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCharInfoWithTags&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;rmCharInfoWithTags&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info c, tag t, char_tags ct</span><br><span class="line">	where ct.cid = c.id</span><br><span class="line">	  and ct.tid = t.id</span><br><span class="line">	  and c.name = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用SQL语句对应来实现多表关联的查询，如果不理解这条select语句，可以代入参数在mysql里观察查询结果：</p>
<p><img src="3346185465.png" alt="img" /></p>
<p>因为使用了*取出了所有表的所有列，会有列名重复的情况，所以在result或id里不能指定<code>property=&quot;id&quot; column=&quot;id&quot;</code>这样的参数映射，否则只会映射第一次出现的数据，后面重复列名的数据无法映射。同时这里需要将相关表(除了关系表)所对应的java对象类的属性完整映射，重复的列名一般来说就是关联的字段信息了，所以可以如上使用<code>&lt;id property=&quot;id&quot; column=&quot;cid&quot;/&gt;</code>这样的方式来映射。</p>
<p>新增tagMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多结果映射：查询某个标签所对应的多个干员--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;rmTagsWithCharInfo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.tag&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tagName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tag_name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;charaters&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;pojo.CharInfo&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;star&quot;</span> <span class="attr">column</span>=<span class="string">&quot;star&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;initialCost&quot;</span> <span class="attr">column</span>=<span class="string">&quot;initial_cost&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;workName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_name&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;workId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;work_id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTagsWithCharInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;rmTagsWithCharInfo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">	from char_info c, tag t, char_tags ct</span><br><span class="line">	where ct.cid = c.id</span><br><span class="line">	  and ct.tid = t.id</span><br><span class="line">	  and t.tag_name = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>逆向的关系映射与上面原理相同，将属性/字段反向描述即可，注意select语句的参数，以及在mybatis配置文件里增加映射文件<code>&lt;mapper resource=&quot;mappers/tagMapper.xml&quot;/&gt;</code></p>
<h3 id="4实例测试-3"><a class="markdownIt-Anchor" href="#4实例测试-3"></a> 4.实例测试</h3>
<p>正向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">many2many</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.openSession()) &#123;</span><br><span class="line">		<span class="type">CharInfo</span> <span class="variable">charInfo</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;charInfo.selectCharInfoWithTags&quot;</span>, <span class="string">&quot;莫斯提马&quot;</span>);</span><br><span class="line">		List&lt;pojo.tag&gt; tags = charInfo.getTags();</span><br><span class="line"></span><br><span class="line">		System.out.println(charInfo);</span><br><span class="line">		<span class="keyword">for</span> (tag t : tags) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;\t&quot;</span> + t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="4108606847.png" alt="img" /></p>
<p>逆向：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manyToMany</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.openSession()) &#123;</span><br><span class="line">		<span class="type">tag</span> <span class="variable">tag</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;tag.selectTagsWithCharInfo&quot;</span>, <span class="string">&quot;削弱&quot;</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfos = tag.getCharaters();</span><br><span class="line"></span><br><span class="line">		System.out.println(tag);</span><br><span class="line">		<span class="keyword">for</span> (CharInfo charInfo : charInfos) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;\t&quot;</span> + charInfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3064026697.png" alt="img" /></p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus使用笔记</title>
    <url>/mybatisplus-use/</url>
    <content><![CDATA[<blockquote>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<p>这个项目是国人开发的，降低了上手门槛这点十分好评</p>
<p>官网：<a href="https://baomidou.com/">https://baomidou.com/</a>    |    <a href="https://mybatis.plus/">https://mybatis.plus/</a></p>
<span id="more"></span>
<h2 id="零-准备工作"><a class="markdownIt-Anchor" href="#零-准备工作"></a> 零、准备工作</h2>
<p>在普通的java项目中使用，导入依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于springboot项目：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>按照<a href="https://mp.baomidou.com/guide/quick-start.html">快速开始</a>的说明，将表和数据创建好。然后使用Spring Initializr创建springboot项目，所有依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mysql驱动版本可以根据需要来选择，8.0版本以上注意driver-class-name和url的写法。另外引入了mybatis-plus就不要再引入mybatis了。</p>
<p>然后根据自己mysql的用户名、密码、库名来配置数据源，最后一项是设置日志输出到控制台</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>依次创建实体类（注意与表的类型对应）、DAO（继承BaseMapper并传入实体类作为泛型），然后在启动类上配置Mapper包扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// UserDao.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringbootMybatisplusApplication.java</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootMybatisplusApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(SpringbootMybatisplusApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后运行测试，<code>selectList</code>需要一个条件构造器作为参数，不需要条件查询那么传入<code>null</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisplusApplicationTests</span> &#123;</span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">		List&lt;User&gt; userList = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">		userList.forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<p><img src="image-20200811185405395.png" alt="image-20200811185405395" /></p>
<h2 id="一-主键生成策略"><a class="markdownIt-Anchor" href="#一-主键生成策略"></a> 一、主键生成策略</h2>
<h3 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1、简介</h3>
<p>MybatisPlus在3.3.0版本后的主键生成策略如下：</p>
<ul>
<li>AUTO：数据库ID自增</li>
<li>NONE：无状态，该类型为未设置主键类型</li>
<li>INPUT：手动设置ID</li>
<li>ASSIGN_ID：使用<a href="https://gitee.com/yu120/sequence">雪花算法</a>分配ID (主键类型为number或string）</li>
<li>ASSIGN_UUID：分配UUID (主键类型为 string)</li>
</ul>
<h3 id="2-使用须知"><a class="markdownIt-Anchor" href="#2-使用须知"></a> 2、使用须知</h3>
<p>雪花算法不在此详解，需要注意的是生成后的数字有19位，Integer的最大值2^31-1仅10位，数据库的int最大也只有11位，所以要使用Long来储存。</p>
<p>在主键位数不足19位时，默认不会使用雪花算法，而是NONE，即不进行处理；设置AUTO时需要对应数据库字段为自增，INPUT则是插入时手动设置。</p>
<p>要使用雪花算法，数据库的字段类型长度大于19位，并且实体类对应字段为<code>Long</code>类型（<strong>注意是Long不是long，long类型默认值为 0，而 mybatisplus 只会判断是否为 null</strong>）</p>
<h3 id="2-示例"><a class="markdownIt-Anchor" href="#2-示例"></a> 2、示例</h3>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;testEmail&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.insert(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="image-20200812020512961.png" alt="image-20200812020512961" /></p>
<p>如果要手动设置生成策略，可以在相关字段上使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二-使用自动填充"><a class="markdownIt-Anchor" href="#二-使用自动填充"></a> 二、使用自动填充</h2>
<h3 id="1-简介-2"><a class="markdownIt-Anchor" href="#1-简介-2"></a> 1、简介</h3>
<p>实际项目中，需要使用一些值来记录数据的操作，例如创建时间、修改时间等等。可以在代码中使用<code>new Date()</code>或者<code>System.currentTimeMillis()</code>，但是这种方式是比较Low的，而且效率也不高。此时可以使用MybatisPlus的自动填充功能，填充策略有以下四种：</p>
<ul>
<li>DEFAULT：默认，不进行处理</li>
<li>INSERT：插入时填充</li>
<li>UPDATE：更新时填充</li>
<li>INSERT_UPDATE：插入和更新时都进行填充</li>
</ul>
<h3 id="2-示例-2"><a class="markdownIt-Anchor" href="#2-示例-2"></a> 2、示例</h3>
<p>首先在数据库新增两个字段，类型均为binint（直接储存时间戳，使用时转换格式。13位为毫秒级时间戳）</p>
<p><img src="image-20200812041008865.png" alt="image-20200812041008865" /></p>
<p>同时实体类也增加相应字段，并且使用注解<code>@TableField</code>表明填充策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">	<span class="keyword">private</span> Long created;</span><br><span class="line">	<span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">	<span class="keyword">private</span> Long updated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后配置一下元对象数据处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">		<span class="type">Long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.now();</span><br><span class="line">		<span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;created&quot;</span>, now, metaObject);</span><br><span class="line">		<span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updated&quot;</span>, now, metaObject);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">		<span class="type">Long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.now();</span><br><span class="line">		<span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updated&quot;</span>, now, metaObject);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：<code>SystemClock</code>是MybatisPlus的工具类，这是对于高并发场景下System.currentTimeMillis()的性能问题的优化实现</p>
<p>插入测试：</p>
<p><img src="image-20200812042020310.png" alt="image-20200812042020310" /></p>
<p>更新测试：</p>
<p><img src="image-20200812042225277.png" alt="image-20200812042225277" /></p>
<p>可以看到对应的填充策略成功生效了</p>
<h2 id="三-乐观锁"><a class="markdownIt-Anchor" href="#三-乐观锁"></a> 三、乐观锁</h2>
<h3 id="1-配置"><a class="markdownIt-Anchor" href="#1-配置"></a> 1、配置</h3>
<p>按照官网<a href="https://baomidou.com/guide/optimistic-locker-plugin.html">实现方式</a>的说明，先在数据库的表中增加一列version字段</p>
<p><em>列名不是固定的，但支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> version <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>实体类中也增加相应的字段并添加<code>@Version</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
<p>然后新建一个配置类，把<code>OptimisticLockerInterceptor</code>作为Bean注入进来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用演示"><a class="markdownIt-Anchor" href="#2-使用演示"></a> 2、使用演示</h3>
<p>更新成功的乐观锁：</p>
<p><img src="image-20200813201617509.png" alt="image-20200813201617509" /></p>
<p>模拟更新失败的乐观锁：</p>
<p>在user对象更新前user2对象抢先执行了更新（同一条数据），那么user更新的数据就不会执行</p>
<p><img src="image-20200813201745484.png" alt="image-20200813201745484" /></p>
<p>注意这里是先查询了数据再执行更新，如果手动new一个对象去设置id，那么乐观锁是不会生效的</p>
<h2 id="四-分页查询"><a class="markdownIt-Anchor" href="#四-分页查询"></a> 四、分页查询</h2>
<p>在上述配置类<code>MybatisPlusConfig</code>中增加一个Bean即可，可以给<code>PaginationInterceptor</code>类增加一些设定。以下是最简示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">userDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">page.getRecords().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>Page对象的构造参数分别为当前页（基1）和每页显示条数</p>
<h2 id="五-逻辑删除"><a class="markdownIt-Anchor" href="#五-逻辑删除"></a> 五、逻辑删除</h2>
<p><a href="https://baomidou.com/guide/logic-delete.html">逻辑删除</a>：与物理删除相对应，即使用一个删除标记来判断是否删除，实际并未删除</p>
<h3 id="1-配置-2"><a class="markdownIt-Anchor" href="#1-配置-2"></a> 1、配置</h3>
<p>首先增加一列字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> deleted <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>实体类也增加相应的字段，同时使用注解标记为表字段逻辑处理（逻辑删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
<p>可以在配置文件中设置逻辑删除值和未删除值（1和0是默认值，可以不设置）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>
<h3 id="2-演示"><a class="markdownIt-Anchor" href="#2-演示"></a> 2、演示</h3>
<p>删除演示：</p>
<p><img src="image-20200813220756290.png" alt="image-20200813220756290" /></p>
<p>查询时也不会看到标记为删除的数据</p>
<p><img src="image-20200813221041407.png" alt="image-20200813221041407" /></p>
<h2 id="六-sql性能分析"><a class="markdownIt-Anchor" href="#六-sql性能分析"></a> 六、SQL性能分析</h2>
<p>3.1.0版本开始，MP推荐使用<a href="https://p6spy.readthedocs.io/en/latest/">p6spy</a>来<a href="https://baomidou.com/guide/p6spy.html">执行SQL分析打印</a>。原来自带的分析插件在3.2.0被移除了</p>
<p>导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为使用这个组件会有性能损耗，不建议生产环境使用，所以可以使用多环境配置文件来进行配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p>然后在application-dev.properties文件中更改下面两个选项</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:p6spy:mysql://localhost:3306/test?useSSL=false</span></span><br></pre></td></tr></table></figure>
<p>新建一个spy.properties文件，内容参考MP官网说明或者p6spy的文档，需要注意的：</p>
<ul>
<li><code>driverlist</code>指定实际驱动</li>
<li><code>logMessageFormat</code>除了可以使用MP实现的日志打印格式，还有<code>com.p6spy.engine.spy.appender</code>包下的<code>MultiLineFormat</code>、<code>CustomLineFormat</code>、<code>SingleLineFormat</code></li>
</ul>
<p>运行示例：</p>
<p><img src="image-20200814165117876.png" alt="image-20200814165117876" /></p>
<h2 id="七-条件构造器"><a class="markdownIt-Anchor" href="#七-条件构造器"></a> 七、条件构造器</h2>
<p><a href="https://baomidou.com/guide/wrapper.html">条件构造器</a>可以用于条件查询，能够执行一些比较复杂的SQL语句</p>
<p><code>AbstractWrapper</code>为条件查询的抽象封装类，实际使用的是其子类<code>QueryWrapper</code>和<code>UpdateWrapper</code></p>
<h3 id="1-部分示例"><a class="markdownIt-Anchor" href="#1-部分示例"></a> 1、部分示例</h3>
<h4 id="查询age大于20的数据按顺序排列"><a class="markdownIt-Anchor" href="#查询age大于20的数据按顺序排列"></a> 查询age大于20的数据，按顺序排列</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userDao.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20200814230747596.png" alt="image-20200814230747596" /></p>
<h4 id="查询id在2和4包括2和4之间并且name中含有a的模糊查询"><a class="markdownIt-Anchor" href="#查询id在2和4包括2和4之间并且name中含有a的模糊查询"></a> 查询id在2和4（包括2和4）之间，并且name中含有a的模糊查询</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList2</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">&quot;id&quot;</span>, <span class="number">2</span>, <span class="number">4</span>).like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userDao.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20200814233205732.png" alt="image-20200814233205732" /></p>
<h4 id="子查询选择部分字段"><a class="markdownIt-Anchor" href="#子查询选择部分字段"></a> 子查询+选择部分字段</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList3</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;age&quot;</span>).inSql(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;select name from user where id &lt; 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    userDao.selectList(wrapper).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20200815010112103.png" alt="image-20200815010112103" /></p>
<h2 id="八-代码生成器"><a class="markdownIt-Anchor" href="#八-代码生成器"></a> 八、代码生成器</h2>
<h3 id="1-简介-3"><a class="markdownIt-Anchor" href="#1-简介-3"></a> 1、简介</h3>
<blockquote>
<p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
</blockquote>
<p>使用介绍：<a href="https://baomidou.com/guide/generator.html">https://baomidou.com/guide/generator.html</a></p>
<p>详细配置：<a href="https://baomidou.com/config/generator-config.html">https://baomidou.com/config/generator-config.html</a></p>
<h3 id="2-示例-3"><a class="markdownIt-Anchor" href="#2-示例-3"></a> 2、示例</h3>
<h4 id="21-导入依赖"><a class="markdownIt-Anchor" href="#21-导入依赖"></a> 2.1 导入依赖</h4>
<blockquote>
<p>MyBatis-Plus 从 3.0.3 之后移除了代码生成器与模板引擎的默认依赖，需要手动添加相关依赖<br />
Velocity 作为默认的模版引擎配置，这里导入依赖仅为了生成文件，不用了解如何使用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="22-编写配置"><a class="markdownIt-Anchor" href="#22-编写配置"></a> 2.2 编写配置</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROJECT_PATH</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SRC_MAIN_JAVA</span> <span class="operator">=</span> <span class="string">&quot;/src/main/java&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHOR</span> <span class="operator">=</span> <span class="string">&quot;VoidSoul&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_DRIVER_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PACKAGE_PARENT</span> <span class="operator">=</span> <span class="string">&quot;com.example&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODULE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 全局配置</span></span><br><span class="line">		<span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">		gc.setOutputDir(PROJECT_PATH + SRC_MAIN_JAVA);</span><br><span class="line">		gc.setAuthor(AUTHOR).setIdType(IdType.AUTO);</span><br><span class="line">		gc.setOpen(<span class="literal">false</span>).setFileOverride(<span class="literal">false</span>)</span><br><span class="line">				.setEnableCache(<span class="literal">false</span>).setKotlin(<span class="literal">false</span>).setSwagger2(<span class="literal">false</span>);</span><br><span class="line">		gc.setEntityName(<span class="string">&quot;%s&quot;</span>).setMapperName(<span class="string">&quot;%sDao&quot;</span>)</span><br><span class="line">				.setServiceName(<span class="string">&quot;%sService&quot;</span>).setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 数据源配置</span></span><br><span class="line">		<span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">		dsc.setDriverName(DB_DRIVER_NAME).setUrl(DB_URL);</span><br><span class="line">		dsc.setUsername(DB_USERNAME).setPassword(DB_PASSWORD);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 数据库表策略配置</span></span><br><span class="line">		<span class="type">StrategyConfig</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">		sc.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">		sc.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">		sc.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">		sc.setInclude(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">		sc.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">		sc.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">		<span class="comment">// 表填充字段</span></span><br><span class="line">		<span class="type">TableFill</span> <span class="variable">created</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;created&quot;</span>, FieldFill.INSERT);</span><br><span class="line">		<span class="type">TableFill</span> <span class="variable">updated</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;updated&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">		sc.setTableFillList(Arrays.asList(created, updated));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 包配置</span></span><br><span class="line">		<span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">		pc.setParent(PACKAGE_PARENT).setModuleName(MODULE_NAME);</span><br><span class="line">		pc.setEntity(<span class="string">&quot;entity&quot;</span>).setMapper(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">		pc.setService(<span class="string">&quot;service&quot;</span>).setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 模版配置</span></span><br><span class="line">		<span class="type">TemplateConfig</span> <span class="variable">tc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateConfig</span>();</span><br><span class="line">		tc.disable(TemplateType.XML, TemplateType.CONTROLLER);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 注入配置，用于自定义</span></span><br><span class="line">		<span class="type">InjectionConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectionConfig</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMap</span><span class="params">()</span> &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// 自定义输出配置</span></span><br><span class="line">		<span class="type">FileOutConfig</span> <span class="variable">foc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutConfig</span>(<span class="string">&quot;/templates/mapper.xml.vm&quot;</span>) &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> String <span class="title function_">outputFile</span><span class="params">(TableInfo tableInfo)</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> PROJECT_PATH + <span class="string">&quot;/src/main/resources/mappers/&quot;</span></span><br><span class="line">						+ tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		cfg.setFileOutConfigList(Collections.singletonList(foc));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 生成器聚合配置、执行生成</span></span><br><span class="line">		<span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">		mpg.setGlobalConfig(gc);</span><br><span class="line">		mpg.setDataSource(dsc);</span><br><span class="line">		mpg.setStrategy(sc);</span><br><span class="line">		mpg.setPackageInfo(pc);</span><br><span class="line">		mpg.setTemplate(tc);</span><br><span class="line">		mpg.setCfg(cfg);</span><br><span class="line">		mpg.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行以上配置将在当前工程的<code>com.example.test</code>包下根据<code>user</code>表创建<code>entity</code>、<code>dao</code>和<code>service</code>包并生成相应文件（在模版配置里禁用了生成<code>controller</code>），在<code>resources</code>下创建<code>mappers</code>包并生成xml文件。</p>
<p>需要注意的：</p>
<ul>
<li>必须导入模版引擎依赖，否则生成器无法执行</li>
<li>在官网详细配置或源码文档中可以找到所有的设置，非常多</li>
<li>基本上所有的setXXX方法都支持链式调用</li>
<li>自定义配置在输出文件时会被优先执行</li>
<li>配置的数据源仅用于生成器连接数据库访问数据表</li>
<li>没有使用set的配置（包括配置对象自身），会使用默认的配置</li>
</ul>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL入门</title>
    <url>/mysql-abc/</url>
    <content><![CDATA[<h2 id="一-介绍"><a class="markdownIt-Anchor" href="#一-介绍"></a> 一、介绍</h2>
<p><a href="https://www.mysql.com/">MySQL</a>是最流行的开源关系数据库管理系统（RDBMS，Relational Database Management System），最初由瑞典的MySQL AB公司开发，后被Sun公司收购，Sun公司又被Oracle公司收购，所以现在MySQL为Oracle旗下的产品，Oracle对其继续开发、发布和提供支持。</p>
<span id="more"></span>
<p>其特点有：</p>
<ul>
<li>支持多种操作系统。并且为许多编程语言提供了API，包括C、C++、C#、<a href="http://VB.NET">VB.NET</a>、Delphi、Eiffel、Java、Perl、PHP、Python、Ruby等等。</li>
<li>使用高度优化的类库实现SQL函数，该类库应尽可能快。通常在查询初始化之后根本没有内存分配。</li>
<li>既能够作为一个单独的应用程序在客户端服务器网络环境中运行，也能够作为一个程序库而嵌入到其他的软件中。</li>
<li>提供多语言支持，常见的编码如中文的GB 2312、BIG5，日文的Shift JIS等都可以用作数据表名和数据列名。</li>
<li>提供TCP/IP、ODBC和JDBC等多种数据库连接途径。</li>
<li>采用具有独立模块的多层服务设计。</li>
<li>提供事务性和非事务性存储引擎。</li>
<li>使用非常快速的B树磁盘表（MyISAM）和索引压缩。</li>
<li>使用非常快速的基于线程的内存分配系统。支持多线程与多用户。</li>
</ul>
<p>MySQL语句可以分为以下四种：</p>
<ul>
<li>数据定义语言（DDL）：create，drop，alter</li>
<li>数据操作语言（DML）：insert，delete，update</li>
<li>数据查询语言（DQL）：select</li>
<li>数据控制语言（DCL）：grant，revoke。主要是控制用户访问权限</li>
</ul>
<h3 id="1-关系型数据库与非关系型数据库"><a class="markdownIt-Anchor" href="#1-关系型数据库与非关系型数据库"></a> 1、关系型数据库与非关系型数据库</h3>
<p>关系型数据库即创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据，现实世界中的各种实体以及实体之间的各种联系均使用关系模型来表示。关系模型由<strong>关系数据结构</strong>、<strong>关系操作集合</strong>和<strong>关系完整性约束</strong>三部分组成。常见的RDBMS有MySQL、Microsoft SQL Server、Oracle、PostgreSQL、SQLite、Apache Derby、HSQLDB、H2等等</p>
<blockquote>
<p>标准数据查询语言SQL就是一种基于关系数据库的语言，这种语言执行对关系数据库中数据的检索和操作。</p>
</blockquote>
<p>既然有关系型数据库，那就有非关系型数据库（NoSQL，最初表示Non-SQL，后被另解为Not only SQL），这是对不同于传统的RDBMS的统称。具体分类有用于文档存储的MongoDB，用于图形数据的Neo4j、JanusGraph，以键值对方式存储Redis、memcached、LevelDB、BigTable。非关系型数据库可以作为关系型数据库的缓存使用</p>
<blockquote>
<p>当代典型的关系数据库在一些数据敏感的应用中表现了糟糕的性能，例如为巨量文档创建索引、高流量网站的网页服务，以及发送流式媒体。关系型数据库的典型实现主要被调整用于执行规模小而读写频繁，或者大批量读而极少写访问的事务。</p>
</blockquote>
<h2 id="二-安装与配置"><a class="markdownIt-Anchor" href="#二-安装与配置"></a> 二、安装与配置</h2>
<p>MySQL分为免费的社区版与收费的标准版、企业版。一般情况下使用社区版（Community）即可。</p>
<h3 id="1-下载"><a class="markdownIt-Anchor" href="#1-下载"></a> 1、下载</h3>
<p>这里以MySQL 5.7免安装版（Windows）为例，在<a href="https://downloads.mysql.com/archives/community/">版本存档页</a>中选择32位或者64位（对应操作系统）压缩包下载，然后解压到需要的位置。可以查阅官方<a href="https://dev.mysql.com/doc/refman/5.7/en/index.html">参考手册</a>中2.3.4 Installing MySQL on Microsoft Windows Using a noinstall ZIP Archive的说明。</p>
<p><img src="image-20210515165954537.png" alt="image-20210515165954537" /></p>
<h3 id="2-配置"><a class="markdownIt-Anchor" href="#2-配置"></a> 2、配置</h3>
<p>免安装版解压后还不能直接使用，需要做一些配置</p>
<h4 id="21-创建配置文件"><a class="markdownIt-Anchor" href="#21-创建配置文件"></a> 2.1 创建配置文件</h4>
<p>在根目录中新建一个<code>my.ini</code>文件，参考配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>=E:\\Environment\\mysql</span><br><span class="line"><span class="attr">datadir</span>=E:\\Environment\\mysql\\data</span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br></pre></td></tr></table></figure>
<p><code>basedir</code>和<code>datadir</code>为必选项，其分别指向mysql的根目录和数据文件目录，在Windows中路径分隔符使用斜杠<code>/</code>或者双反斜杠<code>\\</code></p>
<p><strong>注意此时不要去新建data文件夹</strong></p>
<blockquote>
<p>在Windows中，MySQL按下述从上到下指定的顺序读取启动选项文件（先ini再cnf）：</p>
<ul>
<li>%WINDIR%\my.ini, %WINDIR%\my.cnf</li>
<li>C:\my.ini, C:\my.cnf</li>
<li>BASEDIR\my.ini, BASEDIR\my.cnf</li>
<li>通过命令参数–defaults-extra-file指定</li>
<li>%APPDATA%\MySQL\.mylogin.cnf，登录路径（仅客户端）</li>
</ul>
</blockquote>
<h4 id="22-初始化数据目录"><a class="markdownIt-Anchor" href="#22-初始化数据目录"></a> 2.2 初始化数据目录</h4>
<p>在bin目录中以管理员模式打开cmd，使用以下命令进行初始化，默认情况下超级用户名为<code>root</code>，会随机生成一个临时密码，或者使用<code>--initialize-insecure</code>不生成密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure>
<p>增加<code>--console</code>选项来查看过程日志，最后一行<code>root@localhost:</code>后即为随机生成的密码</p>
<h4 id="23-启动服务器并修改密码"><a class="markdownIt-Anchor" href="#23-启动服务器并修改密码"></a> 2.3 启动服务器并修改密码</h4>
<p>还是在bin目录，执行<code>mysqld --console</code>命令，出现如下字样即为启动成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld: ready for connections.</span><br><span class="line">Version: &#x27;5.7.33&#x27;  socket: &#x27;&#x27;  port: 3306  MySQL Community Server (GPL)</span><br></pre></td></tr></table></figure>
<p>此时可以打开一个新的控制台窗口用来运行客户端程序进行连接，或者使用<code>start mysqld</code>在新窗口中启动。在部分版本运行mysqld会一直显示控制台窗口，可以使用<a href="https://github.com/wenshui2008/RunHiddenConsole">RunHiddenConsole</a>使mysqld后台运行</p>
<blockquote>
<p>如果省略<code>--console</code>选项，则MySQL服务器会将日志输出到数据目录下带有.err扩展名的文本文件中，可以使用<code>--log-error</code>选项另行指定日志保存路径。</p>
</blockquote>
<p>使用<code>mysql -u root -p</code>命令登录mysql客户端，输入生成的密码，显示<code>mysql&gt;</code>与一个闪烁的光标时，便进入了mysql客户端，使用下面这条命令来修改密码（初始化时mysql将随机密码标记为已过期，所以必须修改）。注意单引号以及最后的分号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;new password&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>显示<code>Query OK, 0 rows affected (0.00 sec)</code>即为修改成功，然后输入<code>exit</code>或者<code>quit</code>或者<code>\q</code>退出（无需分号）</p>
<p>如果使用<code>--initialize-insecure</code>选项进行的初始化，首次登录时使用下面这条命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="comment">--skip-password</span></span><br></pre></td></tr></table></figure>
<h4 id="24-添加到环境变量可选"><a class="markdownIt-Anchor" href="#24-添加到环境变量可选"></a> 2.4 添加到环境变量（可选）</h4>
<p>为了便于在所有路径都能使用mysql，可以在环境变量中添加变量<code>%MYSQL_HOME%</code>，值指向mysql的根目录。然后在<strong>PATH</strong>变量中添加<code>%MYSQL_HOME%\bin</code>（与其它值之间使用分号分隔）</p>
<h4 id="25-配置为服务可选"><a class="markdownIt-Anchor" href="#25-配置为服务可选"></a> 2.5 配置为服务（可选）</h4>
<p>更方便的形式是将mysql安装到Windows服务当作，安装前需要先关闭mysql服务器。安装命令不会启动服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br><span class="line">mysqld --install-manual #安装服务为手动启动</span><br></pre></td></tr></table></figure>
<p>在命令后可以指定安装服务的名称，默认服务名为<code>MySQL</code>；还可以使用<code>--defaults-file=file_name</code>指定配置文件（的路径）</p>
<ul>
<li>启动服务：<code>net start MySQL</code></li>
<li>停止服务：<code>net stop MySQL</code></li>
<li>卸载服务：<code>sc delete MySQL</code>或者<code>mysqld --remove</code></li>
</ul>
<h4 id="26-精简文件可选"><a class="markdownIt-Anchor" href="#26-精简文件可选"></a> 2.6 精简文件（可选）</h4>
<p><img src="image-20210515170731937.png" alt="image-20210515170731937" /></p>
<p>如上图，考虑压缩率，解压后有1G以上的大小，可以删除其中部分不影响运行的文件来精简大小（不推荐生产环境这样做）</p>
<ul>
<li>lib文件夹</li>
<li>bin目录下的pdb文件（调试用），带有embedded、test字样的文件（嵌入以及测试用）</li>
</ul>
<hr />
<p>这里我制作了一个批处理脚本文件便于上述配置命令的使用，下载后放入mysql根目录即可。点击下载：<a href="mysql.bat">mysql.bat</a></p>
<h2 id="三-语句结构与语法"><a class="markdownIt-Anchor" href="#三-语句结构与语法"></a> 三、语句结构与语法</h2>
<h3 id="1-字面值"><a class="markdownIt-Anchor" href="#1-字面值"></a> 1、字面值</h3>
<p>字符串、不同进制的数字、布尔值、空值等被称为字面值。其中布尔值使用<code>true</code>和<code>false</code>表示（不区分大小写）</p>
<h4 id="11-数字"><a class="markdownIt-Anchor" href="#11-数字"></a> 1.1 数字</h4>
<p>数字同一般程序语言中的数字表示，额外的，16进制数字可以用<code>X'val'</code>表示（val为16进制数，X区分大小写），此表示法需要注意的是数字位数必须为偶数，可以在前面添加0来避免此问题。同时，使用<code>0xval</code>表示（区分大小写）的值数字位数为奇数时将会被添加额外的前导0。<code>X''</code>表示0</p>
<p>二进制值使用<code>b'01'</code>（不区分大小写）或者<code>0b01</code>（区分大小写）表示</p>
<h4 id="12-字符串"><a class="markdownIt-Anchor" href="#12-字符串"></a> 1.2 字符串</h4>
<p>字符串使用单引号或双引号括起来，彼此相邻的带引号的字符串将会被串联为单个字符串，与c语言相似，mysql也具有转义字符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">转义序列</th>
<th style="text-align:left">表示含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\0</code></td>
<td style="text-align:left">ASCII码0（不是数字0）NUL，表示空字符</td>
</tr>
<tr>
<td style="text-align:left"><code>\'</code></td>
<td style="text-align:left">单引号</td>
</tr>
<tr>
<td style="text-align:left"><code>\&quot;</code></td>
<td style="text-align:left">双引号</td>
</tr>
<tr>
<td style="text-align:left"><code>\b</code></td>
<td style="text-align:left">退格符</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td style="text-align:left">换行符</td>
</tr>
<tr>
<td style="text-align:left"><code>\r</code></td>
<td style="text-align:left">回车符</td>
</tr>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td style="text-align:left">制表符</td>
</tr>
<tr>
<td style="text-align:left"><code>\Z</code></td>
<td style="text-align:left">ASCII码26，SUB，表示代替</td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td style="text-align:left">反斜杠</td>
</tr>
<tr>
<td style="text-align:left"><code>\%</code></td>
<td style="text-align:left">百分号符</td>
</tr>
<tr>
<td style="text-align:left"><code>\_</code></td>
<td style="text-align:left">下划线</td>
</tr>
</tbody>
</table>
<h3 id="2-标识符"><a class="markdownIt-Anchor" href="#2-标识符"></a> 2、标识符</h3>
<p>MySQL中的数据库，表，列，索引，别名，视图，存储过程等对象的名称被称为标识符。使用规则：</p>
<ul>
<li>标识符可以带引号（特指反引号）或不带引号表示，如果包含特殊字符或为保留字，则在使用时必须使用引号；</li>
<li>特别的，因为限定名点号后的字符必须是标识符，所以即使使用保留字也无需带引号（限定名即，<code>表名.列名</code>或<code>数据库.表名</code>或<code>数据库.表名.列名</code>表示的形式）；</li>
<li>标识符可以以数字开头，但除非加引号，否则不能仅由数字组成；</li>
<li>数据库，表和列的名称不能以空格结尾；</li>
<li>标识符的字符最大长度为64，例外的，别名为256，复合语句标签为16</li>
<li>在mysql内部，标识符被转换并使用UTF-8编码存储，其具有以下限制：
<ul>
<li>不带引号表示的标识符可以使用的字符范围：ASCII:码的[0-9,a-z,A-Z$_]，Unicode码的U+0080到U+FFFF；</li>
<li>带引号表示的标识符可以使用的字符范围：ASCII码的U+0001到U+007F，Unicode码的U+0080到U+FFFF；</li>
<li>无法使用ASCII码0，即NUL空字符和补充字符（U+10000即以上）</li>
</ul>
</li>
</ul>
<p>因为数据库、表与data目录中的文件(夹)相对应，所以mysql中的标识符是否区分大小写取决于文件储存系统类型，在Linux中区分大小写，在Windows中不区分大小写。列、列的别名、索引、存储过程和事件名称在任何平台上都不区分大小写</p>
<blockquote>
<p>为了保证一致性、可移植性和易用性，建议始终使用小写字母、反引号表示的标识符</p>
</blockquote>
<h3 id="3-关键字与保留字"><a class="markdownIt-Anchor" href="#3-关键字与保留字"></a> 3、关键字与保留字</h3>
<p>参考<a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html#keywords-in-current-series">MySQL5.7的关键字与保留字</a>列表。关键字是指在SQL语句中具有特殊含义的单词，其中又分为保留关键字和非保留关键字，保留关键字是mysql从关键字中保留使用的标识符，需要特殊处理才能用作表名和列名等标识符。关键字不区分大小写</p>
<p>允许使用非保留关键字作为标识符而无需引号，如果要使用保留关键字作为标识符，则必须加引号。</p>
<h3 id="4-变量"><a class="markdownIt-Anchor" href="#4-变量"></a> 4、变量</h3>
<p>MySQL中的变量分为局部变量、用户变量和系统变量，其中系统变量又分为全局系统变量和会话系统变量。</p>
<p>直接使用标识符(不以@为前缀)声明的就是局部变量，它是强类型的，并且被限定在被声明并存储的程序块中，局部变量不能在函数或存储过程以外访问。</p>
<h4 id="41-用户变量"><a class="markdownIt-Anchor" href="#41-用户变量"></a> 4.1 用户变量</h4>
<p>用户变量是以<code>@</code>为前缀表示变量名，限定于会话中的一种变量（一个客户端中定义的用户变量不能被其他客户端读写）。变量名可以使用字母、数字、<code>.</code>、<code>_</code>或<code>$</code>，如果使用字符串或标识符表示，则可以使用其它字符。变量名对大小写不敏感，最大长度为64个字符。变量值可以为整数、实数、字符串或者NULL。</p>
<p>使用<code>SET</code>语句和<code>=</code>或<code>:=</code>符号来赋值，后者区别在于永远不会被视为比较运算符</p>
<blockquote>
<p>变量最开始被赋值的数据类型会被作为变量的类型</p>
</blockquote>
<p><img src="image-20210519023708289.png" alt="image-20210519023708289" /></p>
<p>如上图所示，使用十六进制或bit值分配给用户变量时将会被视为二进制字符串。要将十六进制或bit值作为数字分配给用户变量，则需要与0进行计算或使用CAST函数（后面介绍）</p>
<ul>
<li>没有初始化的变量，值为NULL</li>
<li>在SELECT语句中，每个SELECT表达式仅在发送到客户端后才进行计算</li>
<li>用户变量不能在语句中直接用作标识符或作为标识符的一部分</li>
</ul>
<blockquote>
<p>不要在语句中为用户变量分配值后在同一语句的其它部分使用此变量，因为涉及用户变量的表达式的求值顺序是不确定的，所以可能会得到非预期的结果。所以建议只使用<code>SET</code>语句进行赋值</p>
</blockquote>
<h4 id="42-系统变量"><a class="markdownIt-Anchor" href="#42-系统变量"></a> 4.2 系统变量</h4>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variable-reference.html">系统变量</a>分为能影响整个服务器的全局系统变量，也可以是影响当前会话的会话系统变量，或者两者都是。</p>
<ul>
<li>许多系统变量是动态的，即可以在运行时修改，用于操作当前运行的MySQL服务器（要使全局系统变量永久设置，需要在配置文件中进行设置，并重启服务器）</li>
<li>会话系统变量值的更改仅在当前会话中有效，对其他会话没有影响。</li>
<li>当前会话仅能更改自己的会话系统变量，不能更改其它会话的会话系统变量。</li>
<li>如果更改全局系统变量，则会保存该值并用于应用于新会话。更改的值不会影响任何当前客户端会话的值（包括更改此值的会话）</li>
</ul>
<p>使用如下语法来更改全局系统变量；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> 全局变量名 <span class="operator">=</span> 新值;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@GLOBAL</span>.全局变量名 <span class="operator">=</span> 新值;</span><br></pre></td></tr></table></figure>
<p>使用如下语法来更改会话系统变量。<code>LOCAL</code>等同于<code>SESSION</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION 会话变量名 <span class="operator">=</span> 新值;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@SESSION</span>.会话变量名 <span class="operator">=</span> 新值;</span><br><span class="line"><span class="keyword">SET</span> @@会话变量名 <span class="operator">=</span> 新值;</span><br><span class="line"><span class="keyword">SET</span> 会话变量名 <span class="operator">=</span> 新值;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果SET语句中的任何变量赋值失败，则整个语句都会失败，并且不会更改任何变量。</p>
</li>
<li>
<p>使用<code>SHOW VARIABLES </code>来显示所有系统变量值。</p>
</li>
<li>
<p>不指定GLOBAL.、SESSION.或者LOCAL时，如果存在则返回SESSION值，否则返回GLOBAL值。</p>
</li>
</ul>
<h3 id="5-注释"><a class="markdownIt-Anchor" href="#5-注释"></a> 5、注释</h3>
<p>MySQL中有三种格式的注释：</p>
<ul>
<li>单行注释使用<code>#</code>开头</li>
<li>以<code>--</code>开始并结尾的注释，要求在第二个破折号后必须有一个空格或控制字符</li>
<li>与c语言相同的，使用<code>/*</code>开始<code>*/</code>结尾的多行注释</li>
</ul>
<p>关于第三种注释，有一种变体：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! MySQL-specific code */</span></span><br></pre></td></tr></table></figure>
<p>这种注释用来编写MySQL扩展、可移植的代码，其中的代码仅供MySQL使用。还可以在<code>!</code>后添加版本号，仅当MySQL版本大于或等于指定的版本号时，才会执行注释中的语句</p>
<h2 id="四-数据类型"><a class="markdownIt-Anchor" href="#四-数据类型"></a> 四、数据类型</h2>
<p>MySQL支持多种数据类型，按大类分有数字类型、日期和时间类型、字符串类型、空间（地理位置）类型。其下又分有各种子类型</p>
<p>MySQL中没有真正的布尔类型，类似C语言，0和空字符串表示false，1和其他表示true</p>
<p>关于空间类型比较复杂，不是很常用，可以参考MySQL手册<a href="https://dev.mysql.com/doc/refman/5.7/en/spatial-types.html">11.4 Spatial Data Types</a></p>
<h3 id="1-关于null值"><a class="markdownIt-Anchor" href="#1-关于null值"></a> 1、关于NULL值</h3>
<p>在MySQL中，<code>NULL</code>是一个特殊的数据类型，具有以下特征</p>
<ul>
<li><code>NULL</code>不代表空字符串，与大多数算术、比较运算符以及函数中的运算结果均为<code>NULL</code></li>
<li><code>NULL</code>表示false</li>
<li>在排序中<code>NULL</code>被视为最小值，在分组中两个<code>NULL</code>值被视为相等的</li>
<li><code>UNKNOWN</code>为<code>NULL</code>的同义词</li>
<li>特殊日期0/0/0是NULL</li>
</ul>
<h3 id="2-数字类型"><a class="markdownIt-Anchor" href="#2-数字类型"></a> 2、数字类型</h3>
<p>数字类型有：</p>
<ul>
<li>整数：tinyint、smallint、mediumint、int、bigint。存储长度分别为1、2、3、4、8字节
<ul>
<li>二进制：bit</li>
</ul>
</li>
<li>小数
<ul>
<li>浮点数：float、double。存储长度分别为4、8字节</li>
<li>定点数：decimal</li>
</ul>
</li>
</ul>
<p>其中整数和定点数又被称为精准数值类型，浮点数被称为近似数值类型。整数和小数都支持无符号类型，但是后者的无符号类型不会增加其最大范围</p>
<p>可以使用附加参数来指定显示的位数，不影响实际的取值范围。其中整数字段存储超出指定范围的数字时，MySQL会根据允许范围从最接近它的一端截短后再进行存储；小数的附加参数包括总的显示位数和几位小数，小数点后面的位数允许超过指定范围的值，MySQL会自动将它四舍五入为最接近的值。定点数的显示位数不能超过65，小数位数不能超过30</p>
<p>关于越界和溢出的处理参考MySQL手册<a href="https://dev.mysql.com/doc/refman/5.7/en/out-of-range-and-overflow.html">11.1.7 Out-of-Range and Overflow Handling</a></p>
<h3 id="3-日期和时间"><a class="markdownIt-Anchor" href="#3-日期和时间"></a> 3、日期和时间</h3>
<p>日期与时间类型包括date、time、datetime、timestamp和year</p>
<ul>
<li>date表示日期，格式为<code>YYYY-MM-DD</code>，3字节长度，范围1000-01-01到9999-12-31</li>
<li>time表示时间或时间间隔，格式为<code>hh:mm:ss</code>，3字节长度，范围-838:59:59到838:59:59</li>
<li>datetime表示日期和时间，格式为<code>YYYY-MM-DD hh:mm:ss</code>，5字节长度（MySQL 5.6.4以后），范围1000-01-01 00:00:00到9999-12-31 23:59:59</li>
<li>timestamp表示时间戳，即从UTC时间1970年1月1日0时0分0秒开始经过的秒数。4字节长。范围1970-01-01 00:00:01 UTC到2038-01-19 03:14:07 UTC。不包括第0秒，因为0表示<code>0000-00-00 00:00:00</code></li>
<li>year表示年，格式<code>YYYY</code>，1字节长，范围1901到2155或者0000</li>
</ul>
<p>time、datetime和timestamp的存储长度还包括分秒，其根据精度有所不同，最多3字节</p>
<h3 id="4-字符串"><a class="markdownIt-Anchor" href="#4-字符串"></a> 4、字符串</h3>
<p>字符串类型包括</p>
<ul>
<li>字符串：char、varchar</li>
<li>文本：tinytext、text、mediumtext、longtext<br />
最大存储长度分别为255、65535、16777215、4294967295，以及1、2、3、4个字节用于存储长度值</li>
<li>二进制数据：tinyblob、blob、mediumblob、longblob<br />
最大存储长度同文本类型</li>
<li>枚举：enum</li>
<li>集合：set</li>
<li>JSON</li>
</ul>
<h4 id="41-char-text和blob"><a class="markdownIt-Anchor" href="#41-char-text和blob"></a> 4.1 char、text和blob</h4>
<p>char使用固定长度存储，最多255个字符，在存储时比指定长度大的值将被截掉，比指定长度小的值将会用空格填充到末尾，检索时将删除尾部的空格。<br />
varchar即character varying，可变长度字符串，最多存储65535个字符，实际长度是所存储字符串长度，再加上1或2字节（如果指定最大长度&lt;255则为1字节）用于存储字符串长度。</p>
<p>text和blob的区别：</p>
<ul>
<li>两者存储方式不同，text以文本存储，blob以二进制方式存储</li>
<li>text区分大小写，blob不区分大小写</li>
<li>text可以指定字符集，blob不用指定字符集</li>
<li>两者都不能指定默认值，但是和varchar一样都是可变长度</li>
</ul>
<h4 id="42-枚举"><a class="markdownIt-Anchor" href="#42-枚举"></a> 4.2 枚举</h4>
<p>枚举属于字符串对象，其值只允许从表创建时的列中指定的集合中选择一个，类似于单选项。枚举可以使用空值。字段中插入非预定义的值都会使 MySQL插入一个空字符串。如果插入值的大小写与集合中的值的大小写不匹配，MySQL则将插入值的大小写转换为集合中大小写一致的值。一个枚举类型最多可以包含65535个不同的元素（实际小于3000），其中一个元素被保留用作存储错误信息，这个错误值用一个空字符串表示，其索引为0。</p>
<p>枚举的限制：</p>
<ol>
<li>枚举值不能是表达式，即使是值为字符串的表达式</li>
<li>不能将用户变量用作枚举值</li>
<li>使用数字值作为枚举时，建议使用引号。如果省略引号，该数字将被视为索引</li>
</ol>
<h4 id="43-集合"><a class="markdownIt-Anchor" href="#43-集合"></a> 4.3 集合</h4>
<p>set集合与枚举相似，但是是从指定的集合中取得0个或多个值。同样的，任何试图在set类型字段中插入非指定的值都会变成空字符串。如果插入一个即含有指定元素又含有非指定元素的值，MySQL将会保留指定元素，除去非指定的元素。set类型最多可以有64个不同的元素，不能存在任何相同的元素。</p>
<h4 id="44-json"><a class="markdownIt-Anchor" href="#44-json"></a> 4.4 JSON</h4>
<p>从MySQL 5.7.8开始，MySQL支持原生JSON的数据类型，该类型还支持对JSON中数据的访问。通常情况下，JSON类型的存储范围与longtext/longblob大致相同。JSON类型不能有非空的默认值。与存储为JSON格式的字符串相比，JSON数据类型具有以下优势：</p>
<ul>
<li>自动验证存储在JSON列中的JSON数据。无效数据会产生错误</li>
<li>优化的存储格式。存储为JSON数据类型的值被转换为允许对JSON元素进行快速读取访问的内部格式</li>
</ul>
<h3 id="5-各数据类型的默认值"><a class="markdownIt-Anchor" href="#5-各数据类型的默认值"></a> 5、各数据类型的默认值</h3>
<p>默认值分为显式默认值与隐式默认值。显式默认值即在定义时指定默认值，除TIMESTAMP和DATETIME外，显式指定的默认值必须为字面值，不能是函数或表达式，BLOB、TEXT、GEOMETRY和JSON不能指定默认值。</p>
<p>没有显式指定默认值时使用隐式默认值，如果该字段可以为<code>NULL</code>，则使用<code>NULL</code>，如果不能为<code>NULL</code>，则</p>
<ul>
<li>对于数字类型，默认值为0（指定了自增的除外）</li>
<li>对于除TIMESTAMP以外的日期和时间类型，默认值为该类型对应的“零值”；TIMESTAMP则为当前日期与时间值</li>
<li>对于除枚举以外的字符串类型，默认值为空字符串，对于枚举，则为枚举的第一个值</li>
</ul>
<h2 id="五-运算符"><a class="markdownIt-Anchor" href="#五-运算符"></a> 五、运算符</h2>
<p>运算符，以及操作符，通常用于表达式，以及常量值、变量值、列名等。</p>
<h3 id="1-比较运算符"><a class="markdownIt-Anchor" href="#1-比较运算符"></a> 1、比较运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;、&lt;、&gt;=、&lt;=、</td>
<td>大于、小于、大于或等于、小于或等于</td>
</tr>
<tr>
<td>&lt;&gt;、!=</td>
<td>不等于</td>
</tr>
<tr>
<td>=、&lt;=&gt;</td>
<td>等于、空值安全的等于</td>
</tr>
<tr>
<td>BETWEEN 值1 AND 值2、NOT BETWEEN 值1 AND 值2</td>
<td>值是否在两者之间、值是否不在两者之间。前者闭区间，后者相反</td>
</tr>
<tr>
<td>IS、IS NOT、IS NULL、IS NOT NULL</td>
<td>是否为某个值、是否不为某个值、是否为空、是否非空</td>
</tr>
<tr>
<td>LIKE、NOT LIKE</td>
<td>用于简单的模式匹配</td>
</tr>
</tbody>
</table>
<ul>
<li>通常这些操作适用于数字和字符串，字符串会自动转换为数字，数字会根据需要转换为字符串。</li>
<li>字符串比较默认不区分大小写，并使用定义的校对集作为排序规则（默认为latin1/ISO-8859-1，兼容ASCII，支持中文）</li>
<li>在MySQL中任何与NULL的运算结果都为NULL，但额外的<code>&lt;=&gt;</code>会考虑空值，即<code>1 &lt;=&gt; NULL</code>的结果为假。没有空值安全的不等于比较运算符，可以使用<code>NOT (1 &lt;=&gt; NULL)</code>的方式</li>
</ul>
<h3 id="2-逻辑与位运算符"><a class="markdownIt-Anchor" href="#2-逻辑与位运算符"></a> 2、逻辑与位运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>AND、&amp;&amp;</td>
<td>逻辑与</td>
</tr>
<tr>
<td>NOT、!</td>
<td>逻辑非</td>
</tr>
<tr>
<td>OR、||</td>
<td>逻辑或</td>
</tr>
<tr>
<td>XOR</td>
<td>逻辑异或</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
</tr>
<tr>
<td>~</td>
<td>按位取反</td>
</tr>
<tr>
<td>&gt;&gt;、&lt;&lt;</td>
<td>右移、左移</td>
</tr>
</tbody>
</table>
<ul>
<li>MySQL中，所有非0，非空值都被视为真，0被视为假</li>
<li>与：如果所有操作数均为非零且不为空，则结果为1；如果一个或多个操作数为0，则结果为0，否则为空</li>
<li>非：如果操作数为0，则结果为1；如果操作数非零，则结果为0，<code>NOT NULL</code>结果为<code>NULL</code></li>
<li>或：当两个操作数都非空时，且非零时，结果为1，否则为0。对于空值，如果另一个操作数不为零，则结果为1，否则为空。如果两个操作数都为空，则结果为空</li>
<li>异或：如果任一操作数为空，则返回空。对于非空操作数，如果两个操作数不同（一真一假）则结果为1，否则为0。a与b的异或在数学上相当于<code>a AND (NOT b))</code>或者<code>((NOT a) and b)</code></li>
<li>位运算的结果都将返回无符号的64位整数，对于移位操作，如果超过64位整数的上限，则结果为0</li>
</ul>
<h3 id="3-算术与赋值运算符"><a class="markdownIt-Anchor" href="#3-算术与赋值运算符"></a> 3、算术与赋值运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%、MOD</td>
<td>取模、取余、求余数</td>
</tr>
<tr>
<td>+、-</td>
<td>加和减，也可作为更改数值的符号</td>
</tr>
<tr>
<td>*、/</td>
<td>乘和除</td>
</tr>
<tr>
<td>DIV</td>
<td>整除</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>:=</td>
<td>同上，但永远是赋值运算，不会被解释为比较操作</td>
</tr>
</tbody>
</table>
<ul>
<li>对于加减乘法，如果两边均为整数，则以bigint的精度作计算结果</li>
<li>进行运算时，如果两边均为整数且其中至少一个是无符号类型，则结果也为无符号整数</li>
<li>加减乘除和取余操作对于实数和字符串，结果的精度以其中最大范围的为准</li>
<li>除法中，结果的保留小数位数为第一个操作数的小数位数加上系统变量<code>div_precision_increment</code>的值（默认为4）</li>
<li>0作为除数会产生NULL值</li>
<li>=仅在SET语句和UPDATE语句中作为赋值操作，在任何其它地方会被视为比较操作</li>
</ul>
<h3 id="4-其它运算符"><a class="markdownIt-Anchor" href="#4-其它运算符"></a> 4、其它运算符</h3>
<ul>
<li><code>LIKE</code>和<code>NOT LIKE</code>：用于基于模式匹配的字符串比较</li>
<li><code>BINARY</code>：通常用于在字符串比较中，转换为二进制字符串进行比较，即区分大小写</li>
<li><code>REGEXP</code>：用于基于正则表达式的字符串匹配，同义的是<code>RLIKE</code>，相反的有<code>NOT REGEXP</code>、<code>NOT RLIKE</code></li>
</ul>
<h3 id="5-运算符优先级"><a class="markdownIt-Anchor" href="#5-运算符优先级"></a> 5、运算符优先级</h3>
<p>各运算符的优先级如下，上面最高下面最低，对于在表达式中以相同优先级出现的运算符，将按从左到右的顺序，赋值运算则是从右至左。可以使用括号来改变优先级</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">BINARY</span></span><br><span class="line"><span class="operator">!</span></span><br><span class="line"><span class="operator">-</span> (作为一元运算符时), <span class="operator">~</span></span><br><span class="line"><span class="operator">^</span></span><br><span class="line"><span class="operator">*</span>, <span class="operator">/</span>, DIV, <span class="operator">%</span>, MOD</span><br><span class="line"><span class="operator">-</span>, <span class="operator">+</span></span><br><span class="line"><span class="operator">&lt;&lt;</span>, <span class="operator">&gt;&gt;</span></span><br><span class="line"><span class="operator">&amp;</span></span><br><span class="line"><span class="operator">|</span></span><br><span class="line"><span class="operator">=</span> (作为比较操作符时), <span class="operator">&lt;=&gt;</span>, <span class="operator">&gt;=</span>, <span class="operator">&gt;</span>, <span class="operator">&lt;=</span>, <span class="operator">&lt;</span>, <span class="operator">&lt;&gt;</span>, <span class="operator">!=</span>, <span class="keyword">IS</span>, <span class="keyword">LIKE</span>, REGEXP</span><br><span class="line"><span class="keyword">BETWEEN</span></span><br><span class="line"><span class="keyword">NOT</span></span><br><span class="line"><span class="keyword">AND</span>, <span class="operator">&amp;&amp;</span></span><br><span class="line">XOR</span><br><span class="line"><span class="keyword">OR</span>, <span class="operator">||</span></span><br><span class="line"><span class="operator">=</span> (作为赋值运算符时), :<span class="operator">=</span></span><br></pre></td></tr></table></figure>
<h2 id="六-命令行中的操作"><a class="markdownIt-Anchor" href="#六-命令行中的操作"></a> 六、命令行中的操作</h2>
<p>除了前面配置过程中使用的命令外，这节介绍MySQL命令行的使用。之后的操作默认已登录MySQL客户端</p>
<p><img src="image-20210521171317504.png" alt="image-20210521171317504" /></p>
<p>使用<code>SELECT</code>可以进行查询或者计算，输出以表格形式显示，第一行为表头，之后各行是结果。</p>
<ul>
<li>通常，表头是从数据库表中获取的列名。如上这样使用表达式时则会使用表达式本身作为表头。</li>
<li>最后会显示返回了多少行以及查询执行了多长时间，但并不是精确值</li>
<li>语句中的所有关键字均不区分大小写，所以<code>SELECT</code>和<code>select</code>是等效的</li>
</ul>
<p>大部分语句以分号结尾，所以MySQL能同时接收一条或多条语句的输入，也不限制一行中语句的数量，或者一条语句书写多行。以下是命令行中各提示的含义：</p>
<table>
<thead>
<tr>
<th style="text-align:left">提示符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>mysql&gt;</code></td>
<td style="text-align:left">准备接收新的语句</td>
</tr>
<tr>
<td style="text-align:left"><code>-&gt;</code></td>
<td style="text-align:left">等待多行语句中下一行的输入</td>
</tr>
<tr>
<td style="text-align:left"><code>'&gt;</code></td>
<td style="text-align:left">等待下一行输入，以单引号开头的字符串的完成</td>
</tr>
<tr>
<td style="text-align:left"><code>&quot;&gt;</code></td>
<td style="text-align:left">等待下一行输入，以双引号开头的字符串的完成</td>
</tr>
<tr>
<td style="text-align:left">``&gt;`</td>
<td style="text-align:left">等待下一行输入，以反引号开头的标识符的完成</td>
</tr>
<tr>
<td style="text-align:left"><code>/*&gt;</code></td>
<td style="text-align:left">等待下一行输入，多行注释的完成</td>
</tr>
</tbody>
</table>
<p>使用<code>\c</code>取消当前输入，需要注意的是，在上表后四种提示中使用<code>\c</code>时，要先完成之前的引号或注释，否则<code>\c</code>会被视为字符串。</p>
<p>使用<code>\G</code>表示纵向显示输出结果，转义命令均区分大小写。更多命令参考<a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-commands.html">mysql Client Commands</a></p>
<h2 id="七-操纵数据库"><a class="markdownIt-Anchor" href="#七-操纵数据库"></a> 七、操纵数据库</h2>
<p><code>SHOW DATABASES</code>：显示当前用户可查看的所有数据库，注意是复数，初始化时已有以下4个系统数据库。<strong>切勿随意编辑系统数据库</strong></p>
<p><img src="image-20210521184730728.png" alt="image-20210521184730728" /></p>
<ul>
<li>information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等</li>
<li>mysql：核心数据库，主要用于存储数据库用户、用户访问权限等控制和管理信息</li>
<li>performance_schema：主要用于收集数据库服务器性能参数</li>
<li>sys：MySQL5.7开始，提供了一些数据来自于performation_schema的视图，主要是使开发者和使用者更方便地查看性能问题。</li>
</ul>
<h3 id="1-创建与使用数据库"><a class="markdownIt-Anchor" href="#1-创建与使用数据库"></a> 1、创建与使用数据库</h3>
<p>使用<code>CREATE DATABASE 数据库名</code>创建数据库，因为创建数据库后不会选择使用该数据库，所以还需要<code>use 数据库名</code>来切换数据库（可不加分号），或者在登录客户端时使用<code>-D 数据库名</code>选项</p>
<p><img src="image-20210521233245018.png" alt="image-20210521233245018" /></p>
<blockquote>
<p>与Windows系统不同，在Linux系统中，数据库名称是区分大小写的，所以建议SQL关键字使用大写，其它名称使用小写。</p>
</blockquote>
<p>如果创建数据库时数据库已存在，则会报错，可以增加<code>IF NOT EXISTS</code>选项，如<code>CREATE DATABASE IF NOT EXISTS my_db;</code>。同时在语句末尾可以增加<code>CHARACTER SET 字符集名称</code>指定字符集，增加<code>COLLATE 校对规则名</code>指定校对规则。使用<code>SHOW CHARACTER SET</code>命令来查看所有可用的字符集，<code>SHOW COLLATION</code>查看所有校对规则。未指定时，系统变量<code>character_set_database</code>和<code>collation_database</code>的值为默认值</p>
<blockquote>
<p>字符集定义MySQL存储字符串的方式，校对规则定义比较字符串的方式。</p>
</blockquote>
<p>使用<code>SELECT DATABASE()</code>查看当前使用的数据库</p>
<p><img src="image-20210521235026006.png" alt="image-20210521235026006" /></p>
<h3 id="2-删除数据库"><a class="markdownIt-Anchor" href="#2-删除数据库"></a> 2、删除数据库</h3>
<p><code>DROP DATABASE 数据库名</code>用于删除数据库，可以使用<code>IF EXISTS</code>防止数据库不存在时报错，如果删除当前使用的数据库，则会将使用标记取消，即<code>SELECT DATABASE()</code>返回NULL。删除数据库操作是物理删除，即会删除data文件夹中的相应文件</p>
<h3 id="3-修改数据库"><a class="markdownIt-Anchor" href="#3-修改数据库"></a> 3、修改数据库</h3>
<p><code>ALTER DATABASE 数据库名 选项=值</code>用于修改数据库使用的字符集和校对规则，可以省略数据库名，但必须已通过<code>use 数据库名</code>指定数据库。</p>
<p>MySQL不能直接复制数据库以及更改数据库名</p>
<h2 id="八-操纵表"><a class="markdownIt-Anchor" href="#八-操纵表"></a> 八、操纵表</h2>
<p>创建和使用数据库后，使用<code>SHOW TABLES</code>查看库中的表<img src="image-20210522175955126.png" alt="image-20210522175955126" />当然此时是没有任何表的</p>
<h3 id="1-创建与查询表"><a class="markdownIt-Anchor" href="#1-创建与查询表"></a> 1、创建与查询表</h3>
<p><img src="image-20210523012055644.png" alt="image-20210523012055644" /></p>
<p>简明语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名 (</span><br><span class="line">    列名 数据类型 [列定义],</span><br><span class="line">   [创建定义]</span><br><span class="line">) 表选项</span><br></pre></td></tr></table></figure>
<p><code>[]</code>为可选项，<code>|</code>表示多选一；多个定义、表选项之间使用逗号分割，最后一个定义后不加逗号；表选项的中<code>=</code>符号可省略</p>
<p>列定义包括：</p>
<ul>
<li><code>ZEROFILL</code>：0填充，此选项会将不足显示位数的部分使用0填充（默认为空格），如果是数字类型，则会自动添加无符号属性</li>
<li><code>NOT NULL</code>或者<code>NULL</code>：不为空或者可为空值，不指定时默认可为空</li>
<li><code>DEFAULT 值</code>：显式指定默认值</li>
<li><code>AUTO_INCREMENT</code>：自增，整数和浮点数可指定，其值从1开始，每次插入的值为表中当前列的最大值+1。每个表只能有一个自增值字段，不能指定默认值</li>
<li><code>INDEX | KEY</code>：普通索引</li>
<li><code>[PRIMARY] KEY</code>：主键，默认不能为空（隐式的），不能有重复值，一张表只能有一个主键，但可以定义多列主键</li>
<li><code>UNIQUE [KEY]</code>：唯一索引，不能有重复值，可以为空，可以定义多个</li>
<li><code>FOREIGN KEY</code>：外键</li>
<li><code>COMMENT</code>：注释，后跟字符串</li>
<li><code>COLLATE</code>：排序规则</li>
</ul>
<p>除了列以外的创建定义：</p>
<ul>
<li><code>FOREIGN KEY</code>：外键（允许跨表交叉引用相关数据）</li>
<li>索引，后面需用括号指定单列或多列，多列之间使用逗号分割
<ul>
<li><code>INDEX | KEY</code>：普通索引</li>
<li><code>PRIMARY KEY</code>：主键索引</li>
<li><code>UNIQUE [INDEX | KEY]</code>：唯一索引</li>
<li><code>FULLTEXT [INDEX | KEY]</code>：全文索引</li>
</ul>
</li>
</ul>
<blockquote>
<p>考虑到与其他数据库系统的兼容性，MySQL将<code>KEY</code>作为<code>INDEX</code>的同义词，在列定义中主键也可以仅使用<code>KEY</code>指定</p>
</blockquote>
<p>常用的表选项：</p>
<ul>
<li><code>ENGINE</code>：指定数据库表的存储引擎。未指定时，使用系统变量<code>default_storage_engine</code>的值。可以对不同的表使用不同的存储引擎</li>
<li><code>AUTO_INCREMENT</code>：指定自增初始值</li>
<li><code>[DEFAULT] CHARACTER SET</code>或<code>[DEFAULT] CHARSET</code>：指定默认字符集，未指定时，使用数据库的值</li>
<li><code>[DEFAULT] COLLATE</code>：指定默认校对规则，未指定时，使用数据库的值</li>
<li><code>COMMENT</code>：注释，说明当前表的含义，最多2048个字符</li>
</ul>
<p>使用<code>DESCRIBE 表名</code>或<code>DESC 表名</code>或<code>SHOW COLUMNS FROM 表名</code>可以查看表的信息</p>
<p><img src="image-20210523015144369.png" alt="image-20210523015144369" /></p>
<p>或者<code>SHOW CREATE TABLE 表名</code>查看如何创建表</p>
<p><img src="image-20210524022123018.png" alt="image-20210524022123018" /></p>
<h3 id="2-操纵表数据"><a class="markdownIt-Anchor" href="#2-操纵表数据"></a> 2、操纵表数据</h3>
<h4 id="21-插入数据"><a class="markdownIt-Anchor" href="#21-插入数据"></a> 2.1 插入数据</h4>
<p><img src="image-20210524022742154.png" alt="image-20210524022742154" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 [(字段<span class="number">1</span>, 字段<span class="number">2</span>,... 字段n)] &#123;<span class="keyword">VALUES</span> <span class="operator">|</span> <span class="keyword">VALUE</span>&#125; (值列表) [, (值列表)]</span><br></pre></td></tr></table></figure>
<p>未指定字段时默认所有字段都需要指定值，且按创建表时声明的顺序；值列表必须与字段数量/类型相匹配；可以使用关键字<code>DEFAULT</code>显式设置为默认值；<code>VALUES</code>等同于<code>VALUE</code>，既不表示字段的数量，也不表示每个字段中值的数量。无论是单条数据还是多条数据，每条数据值的数量是多少，都是一样的；可以插入多条值，每条值列表之间使用逗号分隔；如果字段列表和值列表均为空，则会将每个字段都设置为默认值</p>
<h4 id="22-查询数据"><a class="markdownIt-Anchor" href="#22-查询数据"></a> 2.2 查询数据</h4>
<p><img src="image-20210524011031140.png" alt="image-20210524011031140" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] 查询表达式 <span class="keyword">FROM</span> 表名 [查询条件]</span><br></pre></td></tr></table></figure>
<p><code>SELECT</code>语句用于查询一个或多个表中选择的行数据，也可用于计算表达式。<code>DISTINCT</code>用于从结果中删除重复的行数据；必须至少有一个查询表达式以及一个或多个表名；查询表达式的规则如下：</p>
<ul>
<li>通常使用列名或者通配符<code>*</code>表示所有列，也可以使用<code>表名.*</code>的方式</li>
<li>可以使用<code>列名 AS 别名</code>来命名列的显示名称
<ul>
<li>不允许在<code>WHERE</code>中引用列的别名，但可以在<code>GROUP BY</code>，<code>ORDER BY</code>或<code>HAVING</code>中使用</li>
<li>在查询表达式中别名既可以使用反引号，也可以单/双引号，而在其它地方则必须使用反引号</li>
<li>可以用同样的方式对表使用别名，此时列名的引用方式是<code>表别名.列名</code>，可用于处理多表联查时不同表中列名相同的情况</li>
</ul>
</li>
</ul>
<p>关于查询条件，同时使用时必须严格按照从上到下的顺序给出：</p>
<ul>
<li><code>WHERE</code>：需要满足一个或多个条件表达式，可以使用除聚合函数以外的任何函数和运算符。后面可跟<code>LIKE</code>或<code>REGEXP</code>的模式匹配或正则表达式</li>
<li><code>GROUP BY</code>：分组查询处理，通过一定的规则将所有行数据通过一列或多列分组，然后可以对若干个分组进行数据处理</li>
<li><code>HAVING</code>：与<code>WHERE</code>类似，指定条件，通常用于对<code>GROUP BY</code>的分组进行过滤，可以使用聚合函数</li>
<li><code>ORDER BY</code>：用于排序，可以指定列名或列的序号，也可以使用表达式，默认为<code>ASC</code>（升序），降序为<code>DESC</code>（使用在列名后）。字符串排序不区分大小写，可以在列名前增加<code>BINARY</code>关键字强制区分大小写</li>
<li><code>LIMIT</code>：用于分页处理，限制返回结果的行数，也可以指定从哪行开始和指定数量的行（使用逗号或者<code>OFFSET</code>关键字分隔），首行编号为0</li>
</ul>
<blockquote>
<p>MySQL提供了标准SQL的模式匹配，以及基于扩展正则表达式的模式匹配。模式匹配的规则：</p>
<ul>
<li>使用单/双引号将匹配规则括起来，即作为字符串</li>
<li>默认不区分大小写比较，如果要强制区分大小写，需要使用<code>BINARY</code>关键字修饰其中一边字符串</li>
<li>使用<code>_</code>匹配任意单个字符</li>
<li>使用<code>%</code>匹配任意数量的字符</li>
<li>此时使用转义符<code>\_</code>和<code>\%</code>来匹配<code>_</code>和<code>%</code></li>
</ul>
</blockquote>
<p>除了条件查询，还有比较复杂的子查询，此处不再详解，参考MySQL手册<a href="https://dev.mysql.com/doc/refman/5.7/en/subqueries.html">13.2.10 Subqueries</a></p>
<h4 id="23-修改数据"><a class="markdownIt-Anchor" href="#23-修改数据"></a> 2.3 修改数据</h4>
<p><img src="image-20210524161118644.png" alt="image-20210524161118644" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="operator">=</span>新值 [<span class="keyword">WHERE</span> 更新条件] [<span class="keyword">ORDER</span> <span class="keyword">BY</span>] [LIMIT 行数]</span><br></pre></td></tr></table></figure>
<p><code>UPDATE</code>语句可以进行多表修改，此时只能使用<code>WHERE</code>，可以使用<code>DEFAULT</code>关键字指定默认值，如果不使用<code>WHERE</code>指定更新条件，那么将修改所有行的指定值，使用<code>ORDER BY</code>可以在修改前先排序，使用<code>LIMIT</code>只修改指定数量的行。</p>
<h4 id="24-删除数据"><a class="markdownIt-Anchor" href="#24-删除数据"></a> 2.4 删除数据</h4>
<p><img src="image-20210524165904542.png" alt="image-20210524165904542" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 删除条件] [<span class="keyword">ORDER</span> <span class="keyword">BY</span>] [LIMIT 行数]</span><br></pre></td></tr></table></figure>
<p><code>DELETE</code>语句用于删除表中数据，和更新语句一样，可以进行多表删除，此时只能使用<code>WHERE</code>，不指定<code>WHERE</code>时则删除表的所有数据，也可以使用<code>ORDER BY</code>在删除前排序，使用<code>LIMIT</code>只删除指定数量的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] 表名</span><br></pre></td></tr></table></figure>
<p><code>TRUNCATE</code>用于清空表，类似于不带条件的<code>DELETE</code>语句，但其不同之处在于<code>TRUNCATE</code>：</p>
<ul>
<li>直接删除并重建表，相比于<code>DELETE</code>逐个删除要快得多，特别是对于大型表</li>
<li>不会返回删除了多少行。一般为0，表示无信息</li>
<li>会初始化任何自增值</li>
<li>属于DDL而不是DML</li>
</ul>
<h3 id="3-修改表"><a class="markdownIt-Anchor" href="#3-修改表"></a> 3、修改表</h3>
<p>表的修改可以分为修改表的属性和修改表中列的属性</p>
<p><img src="image-20210525015437404.png" alt="image-20210525015437404" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 表选项<span class="operator">=</span>新值 [, 表选项<span class="operator">=</span>新值]</span><br></pre></td></tr></table></figure>
<p>上述语法允许修改任何在建表时可使用的表选项，如ENGINE、CHARSET、AUTO_INCREMENT、COMMENT等等；修改自增值时，不能将值设置为小于或等于当前使用的值，否则会重置为当前使用的最大值；修改表的<strong>存储引擎</strong>时需要注意：</p>
<ul>
<li>表会重建</li>
<li>尝试更改引擎的结果受所需的存储引擎是否可用以及SQL模式设置的影响</li>
<li>为防止意外丢失数据，不能更改为MERGE或BLACKHOLE</li>
</ul>
<h4 id="31-重命名表"><a class="markdownIt-Anchor" href="#31-重命名表"></a> 3.1 重命名表</h4>
<p><img src="image-20210525015654564.png" alt="image-20210525015654564" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名 <span class="keyword">TO</span> 新表名 [, 旧表名 <span class="keyword">TO</span> 新表名];</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 旧表名 RENAME [<span class="keyword">TO</span> <span class="operator">|</span> <span class="keyword">AS</span>] 新表名;</span><br></pre></td></tr></table></figure>
<p><code>RENAME TABLE</code>可以重命名一个或多个表。重命名发生错误时，不会进行任何更改；也可以通过<code>库名.表名</code>和<code>其它库.表名</code>的方式将表移动到其它数据库（实际上修改了数据库）；重命名表后的外键约束名称将会自动更新，如果发生冲突则执行失败；<code>ALTER TABLE</code>也是一样的，<code>RENAME</code>后面可加<code>TO</code>或者<code>AS</code>，或者不加也不影响语义</p>
<p>重命名表其实是对旧表执行<code>ALTER</code>和<code>DROP</code>操作，对新表执行<code>ALTER</code>、<code>CREATE</code>和<code>INSERT</code>操作</p>
<blockquote>
<p>表的重命名是原子性的，即表在重命名时被锁定，其它会话或操作无法访问正在重命名的表</p>
</blockquote>
<h4 id="32-操纵列"><a class="markdownIt-Anchor" href="#32-操纵列"></a> 3.2 操纵列</h4>
<h5 id="321-追加列"><a class="markdownIt-Anchor" href="#321-追加列"></a> 3.2.1 追加列</h5>
<p><img src="image-20210525033957560.png" alt="image-20210525033957560" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 列定义 [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER 列名];</span><br></pre></td></tr></table></figure>
<p>列定义与创建表时的定义规则相同；可以使用<code>FIRST</code>或<code>AFTER 某列</code>来指定添加到最前面或者某列之后，默认添加到最后；新增的列对于表中已存在的所有行数据将设置为默认值</p>
<h5 id="322-修改列"><a class="markdownIt-Anchor" href="#322-修改列"></a> 3.2.2 修改列</h5>
<p><img src="image-20210525210124379.png" alt="image-20210525210124379" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧列名 新列名 列定义 [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER 列名];</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 列定义 [<span class="keyword">FIRST</span> <span class="operator">|</span> AFTER 列名];</span><br></pre></td></tr></table></figure>
<p><code>CHANGE</code>用于重命名列并更改其定义，<code>MODIFY</code>用于更改列定义，但不能更改列名；列定义必须包括数据类型和所有应用于新列的属性；两者同样可以使用<code>FIRST</code>或<code>AFTER 某列</code>来改变列的位置；原始定义中存在但未在新定义中指定的属性不会继承</p>
<h5 id="323-删除列"><a class="markdownIt-Anchor" href="#323-删除列"></a> 3.2.3 删除列</h5>
<p><img src="image-20210525210608607.png" alt="image-20210525210608607" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure>
<p>如果表仅存在一列，则不能删除该列，可以直接删除表；<code>DROP PRIMARY KEY</code>可以删除主键</p>
<h3 id="4-删除表"><a class="markdownIt-Anchor" href="#4-删除表"></a> 4、删除表</h3>
<p><img src="image-20210525212157388.png" alt="image-20210525212157388" /></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名</span><br></pre></td></tr></table></figure>
<p>可以删除一个或多个表；为了避免报错，可以增加<code>IF EXISTS</code>在删除前判断表是否存在；和删除数据库一样，删除表是物理删除，将会删除表结构和表中的所有数据</p>
<h2 id="九-连接查询"><a class="markdownIt-Anchor" href="#九-连接查询"></a> 九、连接查询</h2>
<p>MySQL中简单的查询可以使用<code>SELECT 列 FROM 表 WHERE 条件</code>的方式，这是单个表中的操作，对于多表联合查询，需要使用连接查询。</p>
<p>Join连接是一种基于表之间公共列的值在一个或多个表之间连接数据的方法。关于SQL的连接查询，最被广泛引用的是来自C.L. Moffatt的文章<a href="https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins">Visual Representation of SQL Joins</a>，其中的Venn图以集合形式简单明了的说明了SQL连接查询不同种类的关系</p>
<p><img src="image-20210531000429608.png" alt="image-20210531000429608" /></p>
<p>图中中间的叫内连接，左上是左连接，右上是右连接，左下是全（外）连接，这四种为SQL中常见的连接查询，另外三种作为延伸用法在集合中分别是B关于A的补集、A关于B的补集以及互不包含的集合</p>
<p>下面将以以下表和数据演示内连接、左连接和右连接的作用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `chs` (</span><br><span class="line">  `tag` <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line">  `text` <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">) COMMENT<span class="operator">=</span><span class="string">&#x27;简体中文&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `cht` (</span><br><span class="line">  `tag` <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line">  `text` <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">) COMMENT<span class="operator">=</span><span class="string">&#x27;繁体中文&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `chs` (`tag`, `text`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;一&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;二&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `cht` (`tag`, `text`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;貳&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;叁&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;肆&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MySQL没有提供全（外）连接的方法，可以使用<code>UNION</code>子句进行替代</p>
<p><img src="image-20210531235336076.png" alt="image-20210531235336076" /></p>
</blockquote>
<h3 id="1-内连接"><a class="markdownIt-Anchor" href="#1-内连接"></a> 1、内连接</h3>
<p><img src="image-20210531181655501.png" alt="image-20210531181655501" /></p>
<p>内连接即交集，两者的公共部分。</p>
<ul>
<li>在MySQL中<code>JOIN</code>，<code>CROSS JOIN</code>（笛卡尔积）和<code>INNER JOIN</code>是在语法上是等价的，而标准SQL中<code>INNER JOIN</code>与<code>ON</code>一起使用，<code>CROSS JOIN</code>则不需要</li>
<li>如果仅有内连接，则连接表达式（FROM之后的语句）则可以省略括号</li>
<li>为了避免列名相同的问题，通常会对表使用别名，或者使用完全限定名（表名.列名）</li>
<li>单个连接中最多引用61个表</li>
<li><code>ON</code>后面的条件是任何在<code>WHERE</code>子句中可以使用的条件表达式。</li>
<li>通常情况，<code>ON</code>子句用于指定如何连接表的条件，而<code>WHERE</code>子句则用于限制结果中应该包括哪些数据</li>
</ul>
<h3 id="2-左连接"><a class="markdownIt-Anchor" href="#2-左连接"></a> 2、左连接</h3>
<p><img src="image-20210531232811923.png" alt="image-20210531232811923" /></p>
<p>左连接会选取左表的全部数据，而右表无对应数据的行则会使用NULL标记。<code>LEFT JOIN</code>即作为右边的表向左连接，<code>FROM</code>的为左表</p>
<h3 id="3-右连接"><a class="markdownIt-Anchor" href="#3-右连接"></a> 3、右连接</h3>
<p><img src="image-20210531234358859.png" alt="image-20210531234358859" /></p>
<p>和左连接相反，右连接选取右表的全部数据，左表无对应数据的行使用NULL标记。<code>RIGHT JOIN</code>即作为左边的表向右连接，<code>FROM</code>的为右表</p>
<blockquote>
<p>为了使代码在数据库间保持可移植性，建议使用左连接而不是右连接</p>
</blockquote>
<h2 id="十-数据库表存储引擎"><a class="markdownIt-Anchor" href="#十-数据库表存储引擎"></a> 十、数据库(表)存储引擎</h2>
<p>存储引擎是处理不同表类型的SQL操作的MySQL组件，目前<code>InnoDB</code>是MySQL默认的也是最通用的存储引擎。</p>
<p>使用<code>SHOW ENGINES</code>查看所有存储引擎及信息</p>
<p><img src="image-20210523155044157.png" alt="image-20210523155044157" /></p>
<p>其中<code>Transactions</code>表示是否支持事务，<code>XA</code>表示是否支持分布式事务，<code>Savepoints</code>表示是否支持事务保存点</p>
<p>各存储引擎介绍：</p>
<ul>
<li><code>InnoDB</code>：MySQL5.7的默认存储引擎，兼顾了高可靠性和高性能。InnoDB是事务安全（符合ACID）的存储引擎，具有提交、回滚和崩溃恢复的功能以保护数据。InnoDB支持行级锁，提高了多用户并发性的性能。InnoDB将用户数据存储在聚簇索引中，以减少常见的基于主键查询的I/O操作。InnoDB还支持外键引用完整性约束来保证数据完整性。</li>
<li><code>MyISAM</code>：早期MySQL使用较多的存储引擎，存储空间较小，<strong>不支持事务</strong>，使用表级锁定（限制了读写的性能）。通常用于只读或以读取为主的数据库</li>
<li><code>Memory</code>：内存数据库，将数据存储在内存中，所以断电即失，也被称为堆引擎，因此只能用作临时工作区或从其他表的只读缓存。用于需要快速访问非关键数据的环境</li>
<li><code>CSV</code>：即comma-separated values，将数据存储为以逗号作为分隔符的文本文件中，所以此引擎不会有索引</li>
<li><code>Archive</code>：归档，用于生成专用表，这些表以非常小的占用空间存储大量未编制索引的数据</li>
<li><code>Blackhole</code>：黑洞，顾名思义，接收但不存储数据，任何查询都将返回空</li>
<li><code>Federated</code>：提供链接不同MySQL服务器的能力，从许多物理服务器创建一个逻辑数据库。适合分布式或数据市场环境</li>
</ul>
<p>关于存储引擎的详细内容参考MySQL手册第15章<a href="https://dev.mysql.com/doc/refman/5.7/en/storage-engines.html">Alternative Storage Engines</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>各种开发软件便携版的获取、制作与配置</title>
    <url>/portable-software/</url>
    <content><![CDATA[<h2 id="oracle-jdk"><a class="markdownIt-Anchor" href="#oracle-jdk"></a> Oracle JDK</h2>
<p>Windows版的Oracle JDK从11开始有单独的压缩包可以作为便携版使用，但是JDK8仅提供了exe安装包。可以使用以下两种方法之一来制作便携版的JDK8：</p>
<ul>
<li>安装后保留安装好的文件夹重新打包</li>
<li>从exe安装文件中进行提取</li>
</ul>
<span id="more"></span>
<p>下面就第二种方法的制作过程进行介绍</p>
<p>首先从<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Oracle官网</a>下载jdk-8u281-windows-x64.exe或者jdk-8u281-windows-i586.exe（需要注册账户），然后将其视为压缩包解压出来</p>
<p><img src="image-20210221232511793.png" alt="image-20210221232511793" /></p>
<p>在目录<code>\.rsrc\1033</code>下JAVA_CAB9文件夹中的是源码，JAVA_CAB10中的则是JDK（已包含JRE），再次将其视为压缩包进行解压，tools.zip中的文件即为我们所需要的，继续解压</p>
<p><img src="image-20210221234656138.png" alt="image-20210221234656138" /></p>
<p>把源码包放进来</p>
<p><img src="image-20210221235302216.png" alt="image-20210221235302216" /></p>
<p>此时还不能直接使用，需要将包中的一些pack文件进行处理转换为jar。在命令行中执行如下命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /r %x <span class="keyword">in</span> (*.pack) <span class="keyword">do</span> .\bin\unpack200 -r <span class="string">&quot;%x&quot;</span> <span class="string">&quot;%~dx%~px%~nx.jar&quot;</span></span><br></pre></td></tr></table></figure>
<p>最后将其放到环境变量中已设置的**%JAVA_HOME%**位置，在命令行中确认一下版本无误后便制作完成了</p>
<p><img src="image-20210222000146760.png" alt="image-20210222000146760" /></p>
<h2 id="vs-code"><a class="markdownIt-Anchor" href="#vs-code"></a> VS code</h2>
<p>微软官方提供了<a href="https://code.visualstudio.com/#alt-downloads">zip版的下载</a>，选择64位或32位的即可（ARM是提供给ARM内核cpu的）</p>
<p><img src="image-20210314162820229.png" alt="image-20210314162820229" /></p>
<h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3>
<p><a href="https://code.visualstudio.com/docs/editor/portable">便携模式</a>的使用方法：在解压后的与<em>Code.exe</em>同级目录中新建一个data文件夹即可，如下图</p>
<p><img src="image-20210314164043666.png" alt="image-20210314164043666" /></p>
<p>此后使用时的用户数据与安装的扩展都会放置于其中，还可以在data文件夹里增加一个tmp文件夹作为其临时文件目录<br />
注意：<strong>此方法不适用于安装版</strong></p>
<p>附安装版的data存放位置：</p>
<ul>
<li>用户数据：<code>%APPDATA%\Code</code>（一般来说%APPDATA%在C:\Users\Administrator\AppData\Roaming）</li>
<li>扩展：<code>%USERPROFILE%\.vscode\extensions</code>（一般来说%USERPROFILE%在C:\Users\Administrator）</li>
</ul>
<h2 id="git-for-windows"><a class="markdownIt-Anchor" href="#git-for-windows"></a> Git For Windows</h2>
<p>在<a href="https://github.com/git-for-windows/git/releases">git官方的github仓库发行页</a>中提供了Portable版的，虽然是exe文件，但仅作为自解压脚本，既可双击运行，也可以直接解压</p>
<p><img src="image-20210314171719460.png" alt="image-20210314171719460" /></p>
<h3 id="如何使用"><a class="markdownIt-Anchor" href="#如何使用"></a> 如何使用</h3>
<p>其中的<em>README.portable</em>文件说明了便携版的使用方法：</p>
<ul>
<li>双击运行选择解压位置完成后即可使用；如果选择手动解压，则需要运行<em>post-install.bat</em>文件，否则无法正常使用Git</li>
<li>与安装版的区别：不会向右键菜单中植入<code>Git GUI Here</code>和<code>Git Bash Here</code>，因为这是需要在注册表中添加项的</li>
<li>要全局使用Git命令，需要在环境变量中配置Git的路径，例如：<br />
<img src="image-20210314175450902.png" alt="image-20210314175450902" /></li>
</ul>
<p>配置个人设置和SSH连接与安装版相同，执行相关命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 个人信息设置</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail@example.com&quot;</span></span><br><span class="line"><span class="comment"># 生成ssh</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br><span class="line"><span class="comment"># 测试连接</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 设置socks5代理（通过V2ray加速下载时使用）</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:10808</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:10808</span><br></pre></td></tr></table></figure>
<h2 id="nodejs与npm"><a class="markdownIt-Anchor" href="#nodejs与npm"></a> node.js与npm</h2>
<p>直接在<a href="https://nodejs.org/zh-cn/download/">官网</a>选择32位或者64位的Windows二进制文件下载。将解压后的路径配置到环境变量PATH中即可全局使用node和npm命令</p>
<h3 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h3>
<p>默认情况下，<a href="https://docs.npmjs.com/cli/v7/configuring-npm/npmrc">配置文件npmrc</a>有如下4个方式与路径，按从上到下的优先级进行解析：</p>
<ul>
<li>每个项目根目录的<code>.npmrc</code></li>
<li>每个用户的<code>%USERPROFILE%/.npmrc</code></li>
<li>全局配置文件<code>$PREFIX/etc/npmrc</code>（$PREFIX默认值为node.exe的根目录）</li>
<li>npm内置配置文件<code>/path/to/npm/npmrc</code></li>
</ul>
<p>可以使用<code>npm config list</code>命令查看当前配置或<code>npm config ls -l</code>查看所有可配置内容（包括默认配置）</p>
<p><img src="image-20210314184820364.png" alt="image-20210314184820364" /></p>
<p>所以按照如上规则，可以在node根目录新建<em>etc</em>文件夹，然后将用户目录的*.npmrc<em>文件移动到此处并重命名为</em>npmrc*</p>
<h3 id="缓存路径"><a class="markdownIt-Anchor" href="#缓存路径"></a> 缓存路径</h3>
<p>默认设置中缓存路径为<code>cache = &quot;C:\\Users\\Administrator\\AppData\\Roaming\\npm-cache&quot;</code>，可以通过修改配置达到转移缓存目录的目的</p>
<p>在npmrc文件中新增键值对，如：<code>cache=E:\Environment\node\npm-cache</code><br />
或执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> cache=yourpath</span><br></pre></td></tr></table></figure>
<h3 id="下载源"><a class="markdownIt-Anchor" href="#下载源"></a> 下载源</h3>
<p>默认的下载源为<code>registry = &quot;https://registry.npmjs.org/&quot;</code>，因为是国外地址，所以<code>npm install</code>时会十分缓慢，可以替换为淘宝的镜像地址来加速下载</p>
<p>同样在npmrc文件中新增键值对：<code>registry=https://registry.npm.taobao.org</code><br />
或执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h2 id="jetbrains全家桶"><a class="markdownIt-Anchor" href="#jetbrains全家桶"></a> JetBrains全家桶</h2>
<p>这里以IntelliJ IDEA为例：下载时选择zip版的</p>
<p><img src="image-20210314193617632.png" alt="image-20210314193617632" /></p>
<h3 id="配置-2"><a class="markdownIt-Anchor" href="#配置-2"></a> 配置</h3>
<p>在根目录下的bin文件夹中，以文本方式打开<em>idea.properties</em>文件，如下黑字部分<br />
将配置、插件、日志、系统数据目录设置到自己想要的位置</p>
<p><img src="image-20210314194009754.png" alt="image-20210314194009754" /></p>
<h2 id="visual-studio"><a class="markdownIt-Anchor" href="#visual-studio"></a> Visual Studio</h2>
<p>这个有大佬制作了现成的，下载地址：<a href="https://pan.baidu.com/s/1sldAQmD">https://pan.baidu.com/s/1sldAQmD</a></p>
<p>需要注意的是win7以上需要使用win7兼容模式安装</p>
<p>参考<a href="http://theoractice.github.io/">制作过程</a>，还是挺复杂的</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL扩展知识</title>
    <url>/mysql-extension/</url>
    <content><![CDATA[<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>
<p>MySQL自带了一些内置函数用来实现数据库的高级功能，内置函数大致有以下几类：数学函数、日期时间函数、字符串函数、加密与解密函数、信息函数、聚合函数。</p>
<span id="more"></span>
<h3 id="数学函数"><a class="markdownIt-Anchor" href="#数学函数"></a> 数学函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ABS()</td>
<td>计算绝对值</td>
</tr>
<tr>
<td>PI()</td>
<td>圆周率，默认显示7位小数</td>
</tr>
<tr>
<td>POW()或POWER()</td>
<td>计算x的y次方</td>
</tr>
<tr>
<td>SQRT()</td>
<td>计算非负数的平方根</td>
</tr>
<tr>
<td>RAND()</td>
<td>获取一个[0,1)之间的随机数，可以指定一个整数作为种子</td>
</tr>
<tr>
<td>SIN()、COS()、TAN()、COT()</td>
<td>三角函数</td>
</tr>
<tr>
<td>ASIN()、ACOS()、ATAN()或ATAN2()</td>
<td>反三角函数</td>
</tr>
<tr>
<td>CEIL()或CEILING()</td>
<td>向下取整</td>
</tr>
<tr>
<td>FLOOR()</td>
<td>向上取整</td>
</tr>
<tr>
<td>ROUND()</td>
<td>四舍五入，可指定舍入的位数，默认为0，为负时向小数点前舍入，最大（小）值±30</td>
</tr>
<tr>
<td>CONV()</td>
<td>将N进制的值转换为M进制，进制取值范围为[2,36]</td>
</tr>
<tr>
<td>SIGN()</td>
<td>判断有理数的类型，正数为1，负数为-1，0则是0</td>
</tr>
<tr>
<td>EXP()、LN()</td>
<td>e（自然常数）的X次方，e为底X的对数</td>
</tr>
<tr>
<td>LOG(b,x)</td>
<td>计算x为底b的对数，省略x时相当于LN()</td>
</tr>
<tr>
<td>LOG2()、LOG10()</td>
<td>计算2为底x的对数，10为底x的对数</td>
</tr>
<tr>
<td>MOD()</td>
<td>模运算（取余），适用于小数</td>
</tr>
<tr>
<td>FORMAT()</td>
<td>以千位分隔符的方式显示数字，需指定小数位数（四舍五入处理）</td>
</tr>
<tr>
<td>HEX()</td>
<td>返回十进制数字或字符串的16进制表示</td>
</tr>
<tr>
<td>TRUNCATE()</td>
<td>将x截断d位小数，如果d为负则将前面d位整数置0</td>
</tr>
</tbody>
</table>
<p>一些示例：</p>
<p><img src="image-20210603012122814.png" alt="image-20210603012122814" /></p>
<h3 id="日期时间函数"><a class="markdownIt-Anchor" href="#日期时间函数"></a> 日期时间函数</h3>
<p>对于日期与时间函数，默认格式为<code>YYYY-MM-DD hh:mm:ss</code>，与数字进行计算时，返回<code>YYYYMMDDhhmmss</code>格式</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURDATE()或CURRENT_DATE()或CURRENT_DATE</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CURTIME()或CURRENT_TIME()或CURRENT_TIME</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>NOW()或CURRENT_TIMESTAMP()或CURRENT_TIMESTAMP<br />或LOCALTIME()或LOCALTIME<br />或LOCALTIMESTAMP()或LOCALTIMESTAMP</td>
<td>返回当前日期和时间，这是常量时间，表示语句开始执行时的时间</td>
</tr>
<tr>
<td>UNIX_TIMESTAMP()</td>
<td>时间戳，表示自1970-01-01 00:00:00 UTC开始的秒数</td>
</tr>
<tr>
<td>ADDDATE(expr,days)</td>
<td>返回指定日期添加days天后的日期</td>
</tr>
<tr>
<td>ADDTIME(expr1,expr2)</td>
<td>返回expr1添加expr2后的结果，expr1为时间或日期时间表达式，expr2为时间表达式</td>
</tr>
<tr>
<td>MAKEDATE(year,dayofyear)</td>
<td>返回给定年份和天数的日期</td>
</tr>
<tr>
<td>QUARTER()</td>
<td>给定日期返回季度值（1到4）</td>
</tr>
<tr>
<td>SYSDATE()</td>
<td>与NOW()相似，但表示表达式具体执行时的时间</td>
</tr>
<tr>
<td>TIME_TO_SEC()</td>
<td>将时间值转换为秒数</td>
</tr>
<tr>
<td>TO_DAYS()</td>
<td>将日期转换为天数</td>
</tr>
<tr>
<td>TO_SECONDS()</td>
<td>将日期或日期时间转换为秒数</td>
</tr>
<tr>
<td>UTC_DATE或UTC_DATE()、UTC_TIME或UTC_TIME()、<br />UTC_TIMESTAMP或UTC_TIMESTAMP()</td>
<td>返回当前UTC日期、时间、日期和时间值</td>
</tr>
<tr>
<td>WEEKDAY()</td>
<td>返回指定日期是星期几（0到6表示星期一到星期日）</td>
</tr>
<tr>
<td>WEEKOFYEAR()</td>
<td>返回指定日期是第几周（范围1到53）</td>
</tr>
<tr>
<td>DAY()或DAYOFMONTH()</td>
<td>返回指定日期是当前月的第几天</td>
</tr>
<tr>
<td>DAYOFWEEK()</td>
<td>返回指定日期是星期几（1到7表示星期一到星期日）</td>
</tr>
<tr>
<td>DAYOFYEAR()</td>
<td>返回指定日期是当年的第几天</td>
</tr>
<tr>
<td>FROM_DAYS()</td>
<td>给定天数返回日期值</td>
</tr>
<tr>
<td>LAST_DAY()</td>
<td>返回指定日期当月最后一天的日期</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<p><img src="image-20210605182039058.png" alt="image-20210605182039058" /></p>
<h3 id="字符串函数"><a class="markdownIt-Anchor" href="#字符串函数"></a> 字符串函数</h3>
<p>对于字符串函数，如果结果长度大于系统变量<code>max_allowed_packet</code>的值（默认4194304，4MB，最大1GB），则会返回NULL；字符串的第一个位置编号为1；需要长度参数的函数，传入非整数时会舍入到最接近的整数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASCII()</td>
<td>返回字符串最左边字符的ASCII码</td>
</tr>
<tr>
<td>BIN()</td>
<td>返回10进制数的二进制字符串表示形式</td>
</tr>
<tr>
<td>OCT()</td>
<td>返回10进制数的八进制字符串表示形式</td>
</tr>
<tr>
<td>UNHEX()</td>
<td>返回16进制字符串的字符串表示</td>
</tr>
<tr>
<td>BIT_LENGTH()</td>
<td>以位为单位返回字符串的长度</td>
</tr>
<tr>
<td>CHAR_LENGTH()或CHARACTER_LENGTH()</td>
<td>以字符为单位返回字符串的长度</td>
</tr>
<tr>
<td>LENGTH()或OCTET_LENGTH()</td>
<td>以字节为单位返回字符串的长度</td>
</tr>
<tr>
<td>CONCAT()</td>
<td>将一个或多个参数连接为字符串</td>
</tr>
<tr>
<td>CONCAT_WS()</td>
<td>以第一个参数作为分隔符将一个或多个参数连接为字符串</td>
</tr>
<tr>
<td>TO_BASE64()</td>
<td>base64编码</td>
</tr>
<tr>
<td>FROM_BASE64()</td>
<td>base64解码</td>
</tr>
<tr>
<td>INSERT(str,pos,len,newstr)</td>
<td>插入字符串，将str的pos位置的len长度替换为newstr<br />如果pos超过范围，则不作处理，如果len超过范围则替换到末尾</td>
</tr>
<tr>
<td>REPLACE(str,old,new)</td>
<td>将字符串str中的old字符替换为new字符，区分大小写</td>
</tr>
<tr>
<td>INSTR(str,substr)或LOCATE(substr,str)或POSITION(substr IN str)</td>
<td>返回substr在sub第一次出现的位置，0表示不存在</td>
</tr>
<tr>
<td>LOWER()或LCASE()</td>
<td>将字符串转换为小写</td>
</tr>
<tr>
<td>UPPER()或UCASE()</td>
<td>将字符串转换为大写</td>
</tr>
<tr>
<td>LEFT(str,len)</td>
<td>返回str从最左边开始的len个字符</td>
</tr>
<tr>
<td>RIGHT(str,len)</td>
<td>返回str从最右边开始的len个字符</td>
</tr>
<tr>
<td>LTRIM()，RTRIM()，TRIM()</td>
<td>删除前导空白字符，删除尾随空白字符，删除两边的空白字符</td>
</tr>
<tr>
<td>SUBSTR(str,pos,len)或SUBSTRING(str,pos,len)或MID(str,pos,len)</td>
<td>返回str从pos位置开始的len个字符串，SUBSTR与SUBSTRING不带len参数时截取到末尾，如果len小于1则返回空字符串</td>
</tr>
<tr>
<td>QUOTE()</td>
<td>返回字符串的引用形式，保留转义符。多用于防止SQL注入</td>
</tr>
<tr>
<td>REPEAT(str,count)</td>
<td>返回str重复count次后的字符串</td>
</tr>
<tr>
<td>REVERSE()</td>
<td>反转字符串</td>
</tr>
<tr>
<td>SPACE(N)</td>
<td>返回N个由空格组成的字符串</td>
</tr>
</tbody>
</table>
<p>关于base64，MySQL使用的方案为：</p>
<ul>
<li>转换表中第62位为<code>+</code>，第63位为<code>/</code></li>
<li>编码输出由4组可打印的字符组成。如果最后一组的长度不足4，则用<code>=</code>填充</li>
<li>每76个字符添加一个换行符</li>
<li>解码时忽略换行符、回车符、制表符和空格</li>
</ul>
<p>字符串函数示例：</p>
<p><img src="image-20210603043815467.png" alt="image-20210603043815467" /></p>
<h3 id="加密与解密函数"><a class="markdownIt-Anchor" href="#加密与解密函数"></a> 加密与解密函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>AES_DECRYPT()、AES_ENCRYPT()</td>
<td>AES解密、加密</td>
</tr>
<tr>
<td>MD5()</td>
<td>计算MD5校验和</td>
</tr>
<tr>
<td>RANDOM_BYTES()</td>
<td>指定字节长度通过SSL库的随机数生成器生成随机的二进制字符串，长度范围为1到1024</td>
</tr>
<tr>
<td>SHA1()或SHA()</td>
<td>计算的SHA-1的160位校验和</td>
</tr>
<tr>
<td>SHA2(str, length)</td>
<td>指定结果长度计算字符串的SHA-2哈希值，长度值必须为224、256、384、512或0（相当于256）之一</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<p><img src="image-20210605002419082.png" alt="image-20210605002419082" /></p>
<h3 id="信息函数"><a class="markdownIt-Anchor" href="#信息函数"></a> 信息函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BENCHMARK(count,expr)</td>
<td>重复执行一个表达式，用于测试标量表达式的性能</td>
</tr>
<tr>
<td>CHARSET()</td>
<td>返回字符串的字符集</td>
</tr>
<tr>
<td>COLLATION()</td>
<td>返回字符串的排序规则</td>
</tr>
<tr>
<td>COERCIBILITY()</td>
<td>返回字符串的排序规则可压缩性值，值的范围0到5表示强度由高到低，用于确定在多个操作数时该使用谁的排序规则</td>
</tr>
<tr>
<td>CONNECTION_ID()</td>
<td>返回当前客户端链接的（线程）ID，这是唯一值</td>
</tr>
<tr>
<td>CURRENT_USER()或CURRENT_USER</td>
<td>当前经过身份验证的用户名和主机名</td>
</tr>
<tr>
<td>DATABASE()或SCHEMA()</td>
<td>返回当前（默认）使用的数据库名称</td>
</tr>
<tr>
<td>FOUND_ROWS()</td>
<td>在执行带有LIMIT子句的SELECT语句后使用，返回如果不使用LIMIT子句时查询到的总行数</td>
</tr>
<tr>
<td>LAST_INSERT_ID()</td>
<td>上次插入数据时，具有自动增量属性的列的值</td>
</tr>
<tr>
<td>ROW_COUNT()</td>
<td>受到更新影响的行数</td>
</tr>
<tr>
<td>USER()或SESSION_USER()或SYSTEM_USER()</td>
<td>客户端提供的用户名和主机名，与CURRENT_USER不一定相同</td>
</tr>
<tr>
<td>VERSION()</td>
<td>当前MySQL服务器的版本号</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<p><img src="image-20210605003628334.png" alt="image-20210605003628334" /></p>
<h3 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h3>
<p>聚合函数是对值的结果集进行操作，通常与<code>GROUP BY</code>子句一起使用，用于将值按条件分组到子集中。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>AVG()</td>
<td>计算表达式（列）的平均值</td>
</tr>
<tr>
<td>BIT_AND()、BIT_OR()、BIT_XOR()</td>
<td>返回表达式（列）中所有值的按位与、或、异或。按64位精度计算</td>
</tr>
<tr>
<td>COUNT()</td>
<td>返回SELECT语句查询到行数</td>
</tr>
<tr>
<td>MAX()、MIN()</td>
<td>计算表达式（列）的最大值、最小值</td>
</tr>
<tr>
<td>SUM()</td>
<td>对表达式（列）求和</td>
</tr>
<tr>
<td>JSON_ARRAYAGG()、JSON_OBJECTAGG()</td>
<td>将结果集作为单个JSON数组、对象返回（需MySQL版本大于5.7.22）</td>
</tr>
</tbody>
</table>
<p>示例数据表与数据如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `number` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `number` () <span class="keyword">VALUES</span> (<span class="number">79</span>), (<span class="number">80</span>), (<span class="number">59</span>), (<span class="number">54</span>), (<span class="number">94</span>), (<span class="number">6</span>), (<span class="number">49</span>), (<span class="number">23</span>), (<span class="number">66</span>), (<span class="number">63</span>), (<span class="number">16</span>);</span><br></pre></td></tr></table></figure>
<p><img src="image-20210605235130332.png" alt="image-20210605235130332" /></p>
<h4 id="关于count"><a class="markdownIt-Anchor" href="#关于count"></a> 关于COUNT(*)</h4>
<blockquote>
<p><code>COUNT(*)</code>返回查询到的所有行数，并且忽略NULL值</p>
<p>对于InnoDB存储引擎，它不保留表中行的内部计数，因为并发事务可能同时检索到不同数量的行，所以<code>SELECT COUNT(*)</code>只对当前事务可见的行进行计数。并且InnoDB以相同方式处理<code>SELECT COUNT(*)</code>和<code>SELECT COUNT(1)</code>操作，两者没有性能差异。</p>
<p>对于MyISAM存储引擎，<code>COUNT(*)</code>是经过优化的，可以在没有WHERE子句的SELECT语句中快速检索一个表中的列；而<code>COUNT(1)</code>仅在表中第一列的属性为非空时与<code>COUNT(*)</code>相同</p>
</blockquote>
<h3 id="其它函数"><a class="markdownIt-Anchor" href="#其它函数"></a> 其它函数</h3>
<p>除上述函数外还有类型转换函数、压缩与解压函数、ip地址函数、<a href="https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html">全文搜索函数</a>、<a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html">XML函数</a>、<a href="https://dev.mysql.com/doc/refman/5.7/en/json-functions.html">JSON函数</a>、<a href="https://dev.mysql.com/doc/refman/5.7/en/spatial-analysis-functions.html">地理位置分析函数</a>等等。此处列举部分</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CAST(expr AS type)或CONVERT(expr,type)</td>
<td>强制类型转换</td>
</tr>
<tr>
<td>CONVERT(expr USING charset)</td>
<td>将数据以指定字符集作转换</td>
</tr>
<tr>
<td>COMPRESS()</td>
<td>压缩字符串</td>
</tr>
<tr>
<td>UNCOMPRESS()</td>
<td>解压字符串，传入非压缩字符串时将会返回NULL</td>
</tr>
<tr>
<td>UNCOMPRESSED_LENGTH()</td>
<td>返回压缩字符串在被压缩之前的长度</td>
</tr>
<tr>
<td>VALIDATE_PASSWORD_STRENGTH()</td>
<td>验证密码明文的强度，返回值从0到100表示由弱到强（需插件支持，否则始终为0）</td>
</tr>
<tr>
<td>DEFAULT()</td>
<td>返回列的默认值，没有时会返回错误</td>
</tr>
<tr>
<td>INET_ATON()、INET6_ATON()</td>
<td>返回IPv4、IPv6地址的10进制数值</td>
</tr>
<tr>
<td>INET_NTOA()、INET6_NTOA()</td>
<td>将10进制数值转换为IPv4、IPv6地址</td>
</tr>
<tr>
<td>IS_IPV4()、IS_IPV6()</td>
<td>判断是否为IPv4、IPv6地址格式</td>
</tr>
<tr>
<td>SLEEP()</td>
<td>休眠(暂停)指定的秒数</td>
</tr>
<tr>
<td>UUID()</td>
<td>返回一个UUID字符串</td>
</tr>
<tr>
<td>UUID_SHORT()</td>
<td>返回一个无符号64位的UUID整数</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<p><img src="image-20210606001559927.png" alt="image-20210606001559927" /></p>
<h2 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h2>
<blockquote>
<p>索引是用于在表中快速查找具有特定列值的行记录的一种数据结构。如果不使用索引，MySQL则需要从第一行开始逐渐扫描到整个表以找到符合条件的记录，表越大越耗时。在表中设置索引后，MySQL可以快速定位到相关位置，而不必遍历所有数据。相当于字典中的按拼音、笔画检索</p>
</blockquote>
<p>实际上，索引也是一种表，它将主键或索引字段以及指向每个记录的指针保存到另外的表中。用户无需关心索引，它们只用来加快查询速度。使用了索引的表在插入和更新操作上会花费更多的时间，但查询会非常快。因为在插入或更新时，数据库也需要插入或更新相应的索引数据</p>
<h3 id="索引的类型"><a class="markdownIt-Anchor" href="#索引的类型"></a> 索引的类型</h3>
<p>索引按用途可以分为以下类型：</p>
<ul>
<li>普通索引（index）：基本索引，没有任何限制（可以重复，允许空值）</li>
<li>主键（primary key）索引：即创建主键时隐含的索引，是表的唯一标识，不允许重复，不允许空值，每个表只能有一个主键索引。作为最常见的索引，通常定义为自增属性的整数类型。InnoDB要求每个表都有一个这样的索引。<strong>不要使用任何与业务相关的字段作为主键</strong></li>
<li>唯一（unique）索引：顾名思义，值唯一的索引，不允许重复但可以为空值</li>
<li>全文（fulltext）索引：全文索引用于全文搜索，允许重复和空值，只能在CHAR、VARCHAR或TEXT类型的列上创建，且只有InnoDB和MyISAM存储引擎支持</li>
</ul>
<p>以及用于空间数据类型的空间（spatial）索引。额外的，ARCHIVE引擎不支持空间索引</p>
<hr />
<p>按存储方式（算法）可以分为：<a href="https://zh.wikipedia.org/wiki/B%E6%A0%91">B树</a>索引、<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_hash_index">哈希索引</a>、<a href="https://zh.wikipedia.org/wiki/R%E6%A0%91">R树</a>索引（用于空间数据类型）、<a href="https://en.wikipedia.org/wiki/T-tree">T树</a></p>
<blockquote>
<p>MySQL的大多数索引（主键、唯一、全文和普通索引）使用B树结构存储。InnoDB中全文索引使用<a href="https://baike.baidu.com/item/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95">倒排列表</a><br />
内存存储引擎默认为哈希索引，同时支持B树索引<br />
NDB存储引擎中B树被实现为T树</p>
</blockquote>
<p>关于InnoDB无主键时的运行原理，引申阅读：<a href="https://medium.com/@genchilu/a-brief-introduction-to-cluster-index-and-secondary-index-in-innodb-9b8874d4da6a">InnoDB中的聚簇索引和二级索引</a>以及<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html">MySQL手册14.6.2.1 Clustered and Secondary Indexes</a></p>
<h3 id="多列索引"><a class="markdownIt-Anchor" href="#多列索引"></a> 多列索引</h3>
<p>也叫复合索引，即除了对单列字段定义索引外，还可以将多个列组合创建一个多列索引，InnoDB引擎最多允许16个列，只有查询条件中使用了这些列中第一个列时，多列索引才会被使用。多列索引可以被视为排序数组</p>
<blockquote>
<p>MySQL可以对多列索引中包含的所有列的查询进行索引，或者只索引第一列、前两列或者前三列，但不能对第二列或之后的列查询使用索引，所以多列索引第一列的选择很重要</p>
</blockquote>
<h3 id="使用索引"><a class="markdownIt-Anchor" href="#使用索引"></a> 使用索引</h3>
<h4 id="创建索引"><a class="markdownIt-Anchor" href="#创建索引"></a> 创建索引</h4>
<p>有三种方式创建索引，一是在创建表时指定索引，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `article` (</span><br><span class="line">	`id` INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">	`title` VARCHAR(50) NOT NULL,</span><br><span class="line">	`slug` VARCHAR(50) NULL DEFAULT NULL COLLATE,</span><br><span class="line">	`text` TEXT NULL DEFAULT NULL COLLATE,</span><br><span class="line">	PRIMARY KEY (`id`), UNIQUE INDEX `slug` (`slug`), INDEX `id` (`id`, `title`, `slug`), FULLTEXT INDEX `text` (`text`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>索引需要命名，在MySQL中，主键的名称是<code>PRIMARY</code>。对于其他索引，如果不指定名称，则会为索引指定与索引中第一列相同的名称，并使用带序号的后缀（_2, _3, _4, …）使其唯一</p>
<p>对于字符串类型的索引，可以指定仅使用列值前面部分长度的字节作为索引：<code>列名(长度)</code>。对于<code>TEXT</code>和<code>BLOB</code>类型则必须指定长度。为索引限制列的长度可以使索引文件更小，这可以节省大量的磁盘空间，还可以加快插入操作的速度。全文索引不支持列长度限制，因为索引总是在整个列的内容上进行操作</p>
</blockquote>
<p>二是使用<code>CREATE INDEX</code>创建索引，但是不能创建主键索引，不加修饰时为普通索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT <span class="operator">|</span> SPATIAL] INDEX 索引名 <span class="keyword">ON</span> 表名 (列) [注释]</span><br></pre></td></tr></table></figure>
<p><code>CREATE INDEX</code>等同于<code>ALTER TABLE</code>中添加索引，这便是第三种方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 索引类型 (列) [注释]</span><br></pre></td></tr></table></figure>
<p>索引类型中<code>KEY</code>与<code>INDEX</code>是同义词，但主键只能用<code>PRIMARY KEY</code>，唯一索引和全文索引可省略<code>KEY</code>或<code>INDEX</code></p>
<h4 id="删除与查询索引"><a class="markdownIt-Anchor" href="#删除与查询索引"></a> 删除与查询索引</h4>
<p>使用<code>DROP INDEX</code>删除索引，等同于<code>ALTER TABLE</code>中删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX 索引名 <span class="keyword">ON</span> 表名</span><br></pre></td></tr></table></figure>
<p>使用<code>DROP INDEX</code>删除主键，则索引名为<code>PRIMARY</code>且必须加反引号，如果主键含有自增属性，则无法直接删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> [INDEX <span class="operator">|</span> KEY] 索引名</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY</span><br></pre></td></tr></table></figure>
<p>也可以重命名索引名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME INDEX 旧索引名 <span class="keyword">TO</span> 新索引名</span><br></pre></td></tr></table></figure>
<p>MySQL中并没有提供直接修改索引其它属性的语句，变通的方法是删除原来的索引再添加</p>
<p>要查询索引信息，可以使用<code>SHOW INDEX</code>语句，其中<code>FROM 表名 FROM 库名</code>与<code>FROM 库名.表名</code>是等价的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;INDEX <span class="operator">|</span> INDEXES <span class="operator">|</span> KEYS&#125; &#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; 表名或库名 [<span class="keyword">WHERE</span> 条件]</span><br></pre></td></tr></table></figure>
<p><img src="image-20210612235935464.png" alt="image-20210612235935464" /></p>
<p>其中一些属性释义：</p>
<ul>
<li>Non_unique：如果该索引不能包含重复项，则为0，否则为1</li>
<li>Seq_in_index：索引中列的序号，从1开始</li>
<li>Collation：列在索引中的排序方式。A表示升序，NULL表示未排序</li>
<li>Cardinality：对索引中唯一值的数量的估计值。该值是基于存储为整数的统计信息来计算的，因此即使对于小的表也不一定精确。此数越大，MySQL在执行连接时使用索引的可能性就越高</li>
<li>Sub_part：索引的前缀。如果列仅部分被索引，则为索引的字符长度；如果整列被索引，则为NULL</li>
<li>Packed：指示关键字的压缩方式，若没有则为NULL</li>
<li>Null：如果索引列是否包含NULL值，有则为YES；无则为空字符串</li>
<li>Index_type：索引使用的存储算法类型，BTREE、FULLTEXT、HASH或RTREE</li>
</ul>
<h2 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h2>
<p>事务（transaction）指的是在数据库管理系统中执行过程的一个逻辑单位，由一组有限的数据库操作序列构成。具体来说就是将多个增删改查语句作为一个可提交（commit）或回滚（rollback）的单个工作单元来执行，其只会产生两种结果：要么事务提交后所有操作都成功执行，要么事务回滚所有操作都不会执行</p>
<h3 id="acid四大特性"><a class="markdownIt-Anchor" href="#acid四大特性"></a> ACID四大特性</h3>
<p>在操作数据库写入或更新数据的过程中，为保证事务是正确可靠的，必须具备四个特性：</p>
<ul>
<li>原子性（Atomicity）：事务作为一个整体，被执行时其中对数据库的操作要么全部被执行，要么都不执行</li>
<li>一致性（Consistency）：在事务开始前和事务结束后，数据库的整体数据是完整的。</li>
<li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li>
<li>持久性（Durability）：成功执行的事务对数据库的修改应该被持久化存储，即使系统断电也不会丢失</li>
</ul>
<h3 id="事务语句"><a class="markdownIt-Anchor" href="#事务语句"></a> 事务语句</h3>
<p>MySQL通过<code>SET autocommit</code>、<code>START TRANSACTION</code>、<code>COMMIT</code>和<code>ROLLBACK</code>等语句来支持本地事务（区别于分布式）。默认情况下，MySQL的自动提交模式处于开启状态，即每一条语句都是原子的，不能使用回滚来撤消，但是如果语句的执行产生错误，则会回滚该语句。</p>
<p><img src="image-20210608155134256.png" alt="image-20210608155134256" /></p>
<ul>
<li><code>START TRANSACTION</code>或<code>BEGIN</code>开启一个新的事务，并且隐式禁用自动提交模式（提交或回滚后恢复）</li>
<li><code>SET autocommit=0</code>或<code>1</code>显式禁用或启用当前会话的自动提交模式。autocommit是会话变量，修改仅保留于会话中</li>
<li><code>COMMIT</code>提交当前事务，使其更改永久化</li>
<li><code>ROLLBACK</code>回滚当前事务，取消其所有更改</li>
<li><code>SET TRANSACTION</code>设定事务属性，如<a href="#%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">隔离级别</a>（ISOLATION LEVEL）、访问模式</li>
</ul>
<h4 id="隐式提交"><a class="markdownIt-Anchor" href="#隐式提交"></a> 隐式提交</h4>
<p>在MySQL中，一些语句（及其任何同义词）如果在事务中执行，那么在执行前或执行后都会隐式地提交并结束当前会话中活动的任何事务，如定义或修改数据库对象的DDL语句，事务控制和锁定语句，数据加载语句，数据库管理语句，复制语句</p>
<p>同时因为隐式提交，所以存在这些语句的事务在执行后也无法回滚。在设计事务时不应包含此类语句</p>
<h4 id="访问模式"><a class="markdownIt-Anchor" href="#访问模式"></a> 访问模式</h4>
<p>访问模式决定在事务中对数据的操作是可读写（<code>READ WRITE</code>）还是只读（<code>READ ONLY</code>）</p>
<h4 id="事务属性范围"><a class="markdownIt-Anchor" href="#事务属性范围"></a> 事务属性范围</h4>
<p>可以在<code>SET</code>后跟<code>GLOBAL</code>或<code>SESSION</code>关键字来为全局或当前会话设置事务属性，根据范围的不同会产生不同的效果：</p>
<ul>
<li>全局：适用于所有后续会话；当前会话不受影响</li>
<li>会话：适用于当前会话中所有后续事务；可以在事务中设置但不影响当前事务</li>
<li>无关键字：仅适用于当前会话的下一个事务；事务中不允许使用（无关键字的设置）</li>
</ul>
<h3 id="数据一致性问题"><a class="markdownIt-Anchor" href="#数据一致性问题"></a> 数据一致性问题</h3>
<p>在一个以上的事务并发执行时，读取数据可能会出现三种问题：脏读（Dirty Read）、不可重复读（Non Repeatable Read）和幻读（Phantom Read）</p>
<h4 id="脏读"><a class="markdownIt-Anchor" href="#脏读"></a> 脏读</h4>
<p>脏读即一个事务会读到另一个事务<u>未提交</u>的（脏）数据</p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务1</th>
<th>事务2</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>事务开始</td>
<td>事务开始</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td>查询数据</td>
</tr>
<tr>
<td>3</td>
<td>更新数据</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>查询数据（<strong>脏读</strong>）</td>
</tr>
<tr>
<td>5</td>
<td>回滚</td>
<td></td>
</tr>
</tbody>
</table>
<p>如上所示，在事务2的时刻4时，读到了事务1更新后但未提交的数据，在事务1回滚后事务2读到的数据就是脏数据</p>
<h4 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h4>
<p>区别于脏读，一个事务中连续两次读取的数据<u>内容不一致</u></p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务1</th>
<th>事务2</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>事务开始</td>
<td>事务开始</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td>查询数据</td>
</tr>
<tr>
<td>3</td>
<td>更新数据</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>提交</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td></td>
<td>查询数据（<strong>不可重复读</strong>）</td>
</tr>
</tbody>
</table>
<p>在事务2读取到事务1更新前的数据但事务1没有回滚而是提交了，之后事务2再次读取到不同的数据，此时的现象便是不可重复读</p>
<h4 id="幻读"><a class="markdownIt-Anchor" href="#幻读"></a> 幻读</h4>
<p>幻读与不可重复读相似，区别在于<u>数量不一致</u></p>
<table>
<thead>
<tr>
<th>时刻</th>
<th>事务1</th>
<th>事务2</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>事务开始</td>
<td>事务开始</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td>查询数据</td>
</tr>
<tr>
<td>3</td>
<td>插入/删除数据</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>提交</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td></td>
<td>查询数据（<strong>幻读</strong>）</td>
</tr>
</tbody>
</table>
<p>如果事务2第一次查询数据时有x条数据，事务2插入或者删除n条数据并提交了，事务2再次查询发现有x±n条数据，如幻影一般，便是幻读</p>
<h3 id="隔离级别"><a class="markdownIt-Anchor" href="#隔离级别"></a> 隔离级别</h3>
<p>SQL标准（ISO/IEC 9075）为解决上述一致性问题定义了下列4种事务隔离级别，分别对应了是否存在数据一致性的问题：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>读未提交（Read Uncommitted）</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>读已提交（Read Committed）</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>可重复读（Repeatable Read）</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>可序列化（Serializable）</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>从上到下隔离级别由低到高，隔离级别越高，隔离性也就越高，同时性能影响越大，可支持的并发也就越低</p>
<ul>
<li>读未提交是最低的隔离级别，在同一事务中可以读取其它事务未提交的数据，查询语句会以非锁定的方式执行，存在所有问题</li>
<li>读已提交只允许同一事务读取其它事务已经提交的数据，可以解决脏读但存在不可重复读的问题</li>
<li>可重复读会对同一事务的第一次读取建立快照，以保证同一事务中多个查询的一致性，解决了不可重复读的问题</li>
<li>可序列化作为最高的隔离级别，强制要求所有事务按次序执行，解决了问题，但是并发性能很低，所以很少使用</li>
</ul>
<blockquote>
<p>MySQL的InnoDB引擎默认隔离级别是<code>REPEATABLE READ</code>，默认访问模式为可读写<br />
<img src="image-20210609031455914.png" alt="image-20210609031455914" /></p>
</blockquote>
<p>可重复读依旧存在幻读的问题，可序列化性能又较低。为了解决幻读，InnoDB使用了各种各样的锁机制，此处就不再详解了，参考<a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html">MySQL手册14.7.4幻行</a></p>
<h2 id="账户与权限系统"><a class="markdownIt-Anchor" href="#账户与权限系统"></a> 账户与权限系统</h2>
<p>MySQL的账户系统可以使客户端用户连接到服务器并访问服务器管理的数据，权限系统则是对从给定主机连接的用户进行身份验证，并将该用户与数据库上的操作（如增删改查等）权限进行控制。权限系统确保所有用户只能执行被允许的操作。</p>
<blockquote>
<p>权限系统的不足之处：</p>
<ul>
<li>不能明确的拒绝指定用户的访问（可以锁定）</li>
<li>不能指定一个用户有创建或删除数据库中表的权限，但却没有创建或删除数据库本身的权限</li>
<li>用户密码适用于整个账户。不能将密码与特定的对象（如数据库、表或存储过程）相关联</li>
</ul>
</blockquote>
<p>MySQL中与用户权限有关的表都在数据库<code>mysql</code>中，共有6个：</p>
<ul>
<li><code>user</code>：用户帐户、全局权限和其他非权限字段</li>
<li><code>db</code>：数据库级别的权限。适用于库及库中的所有对象</li>
<li><code>tables_priv</code>：表级别的权限。其中授予的权限适用于表及其所有列</li>
<li><code>columns_priv:</code>：列级别的权限。仅适用于特定列</li>
<li><code>procs_priv</code>：存储过程和函数权限</li>
<li><code>proxies_priv</code>：代理用户权限。表示哪些用户可以作为其他用户的代理，以及用户是否可以将代理权限授予其他用户</li>
</ul>
<h3 id="账户系统"><a class="markdownIt-Anchor" href="#账户系统"></a> 账户系统</h3>
<p>账户身份由用户名和连接的主机名组成，在识别时会同时考虑主机名和用户名，因为同一个用户名可以在不同的主机上登录，并且可以授予相同用户名在不同主机上不同的权限。作为MySQL自身的账户系统，与操作系统的用户无关。</p>
<p>账户身份语法为<code>'用户名'@'主机名'</code>，@和主机名可以忽略，此时相当于<code>'用户名'@'%'</code>。用户名和主机名作为标识符或字符串使用时需要加上反引号、单引号或双引号（除了@符号）。如果用户名和主机名在未加引号前是合法的标识符，则无需引号。如果用户名中有特殊字符（如空格或-），或者主机名包含特殊字符或通配符（如.或%），则必须使用引号。</p>
<p><img src="image-20210614184231206.png" alt="image-20210614184231206" /></p>
<p>user表中中<code>user</code>和<code>host</code>即为用户名和主机名；带<code>priv</code>后缀的表示<code>Privilege</code>，即<a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html">权限信息</a>；<code>max</code>前缀的表示资源控制；其它的为访问控制</p>
<p>用户名最长32个字符，主机名最长60个字符，密码使用了特定的算法进行加密，默认情况下用户名和密码仅支持ASCII字符。在访问控制中进行比较时，用户名区分大小写，而主机名不区分。主机名部分可以使用多种形式：</p>
<ul>
<li>可以是域名或IP地址（IPv4或IPv6）。<code>localhost</code>表示本地主机，<code>127.0.0.1</code>表示IPv4环回接口，<code>::1</code>表示IPv6环回接口</li>
<li>允许使用通配符%和_匹配域名或IP地址，与模式匹配的LIKE含义相同。<br />
但<strong>IP通配符只匹配IP地址，不匹配域名</strong>，并且<strong>不支持在用户名中使用通配符</strong></li>
<li>IPv4地址可以使用掩码表示，如198.168.100.0/255.255.255.0</li>
</ul>
<p>使用<code>SHOW CREATE USER</code>语句查看当前账户创建语句</p>
<p><img src="image-20210615171804024.png" alt="image-20210615171804024" /></p>
<h4 id="预留账户"><a class="markdownIt-Anchor" href="#预留账户"></a> 预留账户</h4>
<p>在MySQL初始化后，会生成三个预留账户</p>
<ul>
<li>‘root’@‘localhost’：用于管理使用，具有所有权限，可以执行任何操作</li>
<li>‘mysql.sys’@‘localhost’：用于sys模式对象的定义器。此帐户可避免重命名或删除root帐户时出现问题。此帐户默认被锁定，无法用于客户端登录</li>
<li>‘mysql.session’@‘localhost’：由插件内部访问服务器使用。此帐户默认被锁定，无法用于客户端登录</li>
</ul>
<h4 id="添加与删除账户"><a class="markdownIt-Anchor" href="#添加与删除账户"></a> 添加与删除账户</h4>
<p>使用<code>CREATE USER</code>语句创建账户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 账户名 [IDENTIFIED <span class="keyword">BY</span> 密码] [<span class="keyword">WITH</span> 资源选项] [密码选项 <span class="operator">|</span> 锁定选项]</span><br></pre></td></tr></table></figure>
<p>创建后的账户没有权限，如果省略主机名则为<code>%</code>，密码使用明文即可。密码选项与锁定选项如下</p>
<ul>
<li><code>PASSWORD EXPIRE</code>：将密码标记为已过期</li>
<li><code>PASSWORD EXPIRE DEFAULT</code>：将密码标记为系统变量<code>default_password_lifetime</code>值的天数后过期，默认为0</li>
<li><code>PASSWORD EXPIRE NEVER</code>：将密码标记为永不过期</li>
<li><code>PASSWORD EXPIRE INTERVAL N DAY</code>：将密码标记为N天后过期</li>
<li><code>ACCOUNT LOCK</code>、<code>ACCOUNT UNLOCK</code>：标记账户为锁定状态或非锁定状态</li>
</ul>
<hr />
<p>使用<code>DROP USER</code>语句删除账户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> [IF <span class="keyword">EXISTS</span>] 账户名</span><br></pre></td></tr></table></figure>
<p>该语句可以删除一个或多个账户（包括其所有权限）；使用<code>IF EXISTS</code>来避免删除不存在的账户而报错；<code>DROP USER</code>不会自动删除或使被删除用户创建的数据库及其中的对象无效</p>
<blockquote>
<p>删除账户的操作被设计为不会自动关闭任何开启的用户会话，如果已登录的用户被删除，则在该用户关闭会话前删除不会生效</p>
</blockquote>
<h4 id="修改账户信息"><a class="markdownIt-Anchor" href="#修改账户信息"></a> 修改账户信息</h4>
<p>修改账户信息（包括密码）可以使用<code>ALTER USER</code>语句，语法与创建账户基本一致。第二种语法用于修改当前账户的密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> [IF  <span class="keyword">EXISTS</span>] 账户名 [IDENTIFIED <span class="keyword">BY</span> 密码] [<span class="keyword">WITH</span> 资源选项] [密码选项 <span class="operator">|</span> 锁定选项]</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="keyword">USER</span>() IDENTIFIED <span class="keyword">BY</span> 密码</span><br></pre></td></tr></table></figure>
<p>也可以使用<code>SET PASSWORD</code>语句来修改密码，不使用FOR时修改当前用户密码，密码使用明文即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD [<span class="keyword">FOR</span> 账户名] <span class="operator">=</span> 新密码</span><br></pre></td></tr></table></figure>
<p>要修改账户名，需要使用<code>RENAME USER</code>语句，重命名操作不会影响原有账户的所有权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">RENAME <span class="keyword">USER</span> 旧账户名 <span class="keyword">TO</span> 新账户名</span><br></pre></td></tr></table></figure>
<h3 id="权限管理"><a class="markdownIt-Anchor" href="#权限管理"></a> 权限管理</h3>
<p>权限分为管理员权限和数据库权限</p>
<ul>
<li>管理员权限允许用户管理MySQL服务器，这些权限是全局的，并不特定于数据库</li>
<li>数据库权限应用于数据库及其内的所有对象。可以为特定的数据库授予，也可以全局授予</li>
</ul>
<p>可以分别为数据库中的特定对象或者特定类型的所有对象（如表、索引、视图和存储过程）全局授予权限。如果在连接时当前用户的权限被（自己或其他人）更改，则这些更改不一定对之后的语句生效</p>
<blockquote>
<p>不建议使用增删改语句直接操作权限表，由于这些修改而导致格式错误的数据会被服务器忽略，并且在手动重新加载权限表或重启MySQL之前，这些更改不会生效。MySQL 5.7.18之后，对于任何修改权限表的操作，服务器都会检查该表是否符合预期的格式，否则会报错</p>
</blockquote>
<p><code>SHOW GRANTS</code>以<code>GRANT</code>语句的形式显示分配给用户的权限</p>
<p><img src="image-20210615173049685.png" alt="image-20210615173049685" /></p>
<h4 id="分配权限"><a class="markdownIt-Anchor" href="#分配权限"></a> 分配权限</h4>
<p><code>GRANT</code>语句向用户授予权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限类型 [(列名)] <span class="keyword">ON</span> 权限级别 <span class="keyword">TO</span> 账户名 [<span class="keyword">WITH</span> &#123;<span class="keyword">GRANT</span> OPTION <span class="operator">|</span> 资源选项&#125;]</span><br></pre></td></tr></table></figure>
<p>权限类型通常使用<code>ALL</code>表示<code>PRIVILEGES</code>，即所有权限，但不包括<code>GRANT OPTION</code>和<code>PROXY</code>权限（分配权限的权限与代理用户的权限），<code>USAGE</code>表示无任何权限。可后跟括号将列名括起来表示列级权限，多个列之间使用逗号分割。权限级别描述符有：</p>
<ul>
<li><code>*.*</code>全局权限</li>
<li><code>数据库名.*</code>指定数据库级权限，仅使用<code>*</code>时为当前默认数据库</li>
<li><code>数据库名.表名</code>指定表级权限，如果仅使用表名则表示默认数据库中的表</li>
</ul>
<p>授予所有权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> 账户名 <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION</span><br></pre></td></tr></table></figure>
<p>不增加<code>WITH GRANT OPTION</code>时，权限仅次于root</p>
<h4 id="撤销权限"><a class="markdownIt-Anchor" href="#撤销权限"></a> 撤销权限</h4>
<p><code>REVOKE</code>语句用于系统管理员撤销其它帐户的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限类型 [(列名)] <span class="keyword">ON</span> 权限级别 <span class="keyword">FROM</span> 账户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> [PRIVILEGES], <span class="keyword">GRANT</span> OPTION <span class="keyword">FROM</span> 账户名</span><br><span class="line"><span class="keyword">REVOKE</span> PROXY <span class="keyword">ON</span> <span class="keyword">user</span> <span class="keyword">FROM</span> 账户名</span><br></pre></td></tr></table></figure>
<p>权限类型与级别同<code>GRANT</code>语句中描述的一样。要撤销其权限的用户帐户必须存在，但在撤销权限前不需要先授予。使用第二种语法撤销所有权限，但不会删除账户</p>
<ul>
<li>全局权限的更改仅在客户端下次会话连接时生效，更改不会应用于所有当前连接的用户</li>
<li>数据库级权限的更改在切换默认数据库之后生效</li>
<li>表和列权限的更改将在之后发出的查询操作生效</li>
</ul>
<blockquote>
<p><strong>当数据库或表被删除时，相应的权限不会被自动撤销</strong></p>
</blockquote>
<h2 id="数据库的备份与恢复"><a class="markdownIt-Anchor" href="#数据库的备份与恢复"></a> 数据库的备份与恢复</h2>
<p>MySQL作为保存数据的系统，为了在诸如系统宕机、硬件故障、用户误操作时不至于丢失数据，或升级MySQL时转移数据，其备份与恢复功能都是十分重要的。</p>
<p><strong>以下所有操作均需登录数据库</strong></p>
<h3 id="备份数据"><a class="markdownIt-Anchor" href="#备份数据"></a> 备份数据</h3>
<p>同客户端程序mysqld一样，MySQL提供了一个mysqldump程序用于逻辑备份，其主要生成一组SQL语句来转储数据库，此程序还可以生成CSV、其他分隔符格式或XML格式的文本。mysqldump程序的命令格式如下，每行表示一种语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] [&gt; sql文件]</span><br><span class="line">mysqldump [选项] --databases 数据库名 [&gt; sql文件]</span><br><span class="line">mysqldump [选项] --all-databases [&gt; sql文件]</span><br></pre></td></tr></table></figure>
<p>多个选项、表名、数据库名之间使用空格分隔，sql文件包括扩展名且使用绝对路径，不使用<code>&gt;</code>指定输出文件时，将输出到命令行。选项有如下几类，可以在命令行或选项文件(如my.ini)的<code>[mysqldump]</code>和<code>[client]</code>组中指定，此处仅列出常用选项，除组合选项以外使用时不要求顺序，短选项方式区分大小写</p>
<p>连接选项：</p>
<ul>
<li><code>--host=主机名</code>或<code>-h 主机名</code>：指定主机名，默认为localhost</li>
<li><code>--port=端口号</code>或<code>-P 端口号</code>：使用TCP/IP连接时的端口号</li>
<li><code>--user=用户名</code>或<code>-u 用户名</code>：用于连接到MySQL服务器的用户名（不含主机名）</li>
<li><code>--password[=password]</code>或<code>-p[password]</code>：账户密码，可以不填写值，在命令执行后提示输入，如果指定，则与选项名之间不能存在空格</li>
</ul>
<p>DDL选项：</p>
<ul>
<li><code>--add-drop-database</code>：在创建数据库之前删除数据库。默认不使用</li>
<li><code>--add-drop-table</code>：在创建表之前删除表</li>
<li><code>--no-create-db</code>或<code>-n</code>：在使用第二或第三种语法时不创建数据库</li>
<li><code>--no-create-info</code>或<code>-t</code>：不创建表</li>
<li><code>--replace</code>：对于数据使用替换语句而不是插入语句</li>
</ul>
<p>调试选项：</p>
<ul>
<li><code>--comments</code>或<code>-i</code>：在备份文件中写入注释信息，如程序版本、服务器版本和主机名。默认开启</li>
<li><code>--skip-comments</code>：不写入注释信息</li>
<li><code>--allow-keywords</code>：允许关键字作为列名。即在列名前加上表名</li>
<li><code>--force</code>或<code>-f</code>：强制执行，忽略备份时产生的所有错误</li>
<li><code>--verbose</code>或<code>-v</code>：详细模式，输出备份时的更多信息</li>
</ul>
<p>格式化选项：</p>
<ul>
<li><code>--compact</code>：使输出紧凑化，该选项会同时关闭删除数据库、写入注释、在插入时关闭索引以及设置字符集功能选项</li>
<li><code>--complete-insert</code>或<code>-c</code>：在插入语句中使用完整的列名</li>
<li><code>--create-options</code>：在建表语句中包含所有表选项</li>
<li><code>--quote-names</code>或<code>-Q</code>：对标识符使用反引号，默认启用</li>
<li><code>--result-file=文件名</code>或<code>-r 文件名</code>：输出到指定的文件，忽略错误并覆盖旧内容。固定换行符为<code>\n</code></li>
<li><code>--xml</code>或<code>-X</code>：输出为XML格式的文件</li>
</ul>
<p>过滤选项：</p>
<ul>
<li><code>--all-databases</code>或<code>-A</code>：与第三种语法相同，备份所有数据库</li>
<li><code>--ignore-table=库名.表名</code>：忽略指定的表，必须同时指定数据库和表名。要忽略多个表，需要多次使用此选项</li>
<li><code>--no-data</code>或<code>-d</code>：仅备份表结构，不备份表数据</li>
<li><code>--databases</code>或<code>-B</code>：与第二种语法相同，备份多个数据库时后面的所有名称被视为数据库名；备份单个数据库时可省略此选项，此时如果使用多个名称则第一个视为数据库名，后面的被视为表名，并且输出中不含<code>CREATE DATABASE</code>和<code>USE</code>语句</li>
<li><code>--tables</code>：重写前一个选项，将后面的所有名称视为表名</li>
<li><code>--where='条件表达式'</code>或<code>-w '条件表达式'</code>：仅备份指定WHERE条件的数据，如果条件表达式包含空格或命令行专用的其他字符，则必须加引号</li>
</ul>
<p>事务性选项：</p>
<ul>
<li><code>--add-locks</code>：在表数据的周围使用<code>LOCK TABLES</code>和<code>UNLOCK TABLES</code>语句，可以在还原时更快的加载数据</li>
<li><code>--flush-privileges</code>：在备份文件备份完数据库之后添加权限刷新语句。备份系统数据库时应当使用此选项</li>
<li><code>--no-autocommit</code>：备份时将表数据的插入包括事务中（使用<code>SET autocommit=0</code>和<code>COMMIT</code>语句）</li>
<li><code>--order-by-primary</code>：在备份时按主键或第一个唯一索引列排序</li>
<li><code>--single-transaction</code>：将事务隔离模式设置为可重复读并使用事务模式备份数据</li>
</ul>
<p>性能选项：</p>
<ul>
<li><code>--extended-insert</code>或<code>-e</code>：使用一个插入语句插入多条数据（而不是每条一个）。可以减少备份文件的大小，并且在执行还原时速度更快</li>
<li><code>--insert-ignore</code>：使用<code>INSERT IGNORE</code>语句而不是<code>INSERT</code>语句</li>
<li><code>--quick</code>或<code>-q</code>：强制备份程序一次一行地检索表数据，而不是检索整个表，并且在写入文件前会先缓冲在内存中。对于备份大型表的数据很有用</li>
<li><code>--opt</code>：默认开启，此选项是这些选项的组合–add-drop-table --add-locks --create-options --extended-insert --quick --set-charset</li>
<li><code>--skip-opt</code>：关闭前一个选项</li>
</ul>
<blockquote>
<p>备份程序默认情况下忽略系统表INFORMATION_SCHEMA、performance_schema和sys。如果需要，请在选项中显式指定</p>
</blockquote>
<h3 id="恢复数据"><a class="markdownIt-Anchor" href="#恢复数据"></a> 恢复数据</h3>
<p>恢复数据，即重新加载mysqldump生成的文件。如果是通过<code>-all databases</code>或<code>--databases</code>选项生成的，恢复数据时就非常简单，同样在命令行执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql &lt; sql文件</span><br></pre></td></tr></table></figure>
<p>或者登录后使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source <span class="keyword">sql</span>文件</span><br></pre></td></tr></table></figure>
<p>sql文件同样需要包括扩展名且使用绝对路径。对于不包含<code>CREATE</code>和<code>USE</code>数据库语句的备份文件，在恢复时则需要先创建数据库并切换</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis：从入门到框架整合</title>
    <url>/redis-abc/</url>
    <content><![CDATA[<h2 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h2>
<blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>
</blockquote>
<span id="more"></span>
<p>官网：<a href="https://redis.io/">https://redis.io/</a>		中文官网：<a href="http://www.redis.cn/">http://www.redis.cn/</a>		交互式教程（英文）：<a href="http://try.redis.io/">http://try.redis.io/</a></p>
<h2 id="二-安装"><a class="markdownIt-Anchor" href="#二-安装"></a> 二、安装</h2>
<p>安装前需要注意的：</p>
<ol>
<li>中文官网上的非最新版本</li>
<li>官网只提供源码包下载</li>
<li>官方推荐在Linux系统上安装使用，具体方法参考上一篇文章</li>
</ol>
<p>所以这里简单说明一下如何在Windows系统上安装。因为在Windows系统上使用要编译生成exe文件，需要微软Visual Studio那一套工具，还有Windows SDK，操作较为麻烦，所以这里分享两个已经编译好的Redis for Windows。选择其一即可</p>
<p>一个是微软提供的（版本较老，已经很久没更新了）：<a href="https://github.com/microsoftarchive/redis/releases">Redis 3.2.1</a>。另一个是：<a href="https://github.com/tporadowski/redis/releases">Redis 5.0.9</a></p>
<hr />
<p>下载zip解压缩或msi安装，exe文件双击执行，pdb文件用于调试</p>
<p><img src="image-20200719143817458.png" alt="image-20200719143817458" /></p>
<p>要附加参数的话使用cmd执行，例如<code>redis-server.exe redis.windows.conf</code>指定配置文件</p>
<p>想要后台运行的话可以安装成服务：</p>
<ul>
<li>安装服务：<code>redis-server --service-install redis.windows.conf</code></li>
<li>卸载服务：<code>redis-server --service-uninstall</code></li>
<li>启动服务：<code>redis-server --service-start</code></li>
<li>关闭服务：<code>redis-server --service-stop</code></li>
</ul>
<h2 id="三-基础"><a class="markdownIt-Anchor" href="#三-基础"></a> 三、基础</h2>
<p>Redis默认有16个数据库，初始使用第0个数据库，在配置文件中可以找到相关说明</p>
<blockquote>
<p># Set the number of databases. The default database is DB 0, you can select<br />
# a different one on a per-connection basis using SELECT <dbid> where<br />
# dbid is a number between 0 and ‘databases’-1<br />
databases 16</p>
</blockquote>
<p>Redis的基本数据类型有五种：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)</p>
<p>扩展数据类型三种：bitmap（位图），hyperloglog（基数统计）和geospatial（地理空间）</p>
<h3 id="1-库相关命令"><a class="markdownIt-Anchor" href="#1-库相关命令"></a> 1、库相关命令</h3>
<p>切换数据库：<code>select dbid</code>（dbid为数据库下标，从0开始到库数量-1）</p>
<p>查看当前数据库keys的数量：<code>dbsize</code></p>
<p>清空<strong>当前</strong>数据库的数据：<code>flushdb</code></p>
<p>清空<strong>所有</strong>数据库的数据：<code>flushall</code></p>
<p><img src="image-20200719162004247.png" alt="image-20200719162004247" /></p>
<h3 id="2-基本操作"><a class="markdownIt-Anchor" href="#2-基本操作"></a> 2、基本操作</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SET key value</code></td>
<td>设置一个key的string值</td>
</tr>
<tr>
<td><code>GET key</code></td>
<td>返回key的string值</td>
</tr>
<tr>
<td><code>RENAME key newkey</code></td>
<td>重命名key。如果key与newkey相同，将返回一个错误。如果newkey已经存在，则值将被覆盖</td>
</tr>
<tr>
<td><code>KEYS pattern</code></td>
<td>查找所有符合给定模式pattern（正则表达式）的 key，例如<code>keys *</code>将显示所有key</td>
</tr>
<tr>
<td><code>EXISTS key</code></td>
<td>查询key是否存在，如果存在返回1，不存在返回0</td>
</tr>
<tr>
<td><code>DEL key</code></td>
<td>删除指定的一个或多个key，如果删除中的某些key不存在，则直接忽略</td>
</tr>
<tr>
<td><code>EXPIRE key seconds</code></td>
<td>设置一个key的过期的秒数，超过时间后，将会自动删除该key</td>
</tr>
<tr>
<td><code>TTL key</code></td>
<td>返回key剩余的过期秒数<br />如果key不存在或者已过期，返回 -2；如果key存在并且没有设置过期时间（永久有效），返回 -1</td>
</tr>
<tr>
<td><code>TYPE key</code></td>
<td>返回key所存储的值的数据结构类型</td>
</tr>
</tbody>
</table>
<p><img src="image-20200719165352594.png" alt="image-20200719165352594" /></p>
<h2 id="四-基本数据类型"><a class="markdownIt-Anchor" href="#四-基本数据类型"></a> 四、基本数据类型</h2>
<p>以下仅介绍部分命令不作演示，推荐自行测试</p>
<h3 id="1-string"><a class="markdownIt-Anchor" href="#1-string"></a> 1、String</h3>
<p>String是最基本，也是最简单的数据类型</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>APPEND key value</code></td>
<td>如果key存在并且类型为字符串，把value追加到原key值的结尾。<br />如果key不存在，那么它会先创建一个空字符串的key，再执行追加操作</td>
</tr>
<tr>
<td><code>STRLEN key</code></td>
<td>返回key的string类型value的长度。如果key的值不是string类型，就返回错误</td>
</tr>
<tr>
<td><code>INCR key</code>（<a href="#%E6%B3%A81%EF%BC%9A">注1</a>）</td>
<td>对key的值执行原子的加1操作。如果指定的key不存在，那么在执行操作之前，会先将它的值设定为0。<br/>如果key中的值不是string类型或者存储的字符串类型不能表示为一个整数<br />那么执行这个命令时服务器会返回一个错误：(error) ERR value is not an integer or out of range</td>
</tr>
<tr>
<td><code>DECR key</code></td>
<td>对key的值执行原子的减1操作。其它同上</td>
</tr>
<tr>
<td><code>INCRBY key increment</code></td>
<td>对key的值执行原子的指定值加量操作。其它同上</td>
</tr>
<tr>
<td><code>DECRBY key decrement</code></td>
<td>对key的值执行原子的指定值减量操作。其它同上</td>
</tr>
<tr>
<td><code>GETRANGE key start end</code></td>
<td>返回key对应的字符串value由start到end的子串，闭合区间。<br />可以用负的值来表示从string尾部开始数的下标。所以-1就是最后一个字符。</td>
</tr>
<tr>
<td><code>SETRANGE key offset value</code></td>
<td>从key指定的offset处开始，用value覆盖<br />如果offset比当前key对应string还要长，那这个string后面就补0以达到offset的长度</td>
</tr>
<tr>
<td><code>SETEX key seconds value</code></td>
<td>设置key的字符串value，同时设置在指定的时间(单位：秒)之后失效（set with expire）</td>
</tr>
<tr>
<td><code>SETNX key value</code></td>
<td>如果key不存在，设置key的值为value。 当key存在时，什么也不做（set if not exists）</td>
</tr>
<tr>
<td><code>MSET key value [key value ...]</code></td>
<td>对应给定的keys到他们相应的values上。MSET会用新的value替换已经存在的value<br />此命令是原子的，所以所有给定的keys是一次性set的（全部改变或者全都不改变）</td>
</tr>
<tr>
<td><code>MGET key [key ...]</code></td>
<td>返回所有指定的key的value。对于不存在的key，返回特殊值nil</td>
</tr>
<tr>
<td><code>MSETNX key value [key value ...]</code></td>
<td>此命令批量设置key的value，同<code>SETNX</code>一样也是原子的</td>
</tr>
<tr>
<td><code>GETSET key value</code></td>
<td>返回原来key对应的value并设定新value。如果key存在但是对应的value不是字符串，就返回错误</td>
</tr>
</tbody>
</table>
<h4 id="注1"><a class="markdownIt-Anchor" href="#注1"></a> 注1：</h4>
<p>这些命令(增量、减量)仅限于64位的有符号整型数据。由于redis并没有一个明确的类型来表示整型数据，所以这个操作是一个字符串操作。执行这个操作的时候，key对应存储的字符串被解析为10进制的64位有符号整型数据。事实上，Redis 内部采用整数形式来存储对应的整数值，所以对该类字符串值实际上是用整数保存，也就不存在存储整数的字符串表示所带来的额外消耗。</p>
<h3 id="2-list"><a class="markdownIt-Anchor" href="#2-list"></a> 2、List</h3>
<blockquote>
<p>Redis列表是简单的字符串列表，按照插入顺序排序，基本上就是链表（linked lists）。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br />
一个列表最多可以包含 2^32 - 1 个元素 (4294967295)。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>LPUSH key value [value ...]</code></td>
<td>把一个或多个值插入到key的list的左边（头部），对于不存在的key，插入操作前会先创建一个空list</td>
</tr>
<tr>
<td><code>RPUSH key value [value ...]</code></td>
<td>把一个或多个值插入到key的list的右边（尾部），对于不存在的key，插入操作前会先创建一个空list</td>
</tr>
<tr>
<td><code>LRANGE key start stop</code></td>
<td>返回key指定的list从start到stop下标的元素</td>
</tr>
<tr>
<td><code>LPOP key</code></td>
<td>移除并且返回 key 对应的 list 的第一个元素，不存在时返回 nil</td>
</tr>
<tr>
<td><code>RPOP key</code></td>
<td>移除并且返回 key 对应的 list 的最后一个元素，不存在时返回 nil</td>
</tr>
<tr>
<td><code>LINDEX key index</code></td>
<td>返回key指定位置的元素</td>
</tr>
<tr>
<td><code>LLEN key</code></td>
<td>返回 key 中list的长度。 如果不存在返回0。 当存储在 key 里的值不是一个list的话，会返回error</td>
</tr>
<tr>
<td><code>LREM key count value</code></td>
<td>从 key 的列表里移除前 count 次出现的值为 value 的元素，key不存在时返回0<br />count大于0时，从左往右移除；小于0时从右往左移除；等于0时移除所有</td>
</tr>
<tr>
<td><code>LTRIM key start stop</code></td>
<td>把一个list从start到stop的位置修剪掉，只保留start到stop的元素</td>
</tr>
<tr>
<td><code>RPOPLPUSH source destination</code></td>
<td>把source的最后一个元素（列表尾部元素）移动到destination的第一个元素前面（列表头部）<br />如果source不存在，那么会返回nil值，并且不会执行任何操作。<br />如果destination不存在，那么会新建一个空的destination列表，然后移动<br />如果source和destination的key相同，那么这个操作等同于移动列表最后一个元素到列表自身的头部位置</td>
</tr>
<tr>
<td><code>LSET key index value</code></td>
<td>设置列表key中index位置的值为value，当index超出范围时会返回错误</td>
</tr>
<tr>
<td><code>LINSERT key BEFORE|AFTER pivot value</code></td>
<td>在列表指定值（pivot）的前面或后面（BEFORE|AFTER）插入一个值。pivot不存在时返回-1</td>
</tr>
</tbody>
</table>
<p>以上命令的前缀<code>L</code>可以理解为Left，也可以理解为List，<code>R</code>则是right。所有需要位置参数（start、stop、index等）的命令，下标都为0，可以使用负数表示从尾部开始倒数。常用<code>lrange key 0 -1</code>来获取一个list的所有值</p>
<h3 id="3-set"><a class="markdownIt-Anchor" href="#3-set"></a> 3、Set</h3>
<blockquote>
<p>set是一种不重复且无序的字符串元素的集合</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SADD key member [member ...]</code></td>
<td>添加一个或多个元素到集合key中，member已存在则忽略，key不存在则新建，key不是集合则报错</td>
</tr>
<tr>
<td><code>SMEMBERS key</code></td>
<td>返回key集合所有的元素</td>
</tr>
<tr>
<td><code>SISMEMBER key member</code></td>
<td>判断集合中一个元素是否存在，是返回1，否则返回0</td>
</tr>
<tr>
<td><code>SCARD key</code></td>
<td>返回集合中元素的数量</td>
</tr>
<tr>
<td><code>SREM key member [member ...]</code></td>
<td>移除集合中指定的元素（2.4版本后可移除多个）</td>
</tr>
<tr>
<td><code>SRANDMEMBER key [count]</code></td>
<td>随机返回集合中的一个元素。2.6版本后，可以指定一个可选项count，它将随机返回count个</td>
</tr>
<tr>
<td><code>SPOP key [count]</code></td>
<td>随机移除集合中的一个元素。3.0版本后，可以指定一个可选项count，它将随机移除count个</td>
</tr>
<tr>
<td><code>SMOVE source destination member</code></td>
<td>将源集合的指定元素移动到目标集合中</td>
</tr>
<tr>
<td><code>SDIFF key [key ...]</code></td>
<td>返回一个集合与给定集合的差集的元素</td>
</tr>
<tr>
<td><code>SINTER key [key ...]</code></td>
<td>返回指定所有集合的元素的交集</td>
</tr>
<tr>
<td><code>SUNION key [key ...]</code></td>
<td>返回指定所有集合的元素的并集</td>
</tr>
</tbody>
</table>
<h3 id="4-hash"><a class="markdownIt-Anchor" href="#4-hash"></a> 4、hash</h3>
<p>哈希散列：</p>
<blockquote>
<p>Hashes,由field和关联的value组成的map。field和value都是字符串的。这和Ruby、Python的hashes很像</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>HSET key field value</code></td>
<td>设置hash类型的key中指定字段的值</td>
</tr>
<tr>
<td><code>HGET key field</code></td>
<td>获取hash类型的key中指定字段的值。当字段不存在或者 key 不存在时返回nil</td>
</tr>
<tr>
<td><code>HMSET key field value [field value ...]</code></td>
<td>设置hash类型的key中指定多个字段的值</td>
</tr>
<tr>
<td><code>HMGET key field [field ...]</code></td>
<td>获取hash类型的key中指定多个字段的值，对于不存在的key或者字段，返回nil</td>
</tr>
<tr>
<td><code>HGETALL key</code></td>
<td>返回 key 指定的哈希集中所有的字段和值。返回值中，每个字段名的下一个是它的值</td>
</tr>
<tr>
<td><code>HDEL key field [field ...]</code></td>
<td>移除hash类型的key中指定的一个或多个字段，不存在的字段会被忽略，不存在的key会`返回0</td>
</tr>
<tr>
<td><code>HLEN key</code></td>
<td>返回hash类型的key的字段数量</td>
</tr>
<tr>
<td><code>HEXISTS key field</code></td>
<td>判断hash里是否存在指定字段，存在字段返回1，不存在字段或key返回0</td>
</tr>
<tr>
<td><code>HKEYS key</code></td>
<td>返回hash中所有的字段名</td>
</tr>
<tr>
<td><code>HVALS key</code></td>
<td>返回hash中所有字段的值</td>
</tr>
<tr>
<td><code>HINCRBY key field increment</code></td>
<td>增加hash中指定字段的数值。如果 key 不存在，会创建一个新的哈希集并与 key 关联。如果字段不存在，则字段的值在该操作执行前被设置为 0</td>
</tr>
<tr>
<td><code>HSETNX key field value</code></td>
<td>如果hash中指定字段不存在，那么设置字段的值，如果字段存在则忽略。如果key不存在，那么会创建一个新的key并与其关联</td>
</tr>
</tbody>
</table>
<p>hash没有HDECRBY的用法，可以通过<code>HINCRBY key field increment</code>中指定负数来减值</p>
<h3 id="5-zset"><a class="markdownIt-Anchor" href="#5-zset"></a> 5、Zset</h3>
<p>有序集合：</p>
<blockquote>
<p>zset，也叫Sorted sets，类似Sets，但是每个字符串元素都关联到一个叫score的浮动数值（floating number value）。里面的元素总是通过score进行着排序，所以不同的是，它是可以检索的一系列元素的集合</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ZADD key score member [score member ...]</code></td>
<td>添加一个或多个指定score值的元素到集合key中，score是一个用于排序的值（<a href="#%E6%B3%A82%EF%BC%9A">注2</a>）</td>
</tr>
<tr>
<td><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code></td>
<td>返回集合中score值在min到max中的元素（包括min和max），按从小到大排序。可以在min或max值前使用<code>(</code>来表示开区间。可选参数WITHSCORES返回元素和其分数。可选的LIMIT参数指定返回结果的数量及区间（类似SQL中SELECT LIMIT offset, count）</td>
</tr>
<tr>
<td><code>ZREVRANGE key start stop [WITHSCORES]</code></td>
<td>返回有序集合中指定区间内的元素。按score值递减(从大到小)来排列。可选参数WITHSCORES返回元素和其分数</td>
</tr>
<tr>
<td><code>ZREM key member [member ...]</code></td>
<td>移除有序集合中的指定一个或多个元素</td>
</tr>
<tr>
<td><code>ZCARD key</code></td>
<td>返回有序集合中元素的个数</td>
</tr>
<tr>
<td><code>ZCOUNT key min max</code></td>
<td>返回有序集合中，score值在min到max之间(包括min和max)的元素个数</td>
</tr>
</tbody>
</table>
<h4 id="注2"><a class="markdownIt-Anchor" href="#注2"></a> 注2：</h4>
<p>Redis 有序集合的score分数值使用双精度64位浮点数。我们支持所有的架构，这表示为一个IEEE 754 floating point number，它能包括的整数范围是-(2^53) 到 +(2^53)。或者说是-9007199254740992 到 9007199254740992。更大的整数在内部用指数形式表示，所以，如果为分数设置一个非常大的整数，你得到的是一个近似的十进制数。+inf和-inf都是有效值，分别表示正无穷和负无穷</p>
<h2 id="五-扩展数据类型"><a class="markdownIt-Anchor" href="#五-扩展数据类型"></a> 五、扩展数据类型</h2>
<h3 id="1-geospatial"><a class="markdownIt-Anchor" href="#1-geospatial"></a> 1、Geospatial</h3>
<p>地理空间、地理位置。这种数据是基于有序集合实现的：</p>
<blockquote>
<p>sorted set使用一种称为Geohash的技术进行填充。经度和纬度的位是交错的，以形成一个独特的52位整数. 我们知道，一个sorted set 的double score可以代表一个52位的整数，而不会失去精度。</p>
<p>这种格式允许半径查询检查的1 + 8个领域需要覆盖整个半径，并丢弃元素以外的半径。通过计算该区域的范围，通过计算所涵盖的范围，从不太重要的部分的排序集的得分，并计算得分范围为每个区域的sorted set中的查询。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GEOADD key longitude latitude member [longitude latitude member ...]</code></td>
<td>将指定的一个或多个地理空间位置添加到指定的key中，按经度、纬度、名称的顺序。<br />经度范围为-180度到180度，纬度范围为-85.05112878度到85.05112878度</td>
</tr>
<tr>
<td><code>GEODIST key member1 member2 [unit]</code></td>
<td>返回两个指定位置之间的直线距离，指定单位unit可选m、km、mi、ft（米、千米、英里、英尺）之一，默认使用米</td>
</tr>
<tr>
<td><code>GEOPOS key member [member ...]</code></td>
<td>返回指定的一个或多个元素的位置（经度、纬度）</td>
</tr>
<tr>
<td><code>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</code></td>
<td>返回指定经纬度（圆心）。不超过给定范围（半径）所有位置的元素<br />范围单位可选可选m、km、mi、ft（米、千米、英里、英尺）之一<br />WITHCOORD选项将范围内元素的经纬度一并返回<br />WITHDIST选项将范围内元素与圆点的距离一并返回<br />WITHHASH选项将经纬度经过原始 geohash 编码的有序集合分值（不常用）<br />COUNT指定前N个匹配的元素数量</td>
</tr>
<tr>
<td><code>GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</code></td>
<td>用法同上，不同的是这个命令指定的是某个位置元素，而不是经纬度</td>
</tr>
<tr>
<td><code>GEOHASH key member [member ...]</code></td>
<td>返回一个元素位置经纬度的11个字符Geohash字符串，这会丢失一些精度。但精简了表达方式</td>
</tr>
</tbody>
</table>
<p>可以使用<a href="http://www.jsons.cn/lngcode/">城市经纬度查询</a>来获取数据，实际使用时有工具类可以导入数据</p>
<p>由于geospatial是使用zset实现的，所以<code>ZREM key member [member ...]</code>可以移除指定的geospatial元素，同理其它zset命令也可以使用</p>
<h3 id="2-hyperloglog"><a class="markdownIt-Anchor" href="#2-hyperloglog"></a> 2、HyperLogLog</h3>
<p>基数统计（基数，简单理解就是不重复的元素）：</p>
<blockquote>
<p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。它是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。<br />
在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。<br />
但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
</blockquote>
<p>此类型的命令就三个：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>PFADD key element [element ...]</code></td>
<td>将任意数量的元素添加到指定的 HyperLogLog 里面</td>
</tr>
<tr>
<td><code>PFCOUNT key [key ...]</code></td>
<td>当命令作用于单个键时， 返回储存在给定键的 HyperLogLog 的近似基数， 如果键不存在， 返回 0 。<br/>当命令作用于多个键时， 返回所有给定 HyperLogLog 的并集的近似基数， 这个近似基数是通过将所有给定 HyperLogLog 合并至一个临时 HyperLogLog 来计算得出的。<br />命令返回的可见集合（observed set）基数并不是精确值， 而是一个带有 0.81% 标准错误（standard error）率的近似值。</td>
</tr>
<tr>
<td><code>PFMERGE destkey sourcekey [sourcekey ...]</code></td>
<td>将多个HyperLogLog合并为一个HyperLogLog，合并后的HyperLogLog储存在destkey键中，它的基数元素趋近于所有HyperLogLog的集合的并集</td>
</tr>
</tbody>
</table>
<h4 id="小插曲命令中的前缀pf是啥"><a class="markdownIt-Anchor" href="#小插曲命令中的前缀pf是啥"></a> 小插曲：命令中的前缀PF是啥？</h4>
<p>PF是Redis为了纪念HyperLogLog这种算法的提出者Philippe Flajolet而命名的。Philippe Flajolet是法国的计算机科学家，有一本著名的书籍《算法分析导论》作者之一就是他</p>
<p><img src="20200720135756192.png" alt="img" /></p>
<h3 id="3-bitmap"><a class="markdownIt-Anchor" href="#3-bitmap"></a> 3、Bitmap</h3>
<p>此Bitmaps非彼Bitmaps，不是BMP位图图像。</p>
<blockquote>
<p>Redis的Bitmaps实际上不是数据类型，而是在字符串类型上定义的一组面向位的操作。由于字符串是二进制安全的数据，其最大长度为512MB，因此它们可以设置为2^32个不同的位（0或1）。</p>
<p>位操作分为两种：恒定时间的单位操作，例如将位设置为1或0，或者获取其值，以及对位组的操作，例如在给定的位范围内计算设定位的数量（例如，人口统计）。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SETBIT key offset value</code></td>
<td>对 key 所储存的值，设置或清除指定偏移量上的位(bit)。value只能是0或1<br />offset必须大于或等于0`，小于 2^32 (bit 映射被限制在 512 MB 之内)。</td>
</tr>
<tr>
<td><code>GETBIT key offset</code></td>
<td>对 key 所储存的值，获取指定偏移量上的位(bit)。当 offset 比字符串值的长度大，或者 key 不存在时，返回 0</td>
</tr>
<tr>
<td><code>BITCOUNT key [start] [end]</code></td>
<td>计算指定key中，被设置为1的位数量。可选使用start和end来指定位置范围，可以使用负数表示从尾部倒数</td>
</tr>
</tbody>
</table>
<hr />
<h2 id="六-事务与乐观锁"><a class="markdownIt-Anchor" href="#六-事务与乐观锁"></a> 六、事务与乐观锁</h2>
<p>数据库事务的四大原则：<strong>ACID（原子性、一致性、隔离性、持久性）</strong>。而Redis中的事务有些不一样，原子性不是完全的；在Redis执行持久化前，数据在内存中，持久性也不是完全的</p>
<h3 id="1-redis事务"><a class="markdownIt-Anchor" href="#1-redis事务"></a> 1、Redis事务</h3>
<p>Redis中的事务可以一次执行多个命令，并且有以下重要的保证：</p>
<ul>
<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。</li>
<li>事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>事务中任意命令执行失败，其余的命令依然被执行。</li>
</ul>
<blockquote>
<p>需要注意的是，即使一个命令失败，队列中的所有其他命令都会被处理——Redis不会停止对命令的处理。</p>
</blockquote>
<p>也就是说，<strong>Redis命令的执行是原子性的</strong>，但Redis没有在事务上增加任何维持原子性的机制，所以<strong>Redis事务的执行并不是原子性的</strong></p>
<h3 id="2-使用事务"><a class="markdownIt-Anchor" href="#2-使用事务"></a> 2、使用事务</h3>
<p><code>MULTI</code>命令开启事务，之后输入的命令将按顺序进入队列（此时并没有执行），运行<code>EXEC</code>按队列里的命令顺序依次执行，使用<code>DISCARD</code>放弃事务，事务队列会被清空， 并且客户端会从事务状态中退出。</p>
<p><img src="image-20200725160057692.png" alt="image-20200725160057692" /></p>
<h3 id="3-事务中的错误"><a class="markdownIt-Anchor" href="#3-事务中的错误"></a> 3、事务中的错误</h3>
<p>使用事务时可能会遇上以下两种错误：</p>
<ul>
<li>事务在执行<code>EXEC</code>之前，入队的命令可能会出错。（类似代码编译错误）</li>
<li>命令可能在执行<code>EXEC</code>之后失败。（类似程序运行错误）</li>
</ul>
<p>前者在执行<code>EXEC</code>后，事务被放弃，所有命令都不会执行，而后者，只有错误的命令会报错，其它依旧执行</p>
<p><img src="image-20200725160957913.png" alt="image-20200725160957913" /></p>
<h3 id="4-乐观锁"><a class="markdownIt-Anchor" href="#4-乐观锁"></a> 4、乐观锁</h3>
<p>从 2.2 版本开始，Redis 可以通过乐观锁（optimistic lock）实现 CAS （check-and-set）操作。简单解释就是，事务开启前监视数据，如果在事务执行时发现这个值相比于监视时有所变化，那这个事务就不会执行。</p>
<p>命令：</p>
<p><code>WATCH key [key ...]</code>：监视一个或多个 key ，如果在事务执行之前被监视的 key 被改动，那么事务将被打断</p>
<p><code>UNWATCH</code>：取消所有key的监视（不能单独取消某个key）。如果执行EXEC或者DISCARD， 则不需要手动执行UNWATCH</p>
<p>演示此功能需要开启至少两个Redis客户端，<code>EXEC</code>执行后返回的nil即表示事务已经失效</p>
<p><img src="image-20200725173710016.png" alt="image-20200725173710016" /></p>
<p>不管事务是否成功执行， 执行EXEC或者DISCARD后对所有键的监视都会被取消，当客户端断开连接时， 该客户端对键的监视也会被取消</p>
<h2 id="七-在java中使用redis"><a class="markdownIt-Anchor" href="#七-在java中使用redis"></a> 七、在Java中使用Redis</h2>
<h3 id="1-jedis"><a class="markdownIt-Anchor" href="#1-jedis"></a> 1、Jedis</h3>
<p>Jedis是Redis官方推荐的 Java 客户端开发包，通过它，我们可以在java中使用Redis</p>
<p>创建一个普通的maven项目，然后引入Jedis的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>new一个Jedis对象，传入host和端口参数（无参也可以，默认是localhost:6379）。然后就可以通过这个对象使用Redis了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJedis</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">		System.out.println(jedis.ping());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回PONG表示已连通。其它所有命令和之前使用redis-cli.exe时完全相同，只是在java里变成了方法而已，这里就不再详解了</p>
<p>使用事务可以像下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    tx.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    tx.set(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    tx.exec();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    tx.discard();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-整合springboot"><a class="markdownIt-Anchor" href="#2-整合springboot"></a> 2、整合Springboot</h3>
<blockquote>
<p>Spring Data Redis是更大的Spring Data家族的一部分，它提供了从Spring应用程序对Redis的简单配置和访问。它为与储存的交互提供了低层次和高层次的抽象支持，从而将使用者从基础设施问题中解放出来。</p>
</blockquote>
<h4 id="21-创建项目导入依赖"><a class="markdownIt-Anchor" href="#21-创建项目导入依赖"></a> 2.1 创建项目&amp;导入依赖</h4>
<p>在IDEA中使用Spring Initializr创建springboot项目，勾选需要的依赖，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动器：redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发工具：热部署、lombok、测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过查询依赖图可以看到，springboot使用的redis客户端并不是上面用到的Jedis，而是lettuce</p>
<p><img src="image-20200726211502989.png" alt="image-20200726211502989" /></p>
<p>在 Spring Boot 1.x 版本时默认使用的是 jedis ，而在 Spring Boot 2.x 版本默认使用的则是Lettuce了</p>
<h4 id="22-lettuce"><a class="markdownIt-Anchor" href="#22-lettuce"></a> 2.2 Lettuce</h4>
<blockquote>
<p><a href="https://lettuce.io/">Lettuce</a>是一个可伸缩线程安全的Redis客户端。多个线程可以共享同一个RedisConnection。它利用优秀netty NIO框架来高效地管理多个连接。<br />
Netty是一个提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p>
</blockquote>
<p>它和Jedis的区别在于：</p>
<ol>
<li>Jedis是直连模式，每个线程都去拿自己的Jedis实例，在多个线程间共享一个Jedis实例时是线程不安全的，除非使用连接池。而且当连接数量增多时，资源消耗也会增大，连接成本就很高了。</li>
<li>Lettuce的连接是基于Netty的，连接实例可以在多个线程间共享。也就是说一个多线程的应用可以使用同一个连接实例，而不用担心并发线程的数量，是线程安全的。</li>
</ol>
<h4 id="23-配置与使用"><a class="markdownIt-Anchor" href="#23-配置与使用"></a> 2.3 配置与使用</h4>
<p>直接在application文件里配置即可。需要注意有关jedis的设置，不引入相关包的话是不会生效的。</p>
<p><img src="image-20200728004343806.png" alt="image-20200728004343806" /></p>
<p>此处按照官方<a href="https://spring.io/projects/spring-data-redis">Spring Data Redis</a>的说明。使用测试类，注入<code>RedisTemplate</code>对象，通过该对象来处理redis相关的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootRedisApplicationTests</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">RedisConnection</span> <span class="variable">connection</span> <span class="operator">=</span> redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">		System.out.println(connection.ping());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回PONG，测试成功</p>
<p><img src="image-20200728011020269.png" alt="image-20200728011020269" /></p>
<p>通过opsForX()来操作redis相关数据类型</p>
<p><img src="image-20200728012953647.png" alt="image-20200728012953647" /></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootRedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">		ValueOperations&lt;String, String&gt; strOps = redisTemplate.opsForValue();</span><br><span class="line">		strOps.set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;redis&quot;</span>);</span><br><span class="line">		System.out.println(strOps.get(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="24-简析redistemplate"><a class="markdownIt-Anchor" href="#24-简析redistemplate"></a> 2.4 简析RedisTemplate</h4>
<blockquote>
<p>RedisTemplate为执行各种Redis操作、异常转换和序列化提供高级的抽象支持。</p>
<p>模板实际上是Redis模块的中心类，因为它有丰富的特性集。虽然RedisConnection提供了接受和返回二进制值（字节数组）的低级方法，但模板负责序列化和连接管理，从而使用户不必处理这些细节。</p>
</blockquote>
<p>通过自动注入的对象，找到<code>RedisAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class="line">			<span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">		RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="keyword">public</span> StringRedisTemplate <span class="title function_">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class="line">			<span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">		<span class="type">StringRedisTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类做了几件事：</p>
<ul>
<li>启用条件：<code>RedisOperations</code>接口类存在时（RedisTemplate和StringRedisTemplate实现了此接口）</li>
<li>开启Redis配置</li>
<li>导入Lettuce和Jedis连接配置（Jedis连接配置的启用条件是当Jedis类存在时）</li>
<li>创建了两个bean，即上述<code>RedisOperations</code>接口的两个实现类</li>
<li>设置了这两个bean的<code>redisConnectionFactory</code></li>
</ul>
<h4 id="25-序列化"><a class="markdownIt-Anchor" href="#25-序列化"></a> 2.5 序列化</h4>
<blockquote>
<p>从框架的角度来看，Redis中存储的数据只有字节。虽然Redis本身支持各种类型，但在大多数情况下，这些类型指的是数据的存储方式，而不是数据所代表的内容。由用户决定是否将信息转换为字符串或任何其他对象。</p>
</blockquote>
<p>思考一个问题，如果在redis里直接储存对象，会发生什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接报错，提示说没有序列化</p>
<p><img src="image-20200728225129341.png" alt="image-20200728225129341" /></p>
<p>所以在实体类上<code>implements Serializable</code>实现序列化接口试试看</p>
<p><img src="image-20200728225401442.png" alt="image-20200728225401442" /></p>
<p>运行后如上，RedisTemplate的get有相应的反序列化设置当然没问题，那么在cmd中呢，如下图，变成了被编码后的字符串，显然这不易读，而且也不符合期望</p>
<p><img src="image-20200728225525994.png" alt="image-20200728225525994" /></p>
<hr />
<p>在<a href="#2-4-%E7%AE%80%E6%9E%90RedisTemplate">上面</a>提到的<code>RedisAutoConfiguration</code>类中，继续定位到<code>RedisTemplate</code>，重点看<code>RedisSerializer</code>类型的字段，分别有四个：<code>keySerializer</code>、<code>valueSerializer</code>、<code>hashKeySerializer</code>、<code>hashValueSerializer</code>。</p>
<p>它们均指向了<code>defaultSerializer</code>，而这个默认的序列化，则是<code>JdkSerializationRedisSerializer</code>。通过<code>RedisSerializer</code>接口的实现类发现，它不止jdk序列化一种方式，而是有7种</p>
<p><img src="image-20200728221202260.png" alt="image-20200728221202260" /></p>
<p>所以接下来自定义RedisTemplate要做的事就是进行序列化的配置</p>
<h4 id="26-自定义redistemplate"><a class="markdownIt-Anchor" href="#26-自定义redistemplate"></a> 2.6 自定义RedisTemplate</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">		RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置json序列化的规则</span></span><br><span class="line">		<span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">		<span class="comment">// 要序列化的域，field,get和set,以及修饰符范围，ANY是所有</span></span><br><span class="line">		om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">		<span class="comment">// 序列化输入的类型，必须是非final修饰的（例如String, Integer）</span></span><br><span class="line">		om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value和HashValue</span></span><br><span class="line">		Jackson2JsonRedisSerializer&lt;Object&gt; jackSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">		<span class="comment">// 使用JStringRedisSerializer来序列化和反序列化redis的key和HashKey</span></span><br><span class="line">		<span class="type">StringRedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">		jackSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">		template.setKeySerializer(stringSerializer);</span><br><span class="line">		template.setHashKeySerializer(stringSerializer);</span><br><span class="line">		template.setValueSerializer(jackSerializer);</span><br><span class="line">		template.setHashValueSerializer(jackSerializer);</span><br><span class="line">		template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置如上，代码含义已经写在注释里了，现在直接测试看看</p>
<p><img src="image-20200729000113388.png" alt="image-20200729000113388" /></p>
<p>再看cmd，key已经可以正常显示并获取了，<code>\</code>是转义符，类名会按全名保存，中文是被编码为16进制了</p>
<p><img src="image-20200729000222975.png" alt="image-20200729000222975" /></p>
<p>解码后数据显示正常，说明序列化成功了</p>
<p><img src="image-20200729000821062.png" alt="image-20200729000821062" /></p>
]]></content>
      <categories>
        <category>nosql</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>jedis</tag>
        <tag>lettuce</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基于AspectJ的AOP示例</title>
    <url>/spring-aspectj-aop/</url>
    <content><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<h3 id="关于aop"><a class="markdownIt-Anchor" href="#关于aop"></a> 关于AOP</h3>
<blockquote>
<p>AOP即Aspect Oriented Programming（面向切面编程），其通过提供另一种思考程序结构的方式来补充OOP（面向对象编程）.OOP中的key模块化单元是class，而AOP中，模块化单元是aspect。利用AOP可以对业务逻辑的各个部分进行隔离，从而降低业务逻辑各部分之间的耦合度，提高程序的可重用性，同时提高了开发的效率。</p>
</blockquote>
<span id="more"></span>
<h3 id="关于aspectj与spring"><a class="markdownIt-Anchor" href="#关于aspectj与spring"></a> 关于AspectJ与Spring</h3>
<ul>
<li>AspectJ是一个面向切面的框架，它扩展了Java语言，定义了AOP语法</li>
<li>Spring2.0以后新增了对AspectJ切点表达式支持</li>
<li>@AspectJ是Aspect5新增的功能,通过JDK5注解技术，允许直接在Bean类中定义切面</li>
<li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li>
</ul>
<h2 id="知识准备"><a class="markdownIt-Anchor" href="#知识准备"></a> 知识准备</h2>
<h3 id="aop相关术语及概念"><a class="markdownIt-Anchor" href="#aop相关术语及概念"></a> AOP相关术语及概念</h3>
<h4 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h4>
<table>
<thead>
<tr>
<th>术语</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>JoinPoint(连接点)</td>
<td>可以被拦截到的点（程序执行期间的一个点）,例如方法的执行或exception（异常）的处理。在 Spring AOP 中，连接点始终表示方法。不能被拦截的点，比如被final修饰的方法就不叫连接点</td>
</tr>
<tr>
<td>Pointcut(切入点)</td>
<td>真正被拦截的点，也就是被指定需要advice的方法</td>
</tr>
<tr>
<td>Advice(建议)</td>
<td>在切入点被拦截后采取的操作，也可以理解为通知或增强</td>
</tr>
<tr>
<td>Target(目标)</td>
<td>被一个或多个Advice处理的object</td>
</tr>
<tr>
<td>Weaving(编织)</td>
<td>将Advice应用到Target并创建一个被增强的object的过程。这可以在编译时、加载时或运行时完成。Spring的AOP使用运行时执行编织。</td>
</tr>
<tr>
<td>Proxy(代理)</td>
<td>被增强的object就叫做代理对象，在spring里使用的是JDK动态代理或CGLIB代理</td>
</tr>
<tr>
<td>Aspect(切面)</td>
<td>一个或多个Pointcut和Advice的组合就叫Aspect</td>
</tr>
</tbody>
</table>
<h4 id="advice的类型"><a class="markdownIt-Anchor" href="#advice的类型"></a> Advice的类型：</h4>
<ul>
<li>前置通知：在连接点之前执行但不能阻止执行流程进入连接点的Advice(除非抛出异常)</li>
<li>后置通知：在连接点正常完成后执行的Advice。如果方法正常返回而不抛出异常。</li>
<li>环绕通知：围绕连接点的Advice，例如方法调用。环绕通知可以在方法调用之前和之后执行自定义行为，甚至阻止方法的执行，它还负责选择是继续加入点还是通过返回自己的返回值或抛出异常来决定方法的执行。</li>
<li>异常抛出通知：如果方法通过抛出异常退出，则执行Advice</li>
<li>最终通知：无论连接点退出的方式是否正常，都要执行的Advice。类似try-catch语句finally语句块的功能</li>
</ul>
<h4 id="execution切入点表达式"><a class="markdownIt-Anchor" href="#execution切入点表达式"></a> execution切入点表达式</h4>
<p>通过execution函数,可以定义切点的方法切入，语法如下：</p>
<blockquote>
<p>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;声明类型&gt;?&lt;方法名&gt;(&lt;参数&gt;)&lt;异常类型&gt;?)</p>
</blockquote>
<p>其中?同正则表达式，表示可以出现0次或1次（可以省略），声明类型一般指java包路径</p>
<p>通配符说明：</p>
<ul>
<li>*　表示若干字符（不包括<code>.</code>）</li>
<li>…　表示若干字符（包括<code>.</code>）</li>
<li>+　表示子类，比如Dao+表示Dao类及其子类</li>
</ul>
<p>简单示例：</p>
<ul>
<li>匹配任意public方法：<code>execution(public * *(..))</code></li>
<li>匹配指定包下所有类的方法：不包含子包<code>execution(* org.example.*(..))</code><br />
包含子包<code>execution(* org.example..*(..))</code></li>
<li>任意名字为set开头的方法：<code>execution(* set*(..))</code></li>
</ul>
<h2 id="项目基础构建"><a class="markdownIt-Anchor" href="#项目基础构建"></a> 项目基础构建</h2>
<p>本示例使用环境：IDEA2019.3 + maven3.6 + jdk8</p>
<h3 id="项目配置"><a class="markdownIt-Anchor" href="#项目配置"></a> 项目配置</h3>
<p>需要添加的依赖<br />
（因为spring-context依赖于spring-aop,spring-beans,spring-core,spring-expression，所以仅需说明spring-context包，上述包会同时导入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring配置"><a class="markdownIt-Anchor" href="#spring配置"></a> spring配置</h3>
<p>输入<code>&lt;aop:</code>idea会自动提示并添加aop的xmlns。<br />
这里开启aop的aspectj-autoproxy（aspectj自动代理），以及包的注解扫描即可。后续会单独说明非注解的xml配置方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.annotation&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注解方式aop"><a class="markdownIt-Anchor" href="#注解方式aop"></a> 注解方式AOP</h2>
<h3 id="模拟业务类"><a class="markdownIt-Anchor" href="#模拟业务类"></a> 模拟业务类</h3>
<p>org.example.annotation包下新建UserDao类模拟业务方法，未使用接口，仅输出信息。使用注解注入bean。其中find方法增加返回值，findOne方法抛出异常方便后续测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;保存……&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">find</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;查询……&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;return value of find()&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;查询一条……&quot;</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;exception test&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;修改……&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;删除……&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置切面类并实现各种通知方法"><a class="markdownIt-Anchor" href="#配置切面类并实现各种通知方法"></a> 配置切面类并实现各种通知方法</h3>
<p>新建UserDaoAspect类并配置注解，@Aspect表示这是一个切面，@Component配置bean，可以不增加name或id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before(value = &quot;execution(* org.example.annotation.UserDao.delete(..))&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···前置通知···JoinPoint信息：&quot;</span> + joinPoint);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterReturning(value = &quot;execution(* org.example.annotation.UserDao.find(..))&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturing</span><span class="params">(Object returnValue)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···后置通知···获取到的返回值：&quot;</span> + returnValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Around(value = &quot;execution(* org.example.annotation.UserDao.save(..))&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···环绕通知前···&quot;</span>);</span><br><span class="line">		<span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···环绕通知后···&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proceed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AfterThrowing(value = &quot;execution(* org.example.annotation.UserDao.findOne(..))&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···异常抛出通知···异常信息：&quot;</span> + e);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After(value = &quot;execution(* org.example.annotation.UserDao.update(..))&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···最终通知···&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释：</p>
<ul>
<li>before方法的参数joinPoint会提供具体被执行的execution字符串</li>
<li>@AfterReturning的returning参数可以获取到切入点的返回值（需要在通知方法中传入同名参数）</li>
<li>around方法需要传入ProceedingJoinPoint类型的参数，使用其proceed方法来执行被拦截的方法，同时返回值作为通知方法的返回值</li>
<li>@AfterThrowing的throwing参数使用方法类似@AfterReturning的returning，可以获取到异常抛出时的异常信息，此通知在无异常时不会执行</li>
</ul>
<h3 id="测试代码与输出结果"><a class="markdownIt-Anchor" href="#测试代码与输出结果"></a> 测试代码与输出结果</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">annotationTest</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">	userDao.delete();</span><br><span class="line">	userDao.find();</span><br><span class="line">	userDao.save();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		userDao.findOne();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	userDao.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3061606868.png" alt="img" /></p>
<h3 id="使用pointcut命名切点"><a class="markdownIt-Anchor" href="#使用pointcut命名切点"></a> 使用@Pointcut命名切点</h3>
<p>当需要使用的通知方法变多的时候，后期维护再修改又会变得很麻烦，所以可以使用<code>@Pointcut</code>注解来命名一组切点，此注解的定义包括两部分：Pointcut表达式(expression)和Pointcut签名(signature)。注解不能单独使用，所以需要定义一个私有方法，也就是说@Pointcut后跟expression，私有方法的方法名为signature，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After(&quot;afterUpdate()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;\t···最终通知···&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* org.example.annotation.UserDao.update(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">afterUpdate</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>Pointcut定义时，还可以使用&amp;&amp;、||、!逻辑运算符</p>
<h2 id="xml方式配置aop"><a class="markdownIt-Anchor" href="#xml方式配置aop"></a> xml方式配置AOP</h2>
<h3 id="新建模拟业务类和切面类"><a class="markdownIt-Anchor" href="#新建模拟业务类和切面类"></a> 新建模拟业务类和切面类</h3>
<p>ProductDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductDao</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;保存……&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">find</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;查询……&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;return value of find()&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;修改……&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;查询一条……&quot;</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;exception test&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;删除……&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductDaoAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···前置通知···JoinPoint信息：&quot;</span> + joinPoint);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturing</span><span class="params">(Object returnValue)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···后置通知···获取到的返回值：&quot;</span> + returnValue);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···环绕通知前···&quot;</span>);</span><br><span class="line">		<span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···环绕通知后···&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proceed;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···异常抛出通知···异常信息：&quot;</span> + e);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;\t···最终通知···&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>业务类可以使用接口也可以不使用，spring会自动检测来决定使用哪种自动代理。切面类无需添加任何注解</p>
<h3 id="xml配置文件"><a class="markdownIt-Anchor" href="#xml配置文件"></a> xml配置文件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.xml.ProductDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDaoAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.xml.ProductDaoAspect&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;beforeSave&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.xml.ProductDao.save(..))&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;afterFind&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.xml.ProductDao.find(..))&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;aroundUpdate&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.xml.ProductDao.update(..))&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.xml.ProductDao.findOne(..))&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;afterDelete&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.example.xml.ProductDao.delete(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;productDaoAspect&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;beforeSave&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;afterFind&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;returnValue&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;aroundUpdate&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;e&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;afterDelete&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>先注入目标类和切面类，然后配置aop，这里直接使用了aop:pointcut来命名切点，也可以在具体切面里直接书写表达式。</p>
<h3 id="测试代码与输出结果-2"><a class="markdownIt-Anchor" href="#测试代码与输出结果-2"></a> 测试代码与输出结果</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xmlTest</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">ProductDao</span> <span class="variable">productDao</span>  <span class="operator">=</span> (ProductDao) context.getBean(<span class="string">&quot;productDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">	productDao.save();</span><br><span class="line">	productDao.find();</span><br><span class="line">	productDao.update();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		productDao.findOne();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	productDao.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3626514518.png" alt="img" /></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>aspectj</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>spring整合mybatis的简单示例</title>
    <url>/spring-mybatis/</url>
    <content><![CDATA[<p>spring虽然有jdbcTemplate可以简化jdbc的相关操作，但sql语句还是会写在代码里，耦合度较高。此时专业的持久层框架mybatis的优越性就体现出来了，这里通过一个简单的例子将spring整合mybatis的相关步骤记录一下，这篇示例不会涉及表示层与业务层，仅展示整合步骤。</p>
<span id="more"></span>
<h3 id="使用环境"><a class="markdownIt-Anchor" href="#使用环境"></a> 使用环境</h3>
<ul>
<li>Intellij IDEA2019.3</li>
<li>jdk8</li>
<li>maven3.6</li>
</ul>
<h3 id="如何整合"><a class="markdownIt-Anchor" href="#如何整合"></a> 如何整合</h3>
<p>spring的优势是IoC/DI，mybatis则是避免书写JDBC代码。那么我们可以把mybatis的sqlSession对象以及数据映射对象交给spring管理，仅配置java对象和映射文件即可。<br />
在这个过程中，仅数据库驱动包、spring框架包和mybatis包是不够的，还需要<a href="http://mybatis.org/spring/zh/index.html">mybatis-spring</a>这个整合包，通过这个包的功能来把SqlSessionFactory配置给spring。各部分对应版本在文档简介部分有说明。</p>
<h3 id="整合步骤"><a class="markdownIt-Anchor" href="#整合步骤"></a> 整合步骤</h3>
<h4 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> mysql</h4>
<p>首先需要数据库建表，这里参考<a href="/mybatis/mybatis-association-query/#1-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8-amp-%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE">char_info</a>表</p>
<h4 id="pomxml"><a class="markdownIt-Anchor" href="#pomxml"></a> pom.xml</h4>
<p>需要使用的jar依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring相关--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--整合包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>依赖关系如图<br />
<img src="352365815.png" alt="img" /></p>
<h4 id="charinfojava"><a class="markdownIt-Anchor" href="#charinfojava"></a> CharInfo.java</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharInfo</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String star;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> initialCost;</span><br><span class="line">	<span class="keyword">private</span> String workName;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> workId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以下省略Setter/Getter与toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="charinfomapper接口"><a class="markdownIt-Anchor" href="#charinfomapper接口"></a> CharInfoMapper接口</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.CharInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CharInfoMapper</span> &#123;</span><br><span class="line">	List&lt;CharInfo&gt; <span class="title function_">listAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="charinfoxml"><a class="markdownIt-Anchor" href="#charinfoxml"></a> charInfo.xml</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">		<span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">		<span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.CharInfoMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;CharInfo&quot;</span>&gt;</span></span><br><span class="line">		select * from char_info</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里实现mybatis自动映射的关键是</p>
<ol>
<li>namespace需要书写接口类的全限定名</li>
<li>sql语句标签的id要与接口方法名一致</li>
<li>参数类型与返回值类型需要一致(<code>select *</code>比较特殊，不需要指定List，只用List内需要包装的类型即可)</li>
</ol>
<h4 id="applicationcontextxml重点"><a class="markdownIt-Anchor" href="#applicationcontextxml重点"></a> applicationContext.xml(重点)</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--一般注解配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用spring配置数据源--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--mybatis与spring整合相关配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--别名设置--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pojo&quot;</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--自 1.3.0 版本开始，新增的 configuration 属性--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--能够在没有对应的 MyBatis XML 配置文件的情况下--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--直接设置 Configuration 实例，这里开启了驼峰命名转换--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--mapper接口包遍历扫描--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mapper&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--单个mapper接口设置--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;bean class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--	&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSession&quot;/&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--	&lt;property name=&quot;mapperInterface&quot; value=&quot;mapper.CourseMapper&quot;/&gt;--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试代码"><a class="markdownIt-Anchor" href="#测试代码"></a> 测试代码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listAlltest</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">CharInfoMapper</span> <span class="variable">charInfoMapper</span> <span class="operator">=</span> (CharInfoMapper) context.getBean(<span class="string">&quot;charInfoMapper&quot;</span>);</span><br><span class="line">		List&lt;CharInfo&gt; courseList = charInfoMapper.listAll();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (CharInfo charInfo : courseList) &#123;</span><br><span class="line">			System.out.println(charInfo);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合shiro（续）</title>
    <url>/springboot-shiro-continue/</url>
    <content><![CDATA[<p>在之前的文章里，介绍了shiro的基础以及如何与springboot中基于web项目的整合，并同时结合了mybatis的使用。</p>
<p>此文将着重讲解其中潜藏问题的处理，以及后续功能的扩展完善。</p>
<span id="more"></span>
<h2 id="一-没有被bpp处理的beans"><a class="markdownIt-Anchor" href="#一-没有被bpp处理的beans"></a> 一、没有被BPP处理的Beans</h2>
<p>BPP即<code>BeanPostProcessor</code></p>
<blockquote>
<p>BeanPostProcessor是Spring中Bean工厂的钩子（Hook），允许Spring框架在新创建Bean实例时对其进行定制化修改。它本身也是一个Bean，在通常情况下，其实例化顺序要优先于普通的Bean。因为有时BeanPostProcessor也会依赖一些Bean，所以，会存在一些普通Bean的实例化早于BeanPostProcessor的情况，因此就会造成一些问题。</p>
</blockquote>
<h3 id="1-问题复现"><a class="markdownIt-Anchor" href="#1-问题复现"></a> 1、问题复现</h3>
<p>按照shiro官方的例子<a href="https://github.com/apache/shiro/tree/master/samples/spring-boot-web">spring-boot-web</a>配置shiro即可复现（以及大多数springboot整合shiro的教程）。启动日志中，会有数个类似如下消息的提示</p>
<blockquote>
<p>Bean ‘securityManager’ of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</p>
</blockquote>
<p>对于spring来说，这是<code>info</code>级别的日志输出，因为此现象对程序运行不会产生影响，但对于使用功能上来说是会出问题的，例如：事务失效、缓存失效、数据源失效等权限框架涉及的数据处理可能会出问题，所以需要解决。</p>
<h3 id="2-成因简析"><a class="markdownIt-Anchor" href="#2-成因简析"></a> 2、成因简析</h3>
<p>详细的分析可以参考这篇文章：<a href="https://blog.csdn.net/m0_37962779/article/details/78605478">BeanPostProcessor加载次序及其对Bean造成的影响分析</a></p>
<p>简单来说大概是因为shiro一系列bean的初始化要早于数据访问层的bean，而又在Realm中注入了DAO等数据访问层的类，导致数据访问层相关的bean被提前初始化，没有被后续的BeanPostProcessor处理。</p>
<p>这对于shiro来说没什么影响，而对于需要事务、缓存等功能的数据访问层来说就很致命了。目前百度的结果大多数处理方法都无法完全解决问题，比较简单有效的方法是在Realm中注入的DAO加个<code>@Lazy</code>注解将其延后，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure>
<p>这样会使shiro的bean等待数据层的bean初始化完成后再执行。如果仅处理数据层的问题，现在已经完成了，再次启动项目，上述info级的日志仅剩下<code>securityManager</code>、<code>realm</code>、<code>shiroConfig</code>（后两个是自己项目中定义的Realm类和shiro配置类）</p>
<h3 id="3-彻底消除影响"><a class="markdownIt-Anchor" href="#3-彻底消除影响"></a> 3、彻底消除影响</h3>
<p>最无奈的莫过于知道问题如何产生的，但不知道如何解决。百度无果后，尝试谷歌，使用关键词<em>shiro BeanPostProcessor</em>搜索终于在stackoverflow上找到了答案。</p>
<p>其中一篇是<a href="https://stackoverflow.com/questions/15922559/spring-is-ignoring-transactional-annotations-in-apache-shiro-realm-class">Spring is ignoring @Transactional annotations in Apache Shiro Realm class</a>。给出的处理方案是在<code>securityManager</code>中不要setRealm，而是继承<code>ServletContextListener</code>接口，在<code>contextInitialized</code>方法中把<code>Realm</code>设置到<code>securityManager</code>中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//Initialize realms</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MainRealm</span> <span class="variable">mainRealm</span> <span class="operator">=</span> (MainRealm)ctx.getBean(<span class="string">&quot;mainRealm&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">DefaultWebSecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> (DefaultWebSecurityManager)ctx.getBean(<span class="string">&quot;securityManager&quot;</span>);</span><br><span class="line">        sm.setRealm(mainRealm);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error loading: &quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Critical system error&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实践后发现与使用<code>@Lazy</code>注解的方式相差不大，倒是启动速度好像快了一点点，感觉这种方式比使用<code>@Lazy</code>注解更符合程序逻辑。</p>
<hr />
<p>另外一篇是<a href="https://stackoverflow.com/questions/31388445/apache-shiro-jdbcrealm-with-javaconfig-and-spring-boot">Apache Shiro JdbcRealm with JavaConfig and Spring Boot</a>，高赞回答的大佬剖析的更深了：</p>
<blockquote>
<p>最简单的解决方案是确保任何与基础设施相关的bean都是用静态方法定义的。这告诉Spring它不需要初始化整个配置类（即WebSecurityConfig）。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title function_">lifecycleBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifecycleBeanPostProcessor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但这似乎没有完全解决，因为<code>ShiroFilterFactoryBean</code>也实现了<code>BeanPostProcessor</code>，和数据源造成了冲突导致无法初始化。</p>
<blockquote>
<p>不幸的是，你不能简单地将ShiroFilterFactoryBean定义为静态的，因为它依赖于其他bean定义。幸运的是，在这个实例中确实不需要BeanPostProcessor。这意味着你可以更改代码以返回factory bean的结果，该bean相当于移除了BeanPostProcessor</p>
</blockquote>
<p>示例如下，只是把返回值类型改成了<code>AbstractShiroFilter</code>，它是<code>ShiroFilterFactoryBean</code>的抽象父类，返回值转换类型即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AbstractShiroFilter <span class="title function_">shiroFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    filter.setLoginUrl(<span class="string">&quot;/admin/login&quot;</span>);</span><br><span class="line">    filter.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">// 过滤规则，注意顺序</span></span><br><span class="line">    Map&lt;String, String&gt; map = filter.getFilterChainDefinitionMap();</span><br><span class="line">    <span class="comment">// 无需权限：前台、登录页面、静态资源</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">anon</span> <span class="operator">=</span> DefaultFilter.anon.name();</span><br><span class="line">    map.put(<span class="string">&quot;/&quot;</span>, anon);</span><br><span class="line">    map.put(<span class="string">&quot;/admin/login&quot;</span>, anon);</span><br><span class="line">    map.put(<span class="string">&quot;/admin/css/**&quot;</span>, anon);</span><br><span class="line">    map.put(<span class="string">&quot;/admin/js/**&quot;</span>, anon);</span><br><span class="line">    <span class="comment">// 需要验证角色</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">roleAdmin</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s[%s]&quot;</span>, DefaultFilter.roles.name(), ConstVal.USERS_ADMIN);</span><br><span class="line">    map.put(<span class="string">&quot;/admin/**&quot;</span>, roleAdmin);</span><br><span class="line">    <span class="comment">// 退出</span></span><br><span class="line">    map.put(<span class="string">&quot;/admin/logout&quot;</span>, DefaultFilter.logout.name());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (AbstractShiroFilter) filter.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：如果要改为如上处理方式，不能使用shiro-spring-boot-web-starter依赖，而是shiro-spring</strong></p>
<p>现在启动程序，“not eligible for getting processed by all BeanPostProcessors”相关的提示已经完全消失了。</p>
<h2 id="二-使用加密的密码"><a class="markdownIt-Anchor" href="#二-使用加密的密码"></a> 二、使用加密的密码</h2>
<p>shiro提供了一些简单的基础<a href="http://shiro.apache.org/cryptography-features.html">加密功能</a>，接口类是<code>CredentialsMatcher</code>，默认使用的实现类是<code>SimpleCredentialsMatcher</code>，即直接明文比对，可以使用的实现类如下：</p>
<p><img src="image-20200829175633678.png" alt="image-20200829175633678" /></p>
<p>虽然哈希类型的加密算法（也称消息摘要）是不可逆的，也就是无法通过解密来获取原文。但原文和密文有唯一对应关系，比如常用的MD5，<code>123456</code>对应密文为<code>e10adc3949ba59abbe56e057f20f883e</code>。这样的话可以通过类似<a href="https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8">彩虹表</a>的方式破解，密码的安全性就变低了。所以需要使用更安全的算法（例如<a href="https://en.wikipedia.org/wiki/Bcrypt">bcrypt</a>）来代替MD5。</p>
<hr />
<p>shiro没有bcrypt算法的实现，需要引入额外的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>at.favre.lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcrypt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是一个基于<a href="https://github.com/djmdjm/jBCrypt">JBcrypt</a>，但是经过了大量的重构、更新和增强的一个<a href="https://github.com/patrickfav/bcrypt">Bcrypt Java Library and CLI Tool</a>。使用方法很简单，在Realm实例里<code>setCredentialsMatcher</code>使用lamda表达式设置，返回比对结果true or false即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">UserRealm</span> <span class="variable">realm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">	realm.setCredentialsMatcher((token, info) -&gt; &#123;</span><br><span class="line">		<span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line">		<span class="comment">// 传入的密码明文</span></span><br><span class="line">		<span class="type">char</span>[] plaintext = userToken.getPassword();</span><br><span class="line">		<span class="comment">// 数据库中的密文</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> info.getCredentials().toString();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> BCrypt.verifyer().verify(plaintext, ciphertext).verified;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> realm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>token</code>是在认证(authentication)期间获得的认证令牌，也就是<code>doGetAuthenticationInfo</code>方法中的参数<code>AuthenticationToken</code>；<code>info</code>即<code>AuthenticationInfo</code>是在认证(authentication)期间的返回值，它是储存于系统（通常是数据库）的认证信息</p>
<h2 id="三-保存会话"><a class="markdownIt-Anchor" href="#三-保存会话"></a> 三、保存会话</h2>
<h3 id="1-记住我"><a class="markdownIt-Anchor" href="#1-记住我"></a> 1、记住我</h3>
<p>大多数网站的登录都会有个“记住我”的功能选项，像下面这样：</p>
<p><img src="image-20200829225526950.png" alt="image-20200829225526950" /></p>
<h4 id="11-开启功能"><a class="markdownIt-Anchor" href="#11-开启功能"></a> 1.1 开启功能</h4>
<p>在前端，使用<code>input:checkbox</code>即可，name在后端对应参数接收，value为true即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>七天内免登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为在未勾选时是不会传值的，所以在controller中需要设置一个非必须的标记（默认为true）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestParam(value = &quot;remember-me&quot;, required = false)</span> Boolean rememberMe</span><br></pre></td></tr></table></figure>
<p>然后就可以设置了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"><span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否记住我（必须在subject.login(token)前，否则不会产生cookie）</span></span><br><span class="line"><span class="keyword">if</span> (rememberMe != <span class="literal">null</span>) &#123;</span><br><span class="line">    token.setRememberMe(rememberMe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="12-设置时效"><a class="markdownIt-Anchor" href="#12-设置时效"></a> 1.2 设置时效</h4>
<p>默认的“记住我”时效为一年，这是在<code>CookieRememberMeManager</code>中的构造函数设置的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CookieRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(DEFAULT_REMEMBER_ME_COOKIE_NAME);</span><br><span class="line">    cookie.setHttpOnly(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//One year should be long enough - most sites won&#x27;t object to requiring a user to log in if they haven&#x27;t visited</span></span><br><span class="line">    <span class="comment">//in a year:</span></span><br><span class="line">    cookie.setMaxAge(Cookie.ONE_YEAR);</span><br><span class="line">    <span class="built_in">this</span>.cookie = cookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>shiro在注释中给出了一年时长的理由。如果我们确实有需求改变这个值也可以，在<code>securityManager</code>中即可设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> ((CookieRememberMeManager) securityManager.getRememberMeManager()).getCookie();</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>); <span class="comment">// 记住我七天</span></span><br></pre></td></tr></table></figure>
<p>这个是shiro实现的Cookie不是servlet的Cookie，但设置方式和后者无异。注意是先将<code>getRememberMeManager</code>获得的对象转换为<code>CookieRememberMeManager</code>，然后再<code>getCookie</code></p>
<h3 id="2-当前会话session"><a class="markdownIt-Anchor" href="#2-当前会话session"></a> 2、当前会话（session）</h3>
<p>默认情况下，启动应用程序第一次访问时，会在URL后面加冒号跟一个参数<code>JSESSIONID</code>与值，在springboot-web环境下会直接跳转到400错误页，去掉参数后再次访问就正常了，此时<code>JSESSIONID</code>保存在了cookie里</p>
<p><img src="image-20200830004811803.png" alt="image-20200830004811803" /></p>
<p>要避免这样的情况，依旧是在<code>securityManager</code>设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sessionManager.setSessionIdUrlRewritingEnabled(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>要想修改这个cookie的名字也可以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">sessionIdCookie</span> <span class="operator">=</span> sessionManager.getSessionIdCookie();</span><br><span class="line">sessionIdCookie.setName(<span class="string">&quot;SESSIONID&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>改值的话会稍微麻烦点，这里使用了lamda表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MemorySessionDAO</span> <span class="variable">sessionDAO</span> <span class="operator">=</span> (MemorySessionDAO) sessionManager.getSessionDAO();</span><br><span class="line">sessionDAO.setSessionIdGenerator(session -&gt; UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>shiro默认的sessionID生成方法<code>JavaUuidSessionIdGenerator</code>如下，仅仅只是返回了一个随机的UUID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaUuidSessionIdGenerator</span> <span class="keyword">implements</span> <span class="title class_">SessionIdGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Serializable <span class="title function_">generateId</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合shiro</title>
    <url>/springboot-shiro/</url>
    <content><![CDATA[<h3 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h3>
<blockquote>
<p><strong>Apache Shiro</strong>是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业级应用程序。</p>
</blockquote>
<span id="more"></span>
<p><a href="http://shiro.apache.org/">官网</a>上有个10 Minute Tutorial（10分钟教程），方便我们快速入门shiro</p>
<p>目前的版本：<img src="https://img.shields.io/maven-central/v/org.apache.shiro/shiro-core.svg" alt="Maven Central" style="max-width:100%;"></p>
<hr />
<h4 id="shiro核心概述"><a class="markdownIt-Anchor" href="#shiro核心概述"></a> shiro核心概述</h4>
<p>在最高的概念层次上，Shiro的架构有三个主要概念：<strong>Subject</strong>、<strong>SecurityManager</strong>和<strong>Realms</strong>。下图来自官网。</p>
<p><img src="http://shiro.apache.org/assets/images/ShiroBasicArchitecture.png" alt="" /></p>
<ul>
<li>
<p>Subject（对象主体）：这个主体本质上是当前执行用户的一个特定于安全的“视图”。虽然“用户”一词通常意味着一个人，但主体可以是一个人，但它也可以表示第三方服务、守护进程帐户、定时任务或任何类似的东西——基本上是当前与软件交互的任何东西。</p>
<p>主体实例都要（并且必须）绑定到SecurityManager。当您与主体交互时，这些交互将转换为与SecurityManager的特定主体交互</p>
</li>
<li>
<p>SecurityManager（安全管理器）：SecurityManager是Shiro体系结构的核心，它充当一种“保护伞”对象，协调其内部安全组件，这些组件共同构成一个对象图。但是，一旦为应用程序配置了SecurityManager及其内部对象图，它通常就不受影响了，应用程序开发人员几乎把所有的时间都花在了Subject API上。</p>
</li>
<li>
<p>Realms（领域）：Realms充当Shiro和应用程序安全数据之间的“桥梁”或“连接器”。当需要与安全相关数据（如用户帐户）进行实际交互以执行身份验证（登录）和授权（访问控制）时，Shiro会从为应用程序配置的一个或多个Realm中查找其中的许多内容。</p>
</li>
</ul>
<h3 id="二-项目搭建"><a class="markdownIt-Anchor" href="#二-项目搭建"></a> 二、项目搭建</h3>
<p>新建一个基于springboot的web项目，依赖如下，可选添加spring-boot-devtools开启热部署方便调试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>准备几个简单的html页面</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>/user/add.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>/user/update.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		用户名：</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">		密码：</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用控制器给这些页面做个跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/user/add&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/user/update&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上基本环境就搭建完成了，下面开始shiro的配置</p>
<h3 id="三-配置shiro原生方式"><a class="markdownIt-Anchor" href="#三-配置shiro原生方式"></a> 三、配置shiro（原生方式）</h3>
<h4 id="1-访问拦截"><a class="markdownIt-Anchor" href="#1-访问拦截"></a> 1、访问拦截</h4>
<p>按照上面那个核心概念图，自定义一个Realm类，继承<code>AuthorizingRealm</code>类并重写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;===授权===&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;===验证===&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就是shiro的主要配置了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> MyRealm <span class="title function_">myRealm</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean(&quot;webSecurityManager&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;myRealm&quot;)</span> MyRealm myRealm)</span>&#123;</span><br><span class="line">		<span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">		securityManager.setRealm(myRealm);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> securityManager;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(</span></span><br><span class="line"><span class="params">			<span class="meta">@Qualifier(&quot;webSecurityManager&quot;)</span> DefaultWebSecurityManager webSecurityManager)</span>&#123;</span><br><span class="line">		<span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">		factoryBean.setSecurityManager(webSecurityManager);</span><br><span class="line"></span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;/user/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">		factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">		factoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> factoryBean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是比较传统的方法，类似于在spring程序里用xml配置bean，springboot中通过注解写成了配置类，基本步骤如下：</p>
<ol>
<li>首先需要提供Realm实例</li>
<li>然后配置SecurityManager，把Realm实例配置给SecurityManager，在这里的SecurityManager是<code>DefaultWebSecurityManager</code></li>
<li>最后配置<code>ShiroFilterFactoryBean</code>，将SecurityManager配置给<code>ShiroFilterFactoryBean</code>，然后在<code>ShiroFilterFactoryBean</code>中指定路径拦截规则（使用有序的map对象）</li>
<li>可以使用<code>setLoginUrl()</code>指定登录路径</li>
</ol>
<h5 id="过滤规则"><a class="markdownIt-Anchor" href="#过滤规则"></a> 过滤规则</h5>
<p>在上面的路径拦截规则中，map的key代表路径（可以使用通配符），value代表拦截规则，可以用<code>DefaultFilter.authc.toString()</code>来表示value，<code>DefaultFilter</code>这个枚举类列出了可以使用的拦截规则名简写及对应的类：</p>
<p>用于身份验证的：</p>
<ul>
<li>anon：允许立即访问路径而不执行任何类型的安全检查的替换器。</li>
<li>authc：需要对请求用户进行身份验证才能继续请求，如果没有，则通过将用户重定向到您配置的登录路径来强制用户去登录。</li>
<li>authcBasic：需要对请求用户进行身份验证才能继续请求，如果没有，则需要用户通过特定于HTTP基本协议的质询登录。成功登录后，允许他们继续访问请求的资源或url。</li>
<li>authcBearer：需要对请求用户进行身份验证才能继续请求，如果没有，则需要用户通过特定于HTTP承载协议的质询登录。成功登录后，允许他们继续访问请求的资源/url。</li>
<li>logout：一个简单的过滤器，在收到请求时，它将立即注销当前正在执行的subject，然后将它们重定向到配置的URL。</li>
<li>user：允许访问者是已知用户（定义为具有已知主体）时访问资源的过滤器。</li>
</ul>
<p>用于授权的：</p>
<ul>
<li>perms：如果当前用户具有映射值指定的权限，则允许访问的替换器；如果用户没有指定的所有权限，则拒绝访问。</li>
<li>port：要求请求位于特定端口上的替换器，如果不是，则重定向到该端口上的同一URL。</li>
<li>rest：将HTTP请求的方法（如GET、POST等）转换为相应操作的过滤器。</li>
<li>roles：如果当前用户具有由映射值指定的角色，则允许访问的替换器；如果用户没有指定的角色，则拒绝访问。</li>
<li>ssl：要求请求通过SSL的过滤器。</li>
</ul>
<p>用于session：</p>
<ul>
<li>noSessionCreation：将在请求期间禁用创建新会话的路径匹配过滤器。</li>
</ul>
<p>通过上面的配置，实现了路径的访问拦截，当没有登录时访问路径会跳转到登录页面，接下来实现登录认证功能</p>
<h4 id="2-用户认证"><a class="markdownIt-Anchor" href="#2-用户认证"></a> 2、用户认证</h4>
<p>补充登录页的表单属性，msg用来显示返回的错误提示信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>控制器里增加相应的处理，此处参考官方教程的10分钟快速入门</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doLogin</span><span class="params">(String username, String password, Model model)</span>&#123;</span><br><span class="line">	<span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">	<span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		subject.login(token);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">		<span class="comment">// uae.printStackTrace();</span></span><br><span class="line">		model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">		<span class="comment">// ice.printStackTrace();</span></span><br><span class="line">		model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后修改MyRealm类的<code>doGetAuthenticationInfo()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span><br><span class="line">    <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;===验证===&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,<span class="string">&quot;123456&quot;</span>,getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回值类型是<code>AuthenticationInfo</code>接口，需要找到它的实现类，所以使用<code>SimpleAuthenticationInfo</code>类，其中的参数依次是</p>
<ul>
<li>principal–与指定realm关联的“primary”主体</li>
<li>credentials–验证给定主体的凭证</li>
<li>realmName–从主体和凭据中获取realm名字</li>
</ul>
<p>这里简单处理一下，用户名可以直接对比，而密码必须交给shiro去验证</p>
<h3 id="四-整合mybatis"><a class="markdownIt-Anchor" href="#四-整合mybatis"></a> 四、整合mybatis</h3>
<p>经过上面的配置后，shiro的权限验证就基本完成了，下面使用mybatis接入数据</p>
<p>首先准备一个user表</p>
<p><img src="image-20200629171705485.png" alt="image-20200629171705485" /></p>
<p>然后使用<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">Free MyBatis plugin</a>插件生成对应的实体类、DAO接口、xml文件</p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>开启mapper接口扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.example.dao&quot;)</span></span><br></pre></td></tr></table></figure>
<p>配置数据源与mybatis</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql:///mybatis?useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<p>mapper接口增加一个<code>User selectByName(String username)</code>方法，同时在xml文件增加对应配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">  from user</span><br><span class="line">  where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改一下<code>MyRealm</code>类<code>doGetAuthenticationInfo()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;===验证===&quot;</span>);</span><br><span class="line">	<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectByName(username);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, user.getPassword(), getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里省略了业务层，直接注入DAO。现在可以用数据库里用户名和对应的密码来登录了</p>
<h3 id="五-授权"><a class="markdownIt-Anchor" href="#五-授权"></a> 五、授权</h3>
<h4 id="1-了解shiro中的权限permission"><a class="markdownIt-Anchor" href="#1-了解shiro中的权限permission"></a> 1、了解shiro中的权限（Permission）</h4>
<p><a href="http://shiro.apache.org/permissions.html">官网原文</a></p>
<blockquote>
<p>shiro将权限或操作定义为显式操作的语句。它只是对应用程序中原始功能的陈述。权限是安全策略中最底层的构造，它们只显式定义应用程序可以做什么。它们并没有描述“谁”能够执行这些操作。</p>
<p>定义允许“谁”（用户）做“什么”（权限）是以某种方式向用户分配权限的练习。这通常是由应用程序的数据模型完成的，并且在不同的应用程序中可能会有很大的差异。</p>
<p>例如，权限可以分组到一个角色中，并且该角色可以与一个或多个用户对象相关联。或者某些应用程序可以有一组用户，并且可以为一个组分配一个角色，这通过传递关联意味着该组中的所有用户都被隐式地授予该角色中的权限。</p>
<p>对于如何向用户授予权限有许多变体—应用程序根据应用程序需求确定如何对此进行建模。</p>
</blockquote>
<p>简单来说，类似于下图，把权限分配给角色，用户再拥有这个角色。</p>
<p><img src="be869e847a0c40c781e05ebb917db317.png" alt="img" /></p>
<h4 id="2-数据准备"><a class="markdownIt-Anchor" href="#2-数据准备"></a> 2、数据准备</h4>
<p>在数据表中增加一列字段<code>perms</code></p>
<p><img src="image-20200630160528819.png" alt="image-20200630160528819" /></p>
<p>同时在实体类、xml文件中增加相应的处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String perms;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;perms&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;perms&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-未授权跳转"><a class="markdownIt-Anchor" href="#3-未授权跳转"></a> 3、未授权跳转</h4>
<p>控制器增加未授权的跳转路径，这里仅返回提示信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/Unauthorized&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">unAuthorized</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;未授权禁止访问&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>shiroFilterFactoryBean</code>方法中设置跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">factoryBean.setUnauthorizedUrl(<span class="string">&quot;/Unauthorized&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>同时添加过滤规则，注意顺序，在<code>/user/**</code>规则的前面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[user:update]&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="4-访问授权"><a class="markdownIt-Anchor" href="#4-访问授权"></a> 4、访问授权</h4>
<p>最后在MyRealm的<code>doGetAuthorizationInfo</code>方法中对授权进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;===授权===&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) principals.getPrimaryPrincipal();</span><br><span class="line">	<span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">	info.addStringPermissions(Arrays.asList(user.getPerms().split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用<code>principals.getPrimaryPrincipal()</code>得到的对象就是在<code>doGetAuthenticationInfo</code>中返回对象的构造方法的第一个参数</p>
<p><code>addStringPermissions</code>需要传入一个字符串的集合，而<code>addStringPermission</code>不需要</p>
<h3 id="六-在thymeleaf中使用shiro标签"><a class="markdownIt-Anchor" href="#六-在thymeleaf中使用shiro标签"></a> 六、在thymeleaf中使用shiro标签</h3>
<h4 id="1-增加依赖"><a class="markdownIt-Anchor" href="#1-增加依赖"></a> 1、增加依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个依赖是非官方的，但是用来在thymeleaf里使用shiro标签足够了</p>
<h4 id="2-注入方言"><a class="markdownIt-Anchor" href="#2-注入方言"></a> 2、注入“方言”</h4>
<p>在<code>ShiroConfig</code>里增加一个bean，<code>ShiroDialect</code>类是上面那个依赖包里的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-使用标签"><a class="markdownIt-Anchor" href="#3-使用标签"></a> 3、使用标签</h4>
<p>先增加命名空间<code>xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</code>，然后使用相应标签</p>
<p>不添加或填写错误不影响程序运行，但会影响IDE的提示功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">&quot;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在启动程序，未登录或无相应权限时不会显示添加用户、修改用户的a标签，登录后不会显示登录的a标签</p>
<h3 id="附基于starter的快速配置方式"><a class="markdownIt-Anchor" href="#附基于starter的快速配置方式"></a> 附：基于starter的快速配置方式</h3>
<p>按照<a href="http://shiro.apache.org/spring-boot.html">官方的整合说明</a>，推荐的配置方式如下</p>
<p>还是使用配置类，这里不需要额外添加<code>securityManager</code>了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Realm <span class="title function_">realm</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> ShiroFilterChainDefinition <span class="title function_">shiroFilterChainDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">DefaultShiroFilterChainDefinition</span> <span class="variable">definition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShiroFilterChainDefinition</span>();</span><br><span class="line"></span><br><span class="line">		definition.addPathDefinition(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">		definition.addPathDefinition(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line">		definition.addPathDefinition(<span class="string">&quot;/user/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;shiroFilterChainDefinition&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> definition;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>application.properties</code>里增加设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">shiro.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">shiro.web.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">shiro.loginUrl</span>=<span class="string">/login</span></span><br><span class="line"><span class="attr">shiro.unauthorizedUrl</span>=<span class="string">/Unauthorized</span></span><br><span class="line"><span class="attr">shiro.sessionManager.sessionIdUrlRewritingEnabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">shiro.sessionManager.sessionIdCookieEnabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">shiro.successUrl</span>=<span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>功能依次是：开启shiro启动器配置，开启shiro web配置，设置登录路径，设置未授权跳转路径，是否将sessionId显示在url，是否保存sessionId到cookie，登录成功后的跳转路径</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot中的Spring MVC详解</title>
    <url>/springboot-springmvc/</url>
    <content><![CDATA[<h2 id="一-官方文档介绍"><a class="markdownIt-Anchor" href="#一-官方文档介绍"></a> 一、官方文档介绍</h2>
<p>以下内容引用自<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc">官方文档</a>，机翻并进行手动修正，部分内容已省略</p>
<span id="more"></span>
<h3 id="1-spring-mvc的自动化配置"><a class="markdownIt-Anchor" href="#1-spring-mvc的自动化配置"></a> 1、Spring MVC的自动化配置</h3>
<p>Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。自动配置在Spring默认设置的基础上添加了以下功能：</p>
<ul>
<li>包含<code>contentnegotingviewresolver</code>和<code>beannameviewsolver</code>beans</li>
<li>支持服务静态资源，包括支持Webjars（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content">链接</a>）</li>
<li>自动注册<code>Converter</code>，<code>GenericConverter</code>和<code>Formatter</code>beans</li>
<li>支持<code>HttpMessageConverters</code>（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-message-converters">链接</a>）</li>
<li>自动注册<code>MessageCodesResolver</code>（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-message-codes">链接</a>）</li>
<li>支持静态的<code>index.html</code></li>
<li>支持自定义<code>Favicon</code>（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-favicon">链接</a>）</li>
<li>自动使用一个<code>ConfigurableWebBindingInitializer</code>bean（参考<a href="https://docs.spring.io/spring-boot/docs/2.2.7.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-web-binding-initializer">链接</a>）</li>
</ul>
<p>如果您想保留这些Spring Boot MVC的自定义配置并进行更多的<a href="https://docs.spring.io/spring/docs/5.2.6.RELEASE/spring-framework-reference/web.html#mvc">MVC自定义</a>（拦截器、格式化程序、视图控制器和其他功能），可以在自己的类上添加<code>@Configuration</code>注解，（继承）类型为<code>WebMvcConfigurer</code>，但不要添加<code>@EnableWebMvc</code>注解。</p>
<p>如果你想提供<code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code>或<code>ExceptionHandlerExceptionResolver</code>的自定义实例，并且仍然保留Spring Boot MVC的自定义配置，则可以声明<code>WebMVCregistration</code>类型的bean，并使用它来提供这些组件的自定义实例。</p>
<p>如果您想完全控制Spring MVC，可以在自己的类上添加<code>@Configuration</code>和<code>@EnableWebMvc</code>注解，或者添加你自己的<code>@Configuration</code>注释<code>DelegatingWebMvcConfiguration</code>配置，如<code>@EnableWebMvc</code>的Javadoc所述。</p>
<h3 id="2-静态内容"><a class="markdownIt-Anchor" href="#2-静态内容"></a> 2、静态内容</h3>
<p>默认情况下，Spring Boot从类路径中名为<code>/static</code>（或<code>/public</code>或<code>/resources</code>或<code>/META-INF/resources</code>）的目录或<code>ServletContext</code>的根目录中提供静态内容。它使用来自Spring MVC的<code>ResourceHttpRequestHandler</code>，这样您就可以通过添加自己的<code>WebMvcConfigurer</code>和重写<code>addResourceHandlers</code>方法来修改该行为。</p>
<p>在一个独立的web应用程序中，容器中的默认servlet也被启用，并回调其行为，如果Spring决定不处理它，则从<code>ServletContext</code>的根目录提供内容。大多数情况下，这种情况不会发生（除非修改默认的MVC配置），因为Spring总是可以通过<code>DispatcherServlet</code>处理请求。</p>
<p>默认情况下，资源被映射在<code>/**</code>路径，但是你可以使用<code>spring.mvc.static-path-pattern</code>属性对其进行调整。例如，可以将所有资源重新定位到<code>/resources/**</code>中，如下所示：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/resources/**</span></span><br></pre></td></tr></table></figure>
<p>你还可以使用<code>spring.resources.static-locations</code>属性（用目录位置列表替换默认值）自定义静态资源位置。根Servlet上下文路径<code>“/”</code>也会被自动添加为一个位置。</p>
<p>除了前面提到的“标准”静态资源位置之外，还有一个特殊情况：<a href="https://www.webjars.org/">Webjars content</a>。如果jar文件是以Webjars格式打包的，那么路径为<code>/webjars/**</code>的任何资源都可以从jar文件中获得。</p>
<blockquote>
<p>如果应用程序打包为jar，请不要使用src/main/webapp目录。尽管这个目录是一个通用的标准，但它只适用于war包，如果生成jar包，大多数构建工具都会默认忽略它。</p>
</blockquote>
<h3 id="3-欢迎页面首页"><a class="markdownIt-Anchor" href="#3-欢迎页面首页"></a> 3、欢迎页面（首页）</h3>
<p>Spring Boot支持静态和模板化的欢迎页面。它首先在配置的静态内容位置中查找<code>index.html</code>文件。如果找不到索引模板，它将查找<code>index</code>模板。如果找到任何一个，它将自动用作应用程序的欢迎页。</p>
<h3 id="4-自定义favicon收藏夹图标"><a class="markdownIt-Anchor" href="#4-自定义favicon收藏夹图标"></a> 4、自定义Favicon（收藏夹图标）</h3>
<p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找<code>favicon.ico</code>。如果存在这样的文件，它将自动用作应用程序的favicon。</p>
<h3 id="5-错误处理"><a class="markdownIt-Anchor" href="#5-错误处理"></a> 5、错误处理</h3>
<p>默认情况下，Spring Boot提供了一个<code>/error</code>映射，它以合理的方式处理所有错误，并在servlet容器中将其注册为“全局”错误页。对于计算机客户端，它生成一个JSON响应，其中包含导致错误的详细信息、HTTP状态码和异常消息。对于浏览器客户端，有一个“whitelabel”错误视图，它以HTML格式呈现相同的数据（要自定义它，请添加一个解析到<code>error</code>的<code>View</code>）。要完全替换默认行为，可以实现<code>ErrorController</code>并注册该类型的bean定义，或者添加<code>ErrorAttributes</code>类型的bean以使用现有机制，但替换内容。</p>
<blockquote>
<p><code>BasicErrorController</code>可以用作自定义<code>ErrorController</code>的基类。如果要为新内容类型添加处理程序（默认情况下是专门处理text/html并为其他所有内容提供回调），这一点特别有用。为此，扩展<code>BasicErrorController</code>，添加一个带有<code>produces</code>属性和<code>@RequestMapping</code>注解的公共方法，并创建一个新类型的bean。</p>
</blockquote>
<h4 id="51-自定义错误页"><a class="markdownIt-Anchor" href="#51-自定义错误页"></a> 5.1 自定义错误页</h4>
<p>如果要显示给定状态代码的自定义HTML错误页，可以将文件添加到<code>/error</code>文件夹。错误页可以是静态HTML（即添加到任何static资源文件夹下）或使用模板生成。文件名应为确切的状态代码或序列掩码。</p>
<p>例如，要将404映射到静态HTML文件，文件夹结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line"> +- main/</span><br><span class="line">     +- java/</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources/</span><br><span class="line">         +- public/</span><br><span class="line">             +- error/</span><br><span class="line">             |   +- 404.html</span><br><span class="line">             +- &lt;other public assets&gt;</span><br></pre></td></tr></table></figure>
<p>如果使用FreeMarker模板映射所有<code>5xx</code>错误，你的文件夹结构会像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line"> +- main/</span><br><span class="line">     +- java/</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources/</span><br><span class="line">         +- templates/</span><br><span class="line">             +- error/</span><br><span class="line">             |   +- 5xx.ftlh</span><br><span class="line">             +- &lt;other templates&gt;</span><br></pre></td></tr></table></figure>
<p>对于更复杂的映射，还可以添加实现<code>ErrorViewResolver</code>接口的bean，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyErrorViewResolver</span> <span class="keyword">implements</span> <span class="title class_">ErrorViewResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class="line">        <span class="comment">// 可选择使用request或者status并返回一个ModelAndView对象</span></span><br><span class="line">        <span class="keyword">return</span> ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>您还可以使用常规的Spring MVC特性，比如<code>@ExceptionHandler</code>方法和<code>@ControllerAdvice</code>。然后，<code>ErrorController</code>将会拾取任何未处理的异常。</p>
<h3 id="6-cors跨域资源共享支持"><a class="markdownIt-Anchor" href="#6-cors跨域资源共享支持"></a> 6、CORS（跨域资源共享）支持</h3>
<p>Cross-origin resource sharing（CORS）是大多数浏览器实现的W3C规范，它允许您以灵活的方式指定哪些类型的跨域请求被授权，而不是使用一些不太安全和不太强大的方法，如IFRAME或JSONP。</p>
<p>从（spring）版本4.2开始，SpringMVC支持CORS。在Spring Boot应用程序中使用带有<code>@CrossOrigin</code>注解的控制器方法CORS配置不需要任何特定的配置。全局CORS配置可以通过使用自定义的<code>addCorsMappings(CorsRegistry)</code>方法注册<code>WebMvcConfigurer</code>bean来定义，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">corsConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/api/**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="二-源码查阅-分析"><a class="markdownIt-Anchor" href="#二-源码查阅-分析"></a> 二、源码查阅、分析</h2>
<p>首先找到关于SpringBoot对SpringMVC进行自动配置的类的全路径：</p>
<blockquote>
<p><code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.java</code></p>
</blockquote>
<h3 id="1-类注解"><a class="markdownIt-Anchor" href="#1-类注解"></a> 1、类注解</h3>
<p>这个类上的注解说明了它具有如下特性：</p>
<ul>
<li>
<p>这是一个不会代理bean方法的spring配置类</p>
</li>
<li>
<p>满足以下条件时，这个自动配置类才会生效</p>
<ul>
<li>匹配到这是一个基于servlet的web应用程序</li>
<li>在类路径中存在<code>Servlet</code>、<code>DispatcherServlet</code>以及<code>WebMvcConfigurer</code>类</li>
<li>不存在使用<code>WebMvcConfigurationSupport</code>类的bean</li>
</ul>
</li>
<li>
<p>自动配置的序号为<code>Ordered.HIGHEST_PRECEDENCE + 10</code>（HIGHEST_PRECEDENC的值为-2147483648）</p>
</li>
<li>
<p>在<code>DispatcherServletAutoConfiguration</code>类、<code>TaskExecutionAutoConfiguration</code>类和<code>ValidationAutoConfiguration</code>类之后应用自动配置</p>
</li>
</ul>
<h3 id="2-构造方法"><a class="markdownIt-Anchor" href="#2-构造方法"></a> 2、构造方法</h3>
<p>自动配置类没有提供构造方法，而是使用了一个继承<code>WebMvcConfigurer</code>的静态内部类作适配器，原因在注释上已经说明了：</p>
<blockquote>
<p>定义为嵌套配置以确保当其不在类路径上时不读取WebMVCConfiguer</p>
</blockquote>
<p>所以这里的构造方法是<code>WebMvcAutoConfigurationAdapter</code>的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">		ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">		ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">	<span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">	<span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">	<span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">	<span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="21-静态资源"><a class="markdownIt-Anchor" href="#21-静态资源"></a> 2.1 静态资源</h4>
<p>需要关注的属性是<code>resourceProperties</code>，定位到<code>ResourceProperties</code>类，发现如下静态字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">		<span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>和文档说明一致，表示静态资源从这些路径里查找。然后再定位到<code>addResourceHandlers</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">Duration</span> <span class="variable">cachePeriod</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">	<span class="type">CacheControl</span> <span class="variable">cacheControl</span> <span class="operator">=</span> <span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">	<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">		customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">				.addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">				.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">String</span> <span class="variable">staticPathPattern</span> <span class="operator">=</span> <span class="built_in">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">	<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">		customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">				.addResourceLocations(getResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">				.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，第一个if判断属性<code>spring.resources.add-mappings</code>需要为true，资源处理器才生效，当然这是默认值；第二个if则是文档中说明的webjars了；第三个if判断是否有静态路径参数，定位过去发现默认值是<code>/**</code>，后面的链式调用功能依次是：</p>
<ul>
<li>添加路径处理器（<strong>这个路径指链接上的路径，不是静态资源的本地路径</strong>）</li>
<li>添加资源位置（本地路径，相对于项目文件）</li>
<li>设置缓存时效</li>
<li>设置缓存控制</li>
</ul>
<h4 id="22-首页"><a class="markdownIt-Anchor" href="#22-首页"></a> 2.2 首页</h4>
<p>找到下一个静态内部类<code>EnableWebMvcConfiguration</code>，关注如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span><br><span class="line"><span class="params">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">	<span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">			<span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">	welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">	welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">	<span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title function_">getWelcomePage</span><span class="params">()</span> &#123;</span><br><span class="line">	String[] locations = getResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">	<span class="keyword">return</span> Arrays.stream(locations).map(<span class="built_in">this</span>::getIndexHtml).filter(<span class="built_in">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Resource <span class="title function_">getIndexHtml</span><span class="params">(String location)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader.getResource(location + <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的代码逻辑说明了是以所有的静态资源根路径下去找到的第一个<code>index.html</code>文件作为首页。然后定位到<code>WelcomePageHandlerMapping</code>类，构造方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">	<span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">		logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">		setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">		logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">		setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先在静态资源路径参数里有<code>/**</code>然后转发到index.html文件，否则就去模版引擎里去找有没有映射到<code>index</code>路径的</p>
<h2 id="三-功能扩展"><a class="markdownIt-Anchor" href="#三-功能扩展"></a> 三、功能扩展</h2>
<h3 id="1-如何扩展"><a class="markdownIt-Anchor" href="#1-如何扩展"></a> 1、如何扩展</h3>
<p>要想扩展Spring MVC的功能，就如官方文档所说明的那样，新建一个类，继承<code>WebMvcConfigurer</code>类，并添加<code>@Configuration</code>注解，但不要加<code>@EnableWebMvc</code>注解（后续说明原因）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">	<span class="comment">// 选择需要实现的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20200513222232969.png" alt="image-20200513222232969" /></p>
<p>可以看到能实现的方法还是比较多的，比较重要的方法：</p>
<ul>
<li><code>addViewControllers</code>添加视图控制器</li>
<li><code>addInterceptors</code>添加拦截器</li>
<li><code>addResourceHandlers</code>添加资源处理器</li>
<li><code>addCorsMappings</code>添加跨域资源访问映射</li>
</ul>
<h3 id="2-注意事项"><a class="markdownIt-Anchor" href="#2-注意事项"></a> 2、注意事项</h3>
<p>上文说到，扩展功能不能添加<code>@EnableWebMvc</code>注解，那么接下来去源码中分析原因：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个注解其实就是导入了<code>DelegatingWebMvcConfiguration</code>类，这个类继承了<code>WebMvcConfigurationSupport</code>类。此时再回过头去看<code>WebMvcAutoConfiguration</code>类的注解，如果存在<code>WebMvcConfigurationSupport</code>类，那么默认的自动配置类就不会生效。所以仅仅扩展功能是不能添加<code>@EnableWebMvc</code>注解的，如果想完全接管默认的自动配置，那就可以使用<code>@EnableWebMvc</code>注解</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot与Swagger的入门和使用</title>
    <url>/springboot-swagger/</url>
    <content><![CDATA[<img src="https://static1.smartbear.co/swagger/media/assets/images/swagger_logo.svg" height="50%" width="50%" alt="Swagger Logo">
<h2 id="一-引言"><a class="markdownIt-Anchor" href="#一-引言"></a> 一、引言</h2>
<p>前后端分离开发的项目，前端通过访问后端接口来进行交互，此时一份规范、实时的API文档显得十分重要。</p>
<span id="more"></span>
<p>历史（翻译自<a href="https://swagger.io/">Swagger官网</a>）：</p>
<blockquote>
<p>2010年，Swagger最初是一个简单的开源规范，用于设计RESTful APIs。还开发了Swagger UI，Swagger Editor和Swagger Codegen等开源工具，以更好地实现和可视化该规范中定义的API。由规范和开源工具组成的Swagger项目变得非常流行，从而创建了一个由社区驱动工具组成的庞大生态系统。<br />
2015年，Swagger项目被SmartBear Software收购。Swagger规范捐赠给Linux基金会，并更名为OpenAPI。<br />
这个规范，用以规范REST API的描述方式。创建OpenAPI提倡旨在以开放和透明的方式指导OAS（办公自动化系统）的发展。<br />
自那以来，Swagger已成为最受欢迎的工具套件，可以在整个API生命周期中充分利用OAS的功能。</p>
</blockquote>
<h2 id="二-简介"><a class="markdownIt-Anchor" href="#二-简介"></a> 二、简介</h2>
<h3 id="1-关于openapi"><a class="markdownIt-Anchor" href="#1-关于openapi"></a> 1、关于OpenAPI</h3>
<p>OpenAPI规范（以前是Swagger规范）是RESTful APIs的一种API描述格式。OpenAPI文件允许您描述整个API，包括：</p>
<ul>
<li>允许端点（<code>/users</code>）和每个端点上的操作（<code>GET /users</code>、<code>POST /users</code>）</li>
<li>每个操作中操作参数的输入和输出</li>
<li>身份认证方法</li>
<li>联系信息、许可证、使用条款和其他信息</li>
</ul>
<p>API规范可以用YAML或JSON格式编写。这种格式易于学习，对人和机器都是可读的。完整的OpenAPI规范在GitHub上：<a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI 3.0规范</a></p>
<h3 id="2-关于swagger"><a class="markdownIt-Anchor" href="#2-关于swagger"></a> 2、关于Swagger</h3>
<p>Swagger是一组围绕OpenAPI规范构建的开源工具，可以帮助您设计、构建、记录和使用REST APIs。主要的Swagger工具包括：</p>
<ul>
<li><a href="http://editor.swagger.io/">Swagger编辑器</a>：基于浏览器的编辑器，你可以编写OpenAPI规范。</li>
<li><a href="https://swagger.io/swagger-ui/">Swagger UI</a>：将OpenAPI规范呈现为交互式API文档。</li>
<li><a href="https://github.com/swagger-api/swagger-codegen">Swagger Codegen</a>：根据OpenAPI规范生成服务器存根和客户端库。</li>
</ul>
<p>在Swagger的<a href="https://github.com/swagger-api">Github仓库</a>中可以注意到Swagger的核心是由Java编写的</p>
<h3 id="3-springfoxswagger-springmvc"><a class="markdownIt-Anchor" href="#3-springfoxswagger-springmvc"></a> 3、SpringFox？Swagger-Springmvc！</h3>
<p>要在Springboot程序中使用Swagger，必然会用某种方式去集成它，很多Springboot集成Swagger的教程中，Swagger包名前面都会有一个springfox的前缀，那么这个springfox是什么呢？<a href="http://springfox.github.io/springfox/docs/current/">SpringFox的参考文档</a>中说明了由来：</p>
<blockquote>
<p>Springfox最初是从<a href="https://github.com/martypitt">Marty Pitt</a>创建的一个叫<em>swagger-springmvc</em>的项目逐渐发展而来的</p>
</blockquote>
<p>Springfox套件的java库都是为了自动生成并使用spring系列项目编写的JSON API的机器和人类可读规范。Springfox的工作方式是在运行时对应用程序进行一次检查，根据spring配置、类结构和各种编译时java注解来推断API语义。通常来说，这种方式就是AOP</p>
<h2 id="三-与springboot的整合与使用"><a class="markdownIt-Anchor" href="#三-与springboot的整合与使用"></a> 三、与Springboot的整合与使用</h2>
<p><strong>注：以下整合方式基于Springfox3.0版本，与2.X有较大差异，具体可查阅参考文档中的<a href="http://springfox.github.io/springfox/docs/current/#migrating-from-existing-2-x-version">2.1.3.从现有2.x版本迁移</a></strong></p>
<h3 id="1-准备工作"><a class="markdownIt-Anchor" href="#1-准备工作"></a> 1、准备工作</h3>
<p>首先创建一个springboot项目（通过IDEA的Spring Initializr），依赖选项至少勾选一个spring-boot-starter-web，可选lombok和spring-boot-devtools，然后导入springfox的依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>写一个“hello world”测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-开启swagger"><a class="markdownIt-Anchor" href="#2-开启swagger"></a> 2、开启Swagger</h3>
<p>官方的参考文档中<a href="http://springfox.github.io/springfox/docs/current/#quick-start-guides">3.快速入门指南</a>的示例是完整的配置，使用了<code>@ComponentScan</code>是因为控制器类不在启动器类的同一个包或子包下，我们一般情况下开发的项目不需要这样，所以简单的使用如下即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，在springfox3.0版本中无需任何配置即可使用，因为在springfox-boot-starter包中已经按springboot的规范写好了自动配置类<code>OpenApiAutoConfiguration</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SpringfoxConfigurationProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(value = &quot;springfox.documentation.enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@Import(&#123;</span></span><br><span class="line"><span class="meta">    OpenApiDocumentationConfiguration.class,</span></span><br><span class="line"><span class="meta">    SpringDataRestConfiguration.class,</span></span><br><span class="line"><span class="meta">    BeanValidatorPluginsConfiguration.class,</span></span><br><span class="line"><span class="meta">    Swagger2DocumentationConfiguration.class,</span></span><br><span class="line"><span class="meta">    SwaggerUiWebFluxConfiguration.class,</span></span><br><span class="line"><span class="meta">    SwaggerUiWebMvcConfiguration.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">    HttpMessageConvertersAutoConfiguration.class, RepositoryRestMvcAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenApiAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目，访问*<a href="http://localhost:8080/swagger-ui/index.html*%E6%88%96%E8%80%85*http://localhost:8080/swagger-ui/*%EF%BC%88%E6%B3%A8%E6%84%8F%E5%90%8E%E9%9D%A2%E8%BF%99%E4%B8%AA%E6%9C%80%E5%90%8E%E5%BF%85%E9%A1%BB%E6%9C%89%60/%60%E5%90%A6%E5%88%99%E4%BC%9A404%EF%BC%89">http://localhost:8080/swagger-ui/index.html*或者*http://localhost:8080/swagger-ui/*（注意后面这个最后必须有`/`否则会404）</a></p>
<p>默认配置下这就是swagger-ui的界面了，上面的很多内容都可以自定义配置</p>
<p><img src="image-20201202024129354.png" alt="image-20201202024129354" /></p>
<h3 id="3-配置"><a class="markdownIt-Anchor" href="#3-配置"></a> 3、配置</h3>
<h4 id="31api信息"><a class="markdownIt-Anchor" href="#31api信息"></a> 3.1.api信息</h4>
<blockquote>
<p>Springfox使用了一个<code>Docket</code>对象来记录服务的信息，这样做是为了更加符合文档的表达内容与呈现格式无关的情况。</p>
<p><code>Docket</code>表示对文档内容的概述或其它的简要说明，它有助于配置要记录的服务子集，并按名称进行分组。这方面的重要变化是能够为api选择提供一个基于表达式的<code>predicate</code></p>
</blockquote>
<p>接着上面的<code>Swagger2Config</code>配置类，增加一个<code>Docket</code>的bean即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class="line">        <span class="comment">// 分组组名：如果存在多个Docket实例，则每个实例必须具有此方法提供的唯一的组名。默认为“default”</span></span><br><span class="line">		docket.groupName(<span class="string">&quot;组名&quot;</span>)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">		<span class="keyword">return</span> docket;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 联系人名字、网址、邮箱</span></span><br><span class="line">		<span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;VoidSoul&quot;</span>, <span class="string">&quot;https://voidsoul0.github.io/&quot;</span>, <span class="string">&quot;360301524@qq.com&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">				.title(<span class="string">&quot;api文档标题&quot;</span>)</span><br><span class="line">				.description(<span class="string">&quot;api文档描述&quot;</span>)</span><br><span class="line">				.version(<span class="string">&quot;v1.0&quot;</span>) <span class="comment">// api文档版本</span></span><br><span class="line">				.termsOfServiceUrl(<span class="string">&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;</span>) <span class="comment">// 服务条款网址</span></span><br><span class="line">				.contact(contact)</span><br><span class="line">				.license(<span class="string">&quot;Apache 2.0&quot;</span>) <span class="comment">// 许可证</span></span><br><span class="line">				.licenseUrl(<span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>) <span class="comment">// 许可证网址</span></span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置好后，再次访问swagger-ui界面：</p>
<p><img src="image-20201203041055377.png" alt="image-20201203041055377" /></p>
<h4 id="32predicate判断式"><a class="markdownIt-Anchor" href="#32predicate判断式"></a> 3.2.predicate(判断式)</h4>
<p>关于前面提到的<code>predicate</code>，这里特指数学逻辑上的predicate，在查阅资料和使用后发现这是一个比较抽象的概念。以下引用自<a href="https://en.wikipedia.org/wiki/Predicate_(mathematical_logic)">wiki百科</a></p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Mathematical_logic">mathematical logic</a>, a <strong>predicate</strong> is commonly understood to be a <a href="https://en.wikipedia.org/wiki/Boolean-valued_function">Boolean-valued function</a> <em>P</em>: <em>X</em>→ {true, false}, called a predicate on <em>X</em>. However, predicates have many different uses and interpretations in mathematics and logic, and their precise definition, meaning and use will vary from theory to theory. For example, when a theory defines the concept of a <a href="https://en.wikipedia.org/wiki/Relation_(mathematics)">relation</a>, a predicate simply becomes the <a href="https://en.wikipedia.org/wiki/Indicator_function">characteristic function</a> (otherwise known as the <a href="https://en.wikipedia.org/wiki/Indicator_function">indicator function</a>) of a relation. However, not all theories have relations, or are founded on <a href="https://en.wikipedia.org/wiki/Set_theory">set theory</a>, and so one must be careful with the proper definition and semantic interpretation of a predicate.</p>
</blockquote>
<p>简单来说，predicate的一种简单的表达形式则是布尔值函数，即自变量x映射到因变量y，y的取值是true或者false。</p>
<p>而在java中则是jdk8的函数式编程特性之一，这里就不再详解了，具体可查阅参考文档：<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Predicate接口</a></p>
<h4 id="33接口扫描"><a class="markdownIt-Anchor" href="#33接口扫描"></a> 3.3.接口扫描</h4>
<p>上述配置默认是扫描的所有接口，包括springboot自带的<code>basic-error-controller</code>，如果想自定义扫描的接口，可以使用如下方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class="line">    docket.apiInfo(apiInfo())</span><br><span class="line">        .groupName(<span class="string">&quot;组名&quot;</span>)</span><br><span class="line">        .select()</span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.controller&quot;</span>))</span><br><span class="line">        .paths(PathSelectors.ant(<span class="string">&quot;/**&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> docket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>apis()</code>只接受<code>RequestHandler</code>类型的<code>Predicate</code>，这里使用<code>RequestHandlerSelectors</code>，它有以下几个公共的静态方法：</p>
<ul>
<li><code>any()</code>，任何<code>RequestHandler</code>都满足条件</li>
<li><code>none()</code>，与上面相反</li>
<li><code>withMethodAnnotation()</code>，将<code>RequestHandler</code>与给定的处理方法上的注解进行匹配</li>
<li><code>withClassAnnotation()</code>，将<code>RequestHandler</code>与给定的处理类上的注解进行匹配</li>
<li><code>basePackage()</code>，匹配<code>RequestHandler</code>和给定的处理方法的类的基本包名（即类所在包的全路径）的<code>predicate</code>，这个<code>predicate</code>会匹配包括所有给定的basePackage的<code>RequestHandler</code>。</li>
</ul>
<p><code>paths()</code>和上面的相似，只接受<code>String</code>类型的<code>Predicate</code>，这个类是基于url的选择器，可以使用<code>PathSelectors</code>，同样的，<code>PathSelectors</code>有如下几个方法：</p>
<ul>
<li><code>any()</code>，任何路径都满足条件</li>
<li><code>none()</code>，没有路径满足条件</li>
<li><code>regex()</code>，基于正则表达式的路径匹配</li>
<li><code>ant()</code>，基于<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html">Ant样式的路径匹配表达式</a></li>
</ul>
<h4 id="34摘要与描述"><a class="markdownIt-Anchor" href="#34摘要与描述"></a> 3.4.摘要与描述</h4>
<p>可以使用注释来对接口方法和实体类模型进行补充描述。对于使用注解，springfox官方是这样的：</p>
<blockquote>
<p>从哲学上讲，我们不鼓励使用（swagger-core）注解在运行时对服务进行不重要的描述。例如，jackson的注解应始终优于@ApiModelProperty或具有比@ApiModelProperty更大的权重，例如@NotNull或具体的@RequestParam#required应总是优先的。注解只能用于补充文档、重写或调整结果规范，以防止无法推断服务或模式的特征。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">	<span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@ApiModel</code>和<code>@ApiModelProperty</code>使用于实体模型类上，如果这个类在控制器中有使用，会在swagger-ui中显示</p>
<p><img src="image-20201203222544961.png" alt="image-20201203222544961" /></p>
<p>控制器示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;Hello控制器&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ApiOperation(&quot;Get用户方法测试&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;admin&quot;)</span> String username)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ApiOperation(&quot;添加用户方法测试&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(</span></span><br><span class="line"><span class="params">			<span class="meta">@RequestBody</span></span></span><br><span class="line"><span class="params">			<span class="meta">@ApiParam(&quot;用户名和密码&quot;)</span> User user)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Api</code>在类上使用，默认的value则没有在ui上显示，而tags旁边的<code>description</code>属性被弃用了。<code>@ApiOperation</code>则是在方法上使用</p>
<p>需要注意的是，spring-web一些注解的属性，例如<code>@RequestParam</code>的<code>defaultValue</code>也会被解析到ui上</p>
<p><img src="image-20201203223609865.png" alt="image-20201203223609865" /></p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>swagger</tag>
        <tag>springfox</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IntelliJ IDEA与maven整合SSM框架</title>
    <url>/ssm-integration/</url>
    <content><![CDATA[<p>在上一篇示例中演示了spring与mybatis的整合，在学习了springMVC后，就可以把它们整合在一起搭建成大型项目通用的框架了</p>
<span id="more"></span>
<h2 id="一-构建项目基础"><a class="markdownIt-Anchor" href="#一-构建项目基础"></a> 一、构建项目基础</h2>
<h3 id="1-环境说明"><a class="markdownIt-Anchor" href="#1-环境说明"></a> 1、环境说明</h3>
<ul>
<li>Windows10 1903</li>
<li>IntelliJ IDEA 2019.3</li>
<li>JDK 8</li>
<li>maven 3.6</li>
</ul>
<h3 id="2-准备数据库-数据表"><a class="markdownIt-Anchor" href="#2-准备数据库-数据表"></a> 2、准备数据库、数据表</h3>
<p>这里依旧使用<a href="/mybatis/mybatis-association-query/#1-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8-amp-%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE">char_info</a>表</p>
<h3 id="3-创建maven-webapp项目"><a class="markdownIt-Anchor" href="#3-创建maven-webapp项目"></a> 3、创建maven-webapp项目</h3>
<p>新建项目，左边选择maven，勾上Create from archetype，在下面选中maven-archetype-webapp，后面项目名称自己定义。等待maven初始化完成后，右键选择src-新建-目录，如下选中并回车创建maven的几个标准文件夹<br />
<img src="1840374354.png" alt="img" /></p>
<h3 id="4-声明依赖"><a class="markdownIt-Anchor" href="#4-声明依赖"></a> 4、声明依赖</h3>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.ver</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.ver</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mybatis.ver</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">mybatis.ver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring-webmvc所需依赖仅比spring-context多一个spring-web包--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--所以此处无需配置spring-context--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据源与事务--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.ver&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--SM整合包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--在tomcat运行库里添加了mysql驱动包--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--所以这里配置scope为provided--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--以下依赖非整合相关，视需求添加--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--aspectj、jsp标签库、日志、json解析库，单元测试--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--servlet-api可以通过在外部库添加tomcat运行库来引入--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所有依赖关系如下</p>
<p><img src="4260633758.png" alt="img" /></p>
<h3 id="5-使用插件生成mybatis所需类与xml文件"><a class="markdownIt-Anchor" href="#5-使用插件生成mybatis所需类与xml文件"></a> 5、使用插件生成mybatis所需类与xml文件</h3>
<p>这里使用的idea插件是<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">Free MyBatis plugin</a>。在idea配置好数据库连接后，右键char_info表，选择mybatis-generator，然后设置如下</p>
<p><img src="560481680.png" alt="img" /></p>
<p>此时会在项目main目录中生成如下文件</p>
<p><img src="1778991020.png" alt="img" /></p>
<p>稍加修改：</p>
<ul>
<li>在CharInfo生成<code>toString()</code>方法</li>
<li>在CharInfoDao接口添加<code>List&lt;CharInfo&gt; selectAll()</code>方法</li>
<li>此时上述接口新增方法会显示红线报错，按alt+enter会提示在对应xml文件里生成对应标签，然后补充设置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.CharInfo&quot;</span>&gt;</span></span><br><span class="line">	select</span><br><span class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">	from char_info;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二-搭建spring环境"><a class="markdownIt-Anchor" href="#二-搭建spring环境"></a> 二、搭建spring环境</h2>
<h3 id="1-业务层"><a class="markdownIt-Anchor" href="#1-业务层"></a> 1、业务层</h3>
<p>新建service包，包下新建接口，然后service包下新建impl包，新建接口的实现类，并添加注解，此处没有功能仅打印输出，用于测试spring环境</p>
<p>CharInfoService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CharInfoService</span> &#123;</span><br><span class="line">	List&lt;CharInfo&gt; <span class="title function_">showAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CharInfoServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CharInfoService</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;CharInfo&gt; <span class="title function_">showAll</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;业务层：&quot;</span> + <span class="built_in">this</span>.getClass().getName());</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-spring配置文件"><a class="markdownIt-Anchor" href="#2-spring配置文件"></a> 2、spring配置文件</h3>
<p>在资源文件夹下面新建applicationContext.xml，开启service包的注解扫描即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-编写并运行测试类"><a class="markdownIt-Anchor" href="#3-编写并运行测试类"></a> 3、编写并运行测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">springTest</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">CharInfoService</span> <span class="variable">charInfoService</span> <span class="operator">=</span> (CharInfoService) context.getBean(<span class="string">&quot;charInfoServiceImpl&quot;</span>);</span><br><span class="line">		charInfoService.showAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="855991443.png" alt="img" /></p>
<p>输出无报错即验证spring环境正常</p>
<h2 id="三-搭建springmvc环境"><a class="markdownIt-Anchor" href="#三-搭建springmvc环境"></a> 三、搭建springMVC环境</h2>
<h3 id="1-配置webxml"><a class="markdownIt-Anchor" href="#1-配置webxml"></a> 1、配置web.xml</h3>
<p>如果不使用contextConfigLocation参数，那么默认会查找[servlet-name]-servlet.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-配置springmvcxml"><a class="markdownIt-Anchor" href="#2-配置springmvcxml"></a> 2、配置springmvc.xml</h3>
<p>分开配置spring与springmvc，降低耦合度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-配置控制器类"><a class="markdownIt-Anchor" href="#3-配置控制器类"></a> 3、配置控制器类</h3>
<p>新建上述配置文件描述所需的controller包，并新建控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/charInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/list.jsp&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;表示层：&quot;</span> + <span class="built_in">this</span>.getClass().getName();</span><br><span class="line">		mav.addObject(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-创建页面listjsp"><a class="markdownIt-Anchor" href="#4-创建页面listjsp"></a> 4、创建页面list.jsp</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-运行测试"><a class="markdownIt-Anchor" href="#5-运行测试"></a> 5、运行测试</h3>
<p>添加tomcat运行配置，如果控制台中文乱码，就设置虚拟机选项<code>-Dfile.encoding=utf-8</code>。启动成功后访问<code>http://localhost/charInfo/findAll</code>，显示如下即表示配置无误</p>
<p><img src="2241127279.png" alt="img" /></p>
<h2 id="四-配置mybatis并与spring整合"><a class="markdownIt-Anchor" href="#四-配置mybatis并与spring整合"></a> 四、配置mybatis并与spring整合</h2>
<p>这里直接在spring配置文件里配置mybatis，不再单独配置</p>
<h3 id="1-applicationcontextxml新增配置"><a class="markdownIt-Anchor" href="#1-applicationcontextxml新增配置"></a> 1、applicationContext.xml新增配置</h3>
<p>如果数据表列名与java类属性名一致，可不配置mapUnderscoreToCamelCase</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-持久层注入服务层"><a class="markdownIt-Anchor" href="#2-持久层注入服务层"></a> 2、持久层注入服务层</h3>
<p>修改CharInfoServiceImpl.java。idea在spring使用字段自动注入时会报警告，表示不建议使用的方法，所以这里改为了构造函数注入，也可以使用setter方式注入，或者使用jdk的@Resource注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CharInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CharInfoDao charInfoDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">CharInfoServiceImpl</span><span class="params">(CharInfoDao charInfoDao)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.charInfoDao = charInfoDao;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;CharInfo&gt; <span class="title function_">showAll</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> charInfoDao.selectAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-测试"><a class="markdownIt-Anchor" href="#3-测试"></a> 3、测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">smTest</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">CharInfoService</span> <span class="variable">charInfoService</span> <span class="operator">=</span> (CharInfoService) context.getBean(<span class="string">&quot;charInfoServiceImpl&quot;</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfoList = charInfoService.showAll();</span><br><span class="line">		charInfoList.forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1812425610.png" alt="img" /></p>
<h2 id="五-整合spring与springmvc"><a class="markdownIt-Anchor" href="#五-整合spring与springmvc"></a> 五、整合spring与springMVC</h2>
<h3 id="1-webxml新增配置"><a class="markdownIt-Anchor" href="#1-webxml新增配置"></a> 1、web.xml新增配置</h3>
<p>springMVC本来就是spring自己的东西，所以只需要让web框架识别到spring即可，所以这里仅配置两条：关联spring的配置文件、启动ContextLoaderListener</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-服务层注入表现层控制器与视图"><a class="markdownIt-Anchor" href="#2-服务层注入表现层控制器与视图"></a> 2、服务层注入表现层（控制器与视图）</h3>
<p>修改CharInfoController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/charInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CharInfoService charInfoService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">CharInfoController</span><span class="params">(CharInfoService charInfoService)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.charInfoService = charInfoService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> ModelAndView <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;/list.jsp&quot;</span>);</span><br><span class="line">		List&lt;CharInfo&gt; charInfoList = charInfoService.showAll();</span><br><span class="line">		mav.addObject(<span class="string">&quot;list&quot;</span>, charInfoList);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> mav;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改list.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;l&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.star&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.initialCost&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.workName&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;l.workId&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-访问网站"><a class="markdownIt-Anchor" href="#3-访问网站"></a> 3、访问网站</h3>
<p>显示如下与数据库一致，即表示SSM框架搭建完成<br />
<img src="1824091702.png" alt="img" /></p>
<h2 id="六-可补充的其它配置"><a class="markdownIt-Anchor" href="#六-可补充的其它配置"></a> 六、可补充的其它配置</h2>
<h3 id="排除静态资源拦截"><a class="markdownIt-Anchor" href="#排除静态资源拦截"></a> 排除静态资源拦截</h3>
<p>springmvc.xml添加<code>&lt;mvc:default-servlet-handler/&gt;</code></p>
<h3 id="视图解析定位"><a class="markdownIt-Anchor" href="#视图解析定位"></a> 视图解析（定位）</h3>
<p>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在WEB-INF目录下创建pages目录，把jsp文件移动进去，修改控制器ModelAndView的构造参数为<code>ModelAndView(&quot;list&quot;)</code>。地址访问方式无变化</p>
<h3 id="编码过滤"><a class="markdownIt-Anchor" href="#编码过滤"></a> 编码过滤</h3>
<p>需要处理的地方有三处：</p>
<ul>
<li>Request的get请求<br />
在tomcat的server.xml文件中，Connector标签里新增<code>URlEncoding</code>属性，值为UTF-8（tomcat5.0版本以上不用配置）</li>
<li>Request的post请求</li>
</ul>
<p>在web.xml添加过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>查阅源码后看到如下部分得知，底层使用的还是javaEE那套API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">		HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">		<span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> getEncoding();</span><br><span class="line">	<span class="keyword">if</span> (encoding != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="literal">null</span>) &#123;</span><br><span class="line">			request.setCharacterEncoding(encoding);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">			response.setCharacterEncoding(encoding);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Response</li>
</ul>
<p>上面forceResponseEncoding仅仅是对HTML内容响应进行了编码，这里需要对非HTML，比如json数据，进行编码转换。修改springmvc.xml，将mvc:annotation-driven标签扩展开，然后改动如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置声明式事务"><a class="markdownIt-Anchor" href="#配置声明式事务"></a> 配置声明式事务</h3>
<p>这个功能是属于业务层的，所以在applicationContext.xml文件里添加设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;show*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;CharInfoServicePointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;CharInfoServicePointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>部分标签的默认值未书写，tx:method可视情况添加与修改</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli学习笔记</title>
    <url>/vue-cli-learn/</url>
    <content><![CDATA[<p><strong>此笔记对应视频：</strong><a href="https://www.bilibili.com/video/BV18E411a7mC">【狂神说Java】Vue最新快速上手教程通俗易懂</a>P13-P19</p>
<span id="more"></span>
<hr />
<p>阅读前注意：<code>目前Vue-cli版本已经4.x了，视频中使用的是2.x，区别较大。本文对应视频学习依旧使用2.x版本</code></p>
<h2 id="一-vue-cli简介"><a class="markdownIt-Anchor" href="#一-vue-cli简介"></a> 一、Vue-cli简介</h2>
<p>cli意思是命令行界面（command-line interface）。</p>
<p>vue-cli是一个基于Vue.js进行快速开发的完整系统，是Vue.js开发的标准工具，可以认为它是vue构建项目的脚手架，能够进行组件式开发。</p>
<h2 id="二-准备工作"><a class="markdownIt-Anchor" href="#二-准备工作"></a> 二、准备工作</h2>
<h3 id="1-环境需求"><a class="markdownIt-Anchor" href="#1-环境需求"></a> 1、环境需求</h3>
<p>要使用vue-cli 2.x，需要以下前提条件：</p>
<ul>
<li>
<p><a href="https://nodejs.org/zh-cn/download/">Node.js</a>（版本6.x以上）</p>
</li>
<li>
<p>npm（版本3以上，Node.js已包含 npm）</p>
<blockquote>
<p>npm全称Node Package Manager，即node包管理器，也是javascript包管理器</p>
</blockquote>
</li>
<li>
<p>git（非必须）</p>
</li>
</ul>
<p>可以使用安装包(.msi)傻瓜式安装，也可以使用二进制文件（推荐）免安装，解压后将其根目录添加到<code>Path</code>环境变量即可</p>
<h3 id="2-使用淘宝npm镜像"><a class="markdownIt-Anchor" href="#2-使用淘宝npm镜像"></a> 2、使用淘宝npm镜像</h3>
<p>直接使用npm安装模块会走国外的地址，比较慢，推荐使用<a href="https://developer.aliyun.com/mirror/NPM">淘宝npm镜像</a>，可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步。使用如下命令来安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>然后就可以使用cnpm来安装模块了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install 模块名</span><br></pre></td></tr></table></figure>
<h3 id="3-安装vue-cli"><a class="markdownIt-Anchor" href="#3-安装vue-cli"></a> 3、安装vue-cli</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">或</span><br><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>
<h3 id="4-检测安装"><a class="markdownIt-Anchor" href="#4-检测安装"></a> 4、检测安装</h3>
<p>使用如下命令查看版本号，检测是否安装成功（最后一个V是大写），如果命令无效，请检查环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<h2 id="三-第一个vue-cli程序"><a class="markdownIt-Anchor" href="#三-第一个vue-cli程序"></a> 三、第一个vue-cli程序</h2>
<h3 id="1-部署"><a class="markdownIt-Anchor" href="#1-部署"></a> 1、部署</h3>
<p>使用<code>vue list</code>或<code>vue-list</code>命令查看可以使用的模版（仅2.x版本），如果命令无效就再安装一下vue-cli</p>
<blockquote>
<p>Available official templates:</p>
<p>★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.<br />
★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.<br />
★  pwa - PWA template for vue-cli based on the webpack template<br />
★  simple - The simplest possible Vue setup in a single HTML file<br />
★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.<br />
★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</p>
</blockquote>
<p>使用<code>vue init &lt;模版名&gt; &lt;项目名&gt;</code>来创建一个vue项目，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue init webpack hello-vue</span><br></pre></td></tr></table></figure>
<p>然后依次提示</p>
<ul>
<li>
<p>项目名（默认hello-vue，回车即可）</p>
</li>
<li>
<p>项目描述（默认A Vue.js project，回车即可）</p>
</li>
<li>
<p>作者名字</p>
</li>
<li>
<p>构建类型（这里使用方向键选择第一项）</p>
<ul>
<li>运行时+编译：推荐大多数用户使用</li>
<li>仅运行时：约6kb大小，min+gzip压缩，但是模板（或任何特定于Vue的HTML）只允许在.Vue文件中使用-其他地方必须提供函数</li>
</ul>
<p><strong>以下选项均输入N</strong></p>
</li>
<li>
<p>是否安装vue-router</p>
</li>
<li>
<p>是否使用ESLint对代码进行初始化</p>
</li>
<li>
<p>是否安装单元测试</p>
</li>
<li>
<p>是否安装e2e测试（基于Nightwatch）</p>
</li>
<li>
<p>项目创建后，是否为您自动运行“npm install”？（推荐）</p>
<ul>
<li>虽然官方推荐，但我们可以选择第三项，自己手动运行<code>npm install</code>命令</li>
</ul>
</li>
</ul>
<p>手动运行<code>npm install</code>，它会根据项目下<code>package.json</code>文件里的依赖安装node_modules，有很大，接近2万个文件，100+MB</p>
<p>上面的操作都可以在Intellij IDEA的终端里完成</p>
<h3 id="2-运行"><a class="markdownIt-Anchor" href="#2-运行"></a> 2、运行</h3>
<p>执行<code>npm run dev</code>命令，或者使用IDEA在<code>package.json</code>文件里点击start的小箭头</p>
<p><img src="image-20200619180425383.png" alt="image-20200619180425383" /></p>
<p>看到编译成功的提示后，用浏览器访问<code>http://localhost:8080/</code></p>
<p><img src="image-20200619185557904.png" alt="image-20200619185557904" /></p>
<h3 id="3-尝试修改"><a class="markdownIt-Anchor" href="#3-尝试修改"></a> 3、尝试修改</h3>
<p>在src目录下App.vue为主文件，里面分为三部分</p>
<ul>
<li>
<p>template是视图模板</p>
</li>
<li>
<p>script是js脚本，使用了ECMAScript的语法</p>
</li>
<li>
<p>style则是css样式</p>
</li>
</ul>
<p>阅读脚本部分，发现它导入了components目录的HelloWorld.vue文件为组件，将其删减并修改如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;HelloWorld&#x27;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#x27;Hello World&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>再次运行<code>npm run dev</code>并访问</p>
<p><img src="image-20200619192139601.png" alt="image-20200619192139601" /></p>
<h2 id="四-webpack"><a class="markdownIt-Anchor" href="#四-webpack"></a> 四、webpack</h2>
<p>在上面那个项目的build文件夹下可以看到webpack相关的配置文件（仅限vue-cli2.x版本），那么接下来就介绍下</p>
<h3 id="1-什么是-webpack"><a class="markdownIt-Anchor" href="#1-什么是-webpack"></a> 1、什么是 webpack?</h3>
<p>类似于java的maven，不同的是maven囊括了包管理和打包，而前端则是npm管理包，webpack打包。</p>
<blockquote>
<p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p>
</blockquote>
<p><a href="https://www.webpackjs.com/">官网</a>横幅十分形象的展示了webpack的作用</p>
<p>![](GIF 2020-6-20 17-03-41.gif)</p>
<h3 id="2-安装webpack"><a class="markdownIt-Anchor" href="#2-安装webpack"></a> 2、安装webpack</h3>
<p>目前webpack的版本是</p>
<p><a href="https://github.com/webpack/webpack/releases"><img src="https://img.shields.io/npm/v/webpack.svg?label=webpack&amp;style=flat-square&amp;maxAge=3600" alt="GitHub release"></a></p>
<p>使用npm或者cnpm安装，如果使用 webpack 4版本及以上，还需要安装 CLI。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack</span><br><span class="line">cnpm install -g webpack-cli</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</em></p>
</blockquote>
<p>但是目前学习阶段暂时使用全局安装</p>
<h3 id="3-编码-打包-使用"><a class="markdownIt-Anchor" href="#3-编码-打包-使用"></a> 3、编码、打包、使用</h3>
<p>项目结构如下</p>
<p><img src="image-20200619230422653.png" alt="image-20200619230422653" /></p>
<p>如下依次创建文件并书写代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;hello webpack&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&quot;./hello&quot;</span>;</span><br><span class="line"><span class="title function_">hello</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>, <span class="comment">// 配置入口文件</span></span><br><span class="line">	<span class="attr">output</span>: &#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&quot;./js/bundle.js&quot;</span> <span class="comment">// 配置导出路径及文件名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后在项目根目录打开终端使用<code>webpack</code>命令打包，完成后会出现一个dist目录，里面就是已经压缩过了打包好的js文件。</p>
<p>**如何使用？**写一个html来引用它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="image-20200619231710027.png" alt="image-20200619231710027" /></p>
<h2 id="五-vue-router"><a class="markdownIt-Anchor" href="#五-vue-router"></a> 五、Vue Router</h2>
<h3 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1、简介</h3>
<blockquote>
<p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p>
</blockquote>
<p>简单来说就是前端控制页面跳转的一种机制，根据不同的 url 地址展示不同的内容和页面，可以实现局部刷新的效果</p>
<h3 id="2-准备工作"><a class="markdownIt-Anchor" href="#2-准备工作"></a> 2、准备工作</h3>
<p>使用<a href="#%E4%B8%89%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAvue-cli%E7%A8%8B%E5%BA%8F">第一个vue-cli程序</a>里创建的项目，删除components和assets目录下的文件，App.vue文件中模版仅保留div，脚本仅保留导出名。</p>
<p>在项目根目录使用npm或cnpm命令安装Vue Router</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure>
<p>安装完成后，在components目录下新建两个Vue Component文件</p>
<p>Login.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;登录页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Login&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>About.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;关于页&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;About&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-使用vue-router"><a class="markdownIt-Anchor" href="#3-使用vue-router"></a> 3、使用Vue Router</h3>
<p>新建一个router目录，并且新建index.js文件，内容如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;../components/Login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../components/About&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在main.js里引用router目录并添加到Vue对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后在App.vue的模版里使用（此方法为声明式的导航）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p><code>npm run dev</code>启动程序，访问页面</p>
<p><code>&lt;router-link&gt;</code>实际上被渲染为了a标签，下图是点击前的页面</p>
<p><img src="image-20200620185529340.png" alt="image-20200620185529340" /></p>
<p>点击后</p>
<p><img src="image-20200620185716538.png" alt="image-20200620185716538" /></p>
<h2 id="六-在vue-cli中使用element-ui"><a class="markdownIt-Anchor" href="#六-在vue-cli中使用element-ui"></a> 六、在vue-cli中使用element-ui</h2>
<blockquote>
<p><a href="https://element.eleme.cn/#/zh-CN">Element-Ul</a>是饿了么前端团队推出的一款基于Vue.js 2.0的桌面端UI框架，一套为开发者、设计师和产品经理准备的基于Vue 2.0的桌面端组件库</p>
</blockquote>
<p>安装（i是instal的简写，S是save的简写）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>用npm i安装的模块无法用npm uninstall删除，用npm uninstall i才能卸载掉</p>
</li>
<li>
<p>npm i会帮助检测与当前node版本最匹配的npm包版本号，并匹配出来相互依赖的npm包应该提升的版本号</p>
</li>
<li>
<p>部分npm包在当前node版本下无法使用，必须使用建议版本</p>
</li>
<li>
<p>安装报错时intall肯定会出现npm-debug.log 文件，npm i不一定</p>
</li>
</ul>
<p>依旧使用上面那个项目，在main,js里引入element-ui</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>新建一个view目录，然后目录下新建文件</p>
<p>Login.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>欢迎登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;账号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;onSubmit(&#x27;loginForm&#x27;)&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;提示&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入账号和密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible=false&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">form</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">rules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">username</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;账号不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">password</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;密码不能为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">dialogVisible</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">onSubmit</span>(<span class="params">formName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (valid) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/main&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.login-box</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#DCDFE6</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">350px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">35px</span> <span class="number">15px</span> <span class="number">35px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -Webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">#909399</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.login-title</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">48px</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#303133</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Main.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">name</span>: <span class="string">&quot;Main&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>修改一下路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;../view/Login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&quot;../view/Main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Main</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>修改App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>然后就可以运行了，访问<code>http://localhost:8080/#/login</code>，输入任意字符点击登录即可跳转</p>
<h2 id="七-vue-router补充内容"><a class="markdownIt-Anchor" href="#七-vue-router补充内容"></a> 七、Vue Router补充内容</h2>
<h3 id="1-嵌套路由"><a class="markdownIt-Anchor" href="#1-嵌套路由"></a> 1、嵌套路由</h3>
<h4 id="11-简述"><a class="markdownIt-Anchor" href="#11-简述"></a> 1.1 简述</h4>
<blockquote>
<p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/user/foo/profile                     /user/foo/posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure>
<p>借助vue-router，使用嵌套路由配置，就可以很简单地表达这种关系。</p>
<h4 id="12-使用"><a class="markdownIt-Anchor" href="#12-使用"></a> 1.2 使用</h4>
<p>接着使用上面的项目，在view文件夹下新建user文件夹，然后新建文件</p>
<p>Profile.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;个人信息&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Profile&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>List.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;用户列表&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;List&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>修改Main.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container style=&quot;float: left&quot;&gt;</span><br><span class="line">      &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds=&quot;[&#x27;1&#x27;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;用户管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;router-link to=&quot;/user/profile&quot;&gt;个人信息&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;router-link to=&quot;/user/list&quot;&gt;用户列表&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;内容管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-1&quot;&gt;分类管理&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-2&quot;&gt;内容列表&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">      &lt;/el-aside&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header style=&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">        &lt;el-dropdown&gt;</span><br><span class="line">          &lt;i class=&quot;el-icon-setting&quot; style=&quot;margin-right: 15px&quot;&gt;&lt;/i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/el-dropdown-menu&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;router-view/&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Main&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #55cfff;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>修改路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&quot;../view/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;../view/user/Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&quot;../view/user/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Profile</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">List</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>注意：以 <code>/ </code>开头的嵌套路径会被当作根路径，否则就是相对当前路径</strong></p>
<h3 id="2-参数传递"><a class="markdownIt-Anchor" href="#2-参数传递"></a> 2、参数传递</h3>
<p>在Main.vue里修改个人信息的路由链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;profile&#x27;, params: &#123;id: 1&#125;&#125;&quot;</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>给to属性加<code>:</code>符号绑定数据，name参数只能传递路径的name，所以修改路由配置，同时在path上绑定参数名</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">path<span class="punctuation">:</span> &#x27;/main&#x27;<span class="punctuation">,</span></span><br><span class="line">component<span class="punctuation">:</span> Main<span class="punctuation">,</span></span><br><span class="line">children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    name<span class="punctuation">:</span> &#x27;profile&#x27;<span class="punctuation">,</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/profile/<span class="punctuation">:</span>id&#x27;<span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> Profile</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> &#x27;/user/list&#x27;<span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> List</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>最后修改Profile.vue显示参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>演示：</p>
<p><img src="%60CBDALS%5DJB30POAOHQH7%60B.gif" alt="img" /></p>
<h3 id="3-重定向"><a class="markdownIt-Anchor" href="#3-重定向"></a> 3、重定向</h3>
<p>重定向也是通过 routes 配置来完成的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  path<span class="punctuation">:</span> &#x27;/index&#x27;<span class="punctuation">,</span></span><br><span class="line">  redirect<span class="punctuation">:</span> &#x27;/main&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样，访问<code>/index</code>就会跳转到<code>/main</code>路径</p>
<h3 id="4-404页面"><a class="markdownIt-Anchor" href="#4-404页面"></a> 4、404页面</h3>
<blockquote>
<p>常规参数只会匹配被<code>/</code>分隔的URL片段中的字符。如果想匹配任意路径，我们可以使用通配符<code>*</code></p>
<p>当使用通配符路由时，请确保路由的顺序是正确的，也就是说<strong>含有通配符的路由应该放在最后</strong>。路由<code>&#123; path: '*' &#125;</code>通常用于客户端 404 错误</p>
</blockquote>
<p>view目录下新建一个Error.vue文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;h1&gt;404，not found&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name: &quot;Error&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在路由配置里增加一个路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入略</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Error</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="5-路由钩子组件内的导航守卫"><a class="markdownIt-Anchor" href="#5-路由钩子组件内的导航守卫"></a> 5、路由钩子（组件内的导航守卫）</h3>
<p>类似于springMVC的拦截器</p>
<blockquote>
<p>“导航”表示路由正在发生改变</p>
</blockquote>
<p>修改Profile.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;$route.params.id&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Profile&quot;,</span><br><span class="line">    beforeRouteEnter:(to, from, next) =&gt; &#123;</span><br><span class="line">      console.log(&quot;进入路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteUpdate:(to, from, next) =&gt; &#123;</span><br><span class="line">      console.log(&quot;更新路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave:(to, from, next) =&gt; &#123;</span><br><span class="line">      console.log(&quot;离开路由前&quot;);</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>
<p>to: Route： 即将要进入的目标路由对象</p>
</li>
<li>
<p>from: Route： 当前导航正要离开的路由对象</p>
</li>
<li>
<p>next: Function： 一定要调用该方法来释放这个钩子。执行效果依赖next方法的调用参数。</p>
<ul>
<li>next():：进行管道中的下一个钩子。</li>
<li>next(false)： 中断当前的导航。</li>
<li>next(‘/’) 或者 next({ path: ‘/’ }):：跳转到一个不同的地址。</li>
</ul>
</li>
</ul>
<p>方法说明：</p>
<ul>
<li>beforeRouteEnter：在渲染该组件的对应路由被确认前调用，<strong>不能</strong>获取组件实例 <code>this</code>，因为当守卫执行前，组件实例还没被创建</li>
<li>beforeRouteUpdate：在当前路由改变，但是该组件被复用时调用，比如路径<code>/user/profile/1</code>跳转到<code>/user/profile/2</code>，由于会渲染同样的组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。可以访问组件实例 <code>this</code></li>
<li>beforeRouteLeave：导航离开该组件的对应路由时调用，可以访问组件实例 <code>this</code></li>
</ul>
<h3 id="6-html5-history-模式"><a class="markdownIt-Anchor" href="#6-html5-history-模式"></a> 6、HTML5 History 模式</h3>
<p>前面关于路由的所有示例，路径上都会有一个<code>#</code>符号，这是因为</p>
<blockquote>
<p>vue-router默认hash模式 —— 使用URL的hash来模拟一个完整的URL，于是当URL改变时，页面不会重新加载。</p>
<p>如果不想要很丑的hash，我们可以用路由的history模式，这种模式充分利用history.pushState API 来完成URL跳转而无须重新加载页面。</p>
</blockquote>
<p>修改路由配置，增加一个属性，注意history是字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">      <span class="comment">// 略</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用history模式时，URL就像正常的url了</p>
<p><img src="image-20200621211554813.png" alt="image-20200621211554813" /></p>
<p>需要注意的是，这种模式需要后台配置的支持。因为vue应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器访问如例如这样<code>http://oursite.com/user/id</code>的路径时会返回404</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/vue-learn/</url>
    <content><![CDATA[<p><strong>此笔记对应视频：</strong><a href="https://www.bilibili.com/video/BV18E411a7mC">【狂神说Java】Vue最新快速上手教程通俗易懂</a>前12P</p>
<hr />
<h3 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h3>
<blockquote>
<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
</blockquote>
<span id="more"></span>
<h3 id="二-如何使用"><a class="markdownIt-Anchor" href="#二-如何使用"></a> 二、如何使用</h3>
<h4 id="1-下载到本地并使用script引入"><a class="markdownIt-Anchor" href="#1-下载到本地并使用script引入"></a> 1、下载到本地并使用<code>&lt;script&gt;</code>引入</h4>
<p><a href="https://cn.vuejs.org/js/vue.js">开发版本</a>：包含完整的警告和调试模式</p>
<p><a href="https://cn.vuejs.org/js/vue.min.js">生产版本</a>：压缩后的代码，删除了警告，&lt;100KB</p>
<h4 id="2-使用cdn引用推荐"><a class="markdownIt-Anchor" href="#2-使用cdn引用推荐"></a> 2、使用CDN引用（推荐）</h4>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一些提供CDN服务的网站：</p>
<ul>
<li><a href="https://www.bootcdn.cn">https://www.bootcdn.cn</a></li>
<li><a href="https://www.staticfile.org">https://www.staticfile.org</a></li>
<li><a href="https://cdnjs.com/">https://cdnjs.com/</a> (国外)</li>
</ul>
<h3 id="三-第一个vue程序"><a class="markdownIt-Anchor" href="#三-第一个vue程序"></a> 三、第一个Vue程序</h3>
<p>步骤：先创建一个HTML5文件，在body下方使用script标签引入vue。在下面一个script标签里new一个Vue对象，变量名随意。然后增加一个el参数，值为<code>#app</code>，对应body体里的div标签，下一个参数data使用json格式数据，里面可以自定义key-value对。然后在div中使用双大括号引用这个数据，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		&#123;&#123;message&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">message</span>: <span class="string">&quot;hello vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>**如何体现数据绑定？**F12打开调试控制台，修改message的值，此时页面没有刷新，但显示的值改变了</p>
<p>![](GIF 2020-6-15 21-19-16.gif)</p>
<h3 id="四-入门示例"><a class="markdownIt-Anchor" href="#四-入门示例"></a> 四、入门示例</h3>
<h4 id="1-基本语法"><a class="markdownIt-Anchor" href="#1-基本语法"></a> 1、基本语法</h4>
<ul>
<li><code>v-bind</code>前缀可以给html标签的属性绑定数据</li>
<li>判断：<code>v-if、v-else-if、v-else</code>，判断结果为false的标签不会显示</li>
<li>循环：<code>v-for=&quot;(每次遍历取出的对象, 当前项的索引) in 被遍历的对象&quot;</code>，其中索引从0开始，代表索引的变量名可以是任意的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--数据绑定--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">		鼠标悬浮显示数据绑定消息</span><br><span class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--判断--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isOk&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;isOk&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>no<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--循环--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">		&#123;&#123;item.msg&#125;&#125;——&#123;&#123;index&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">message</span>: <span class="string">&quot;hello vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">isOk</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">				&#123;<span class="attr">msg</span>: <span class="string">&quot;项目1&quot;</span>&#125;, &#123;<span class="attr">msg</span>: <span class="string">&quot;项目2&quot;</span>&#125;, &#123;<span class="attr">msg</span>: <span class="string">&quot;项目3&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">			]</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-事件绑定"><a class="markdownIt-Anchor" href="#2-事件绑定"></a> 2、事件绑定</h4>
<p>相当于<code>onclick=&quot;alert('hello')</code>，vue通过分离代码再绑定操作，提高了代码灵活性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">say</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意<code>methods</code>拼写，复数方法</p>
<h4 id="3-双向绑定数据"><a class="markdownIt-Anchor" href="#3-双向绑定数据"></a> 3、双向绑定数据</h4>
<p>文本框里输入字符，后面会同步显示。F12更改msg的值，也会同步显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;在这里输入文本&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">		&#123;&#123;msg&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-组件"><a class="markdownIt-Anchor" href="#4-组件"></a> 4、组件</h4>
<p><code>Vue.component(组件名, &#123;配置选项&#125;)</code>组件全局注册语法，它需要放在<code>new Vue</code>前面。</p>
<p><code>props</code>是子组件用来接受父组件传递过来的数据的一个自定义属性，使用组件时用<code>v-bind</code>来绑定数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:itemref</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">props</span>: [<span class="string">&quot;itemref&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;&#123;&#123;itemref&#125;&#125;&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">items</span>: [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;python&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-axios"><a class="markdownIt-Anchor" href="#5-axios"></a> 5、Axios</h4>
<blockquote>
<p>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br />
Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求。</p>
</blockquote>
<p>首先准备一个json文件，模拟json数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cn.vuejs.org/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>使用CDN导入axios库，vue对象里增加一个<code>data()</code>方法（<strong>注意不是data属性</strong>），直接return上面json数据一致的格式。</p>
<p>使用<code>mounted()</code>方法（<strong>生命周期钩子</strong>的函数）：这个方法在html渲染完成后调用，通常为初始化页面完成后，再对html的dom节点进行一些需要的操作。</p>
<p>在这里使用axios执行get请求，使用链式调用的方式传递url，将响应的数据与Vue对象里Data方法的info属性对应，最后再调用并显示数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>Vue官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.19.2/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="string">&quot;name&quot;</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="string">&quot;url&quot;</span>: <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			axios.<span class="title function_">get</span>(<span class="string">&#x27;../menu.json&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="variable language_">this</span>.<span class="property">info</span>=response.<span class="property">data</span>));</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>附图：Vue实例生命周期</p>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="" /></p>
<h4 id="6-计算属性"><a class="markdownIt-Anchor" href="#6-计算属性"></a> 6、计算属性</h4>
<blockquote>
<p>对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p>
</blockquote>
<h5 id="61-基础例子"><a class="markdownIt-Anchor" href="#61-基础例子"></a> 6.1 基础例子</h5>
<p>先示范一下Vue官网教程的例子。computed里的方法调用时直接书写方法名，不加括号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>原字符串：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转计算后的字符串：&#123;&#123;reversedMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="62-computed与methods"><a class="markdownIt-Anchor" href="#62-computed与methods"></a> 6.2 computed与methods</h5>
<p>可以使用调用方法来达到上面同样的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>原字符串：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转计算后的字符串：&#123;&#123;reversedMessage()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">reversedMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>关于它们的区别，官网上是这样解释的：</p>
<blockquote>
<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
</blockquote>
<p>重点在于基于响应式依赖的<code>computed</code>的缓存机制：只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<h4 id="7-插槽"><a class="markdownIt-Anchor" href="#7-插槽"></a> 7、插槽</h4>
<blockquote>
<p>插槽是Vue实现的一套内容分发的API，将<slot>元素作为承载分发内容的出口。</p>
</blockquote>
<p>也就是说它是基于组件机制下的内容，可以使各组件联系起来。</p>
<p>这个例子展示的是具名插槽：可以给不同的插槽起个名字，一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-title</span> <span class="attr">slot</span>=<span class="string">&quot;list-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list-title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-items</span> <span class="attr">slot</span>=<span class="string">&quot;list-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list-items</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	Vue.component(&quot;list&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;list-title&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">						<span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">						<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;list-items&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">						<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	Vue.component(&quot;list-title&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		props: [&#x27;title&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template: &quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	Vue.component(&quot;list-items&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		props: [&#x27;item&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		template: &quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			title: &quot;编程语言&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			items: [&quot;java&quot;, &quot;c++&quot;, &quot;php&quot;, &quot;python&quot;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	&#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>**数据如何传递的？**如图所示，可以更改相应的参数名来验证</p>
<p><img src="image-20200617151117749.png" alt="image-20200617151117749" /></p>
<p>如果上面的例子太复杂，可以看看下面这个，template里去掉slot标签后，视图中传递的数据是无效的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		&#123;&#123;title&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;slot&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">					&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">title</span>: <span class="string">&quot;编程语言&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="8-自定义事件"><a class="markdownIt-Anchor" href="#8-自定义事件"></a> 8、自定义事件</h4>
<blockquote>
<p>当子组件需要向父组件传递数据时，就会用到自定义事件</p>
</blockquote>
<p>基于上面那个例子，使用自定义事件来实现：点击按钮后删除当前项（包括数据）</p>
<p>需要注意的地方：组件的模版只能有一个根标签，所以要把button写在li里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-title</span> <span class="attr">slot</span>=<span class="string">&quot;list-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list-title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list-items</span> <span class="attr">slot</span>=<span class="string">&quot;list-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in items&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;i&quot;</span> @<span class="attr">remove</span>=<span class="string">&quot;removeItem(i)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list-items</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;slot name=&#x27;list-title&#x27;&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;ul&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;slot name=&#x27;list-items&#x27;&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;/ul&gt;\</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">					&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;list-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;list-items&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">props</span>: [<span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">template</span>: <span class="string">&quot;&lt;li&gt;&#123;&#123;item&#125;&#125;——&lt;button @click=&#x27;doRemove&#x27;&gt;删除&lt;/button&gt;&lt;/li&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">doRemove</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>, index)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">title</span>: <span class="string">&quot;编程语言&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">items</span>: [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;python&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">removeItem</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>**事件是如何关联的？**如下图</p>
<p><img src="image-20200617165518663.png" alt="image-20200617165518663" /></p>
<p>引用官方API上一个简单的例子来演示<code>$emit</code>的作用</p>
<blockquote>
<p>触发当前实例上的事件。附加参数都会传给监听器回调。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;emit-example-simple&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-button</span> <span class="attr">v-on:welcome</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.6.11/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;welcome-button&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">template</span>: <span class="string">`&lt;button v-on:click=&quot;$emit(&#x27;welcome&#x27;)&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						Click me to be welcomed</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">					&lt;/button&gt;`</span></span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>: <span class="string">&#x27;#emit-example-simple&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&#x27;Hi!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h3 id="接下来学习vue-cli"><a class="markdownIt-Anchor" href="#接下来学习vue-cli"></a> 接下来学习：vue-cli</h3>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
